
deploymentsoftware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000106a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00802000  0000106a  000010fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080200e  0080200e  0000110c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000110c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000113c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00001180  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a876  00000000  00000000  00001390  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000039a7  00000000  00000000  0000bc06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000483e  00000000  00000000  0000f5ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000684  00000000  00000000  00013dec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002c66f  00000000  00000000  00014470  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023e6  00000000  00000000  00040adf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001f0  00000000  00000000  00042ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000020b6  00000000  00000000  000430b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	16 c1       	rjmp	.+556    	; 0x232 <__bad_interrupt>
       6:	00 00       	nop
       8:	14 c1       	rjmp	.+552    	; 0x232 <__bad_interrupt>
       a:	00 00       	nop
       c:	12 c1       	rjmp	.+548    	; 0x232 <__bad_interrupt>
       e:	00 00       	nop
      10:	10 c1       	rjmp	.+544    	; 0x232 <__bad_interrupt>
      12:	00 00       	nop
      14:	0e c1       	rjmp	.+540    	; 0x232 <__bad_interrupt>
      16:	00 00       	nop
      18:	0c c1       	rjmp	.+536    	; 0x232 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0a c1       	rjmp	.+532    	; 0x232 <__bad_interrupt>
      1e:	00 00       	nop
      20:	08 c1       	rjmp	.+528    	; 0x232 <__bad_interrupt>
      22:	00 00       	nop
      24:	06 c1       	rjmp	.+524    	; 0x232 <__bad_interrupt>
      26:	00 00       	nop
      28:	04 c1       	rjmp	.+520    	; 0x232 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	02 c1       	rjmp	.+516    	; 0x232 <__bad_interrupt>
      2e:	00 00       	nop
      30:	00 c1       	rjmp	.+512    	; 0x232 <__bad_interrupt>
      32:	00 00       	nop
      34:	fe c0       	rjmp	.+508    	; 0x232 <__bad_interrupt>
      36:	00 00       	nop
      38:	fc c0       	rjmp	.+504    	; 0x232 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	fa c0       	rjmp	.+500    	; 0x232 <__bad_interrupt>
      3e:	00 00       	nop
      40:	f8 c0       	rjmp	.+496    	; 0x232 <__bad_interrupt>
      42:	00 00       	nop
      44:	f6 c0       	rjmp	.+492    	; 0x232 <__bad_interrupt>
      46:	00 00       	nop
      48:	f4 c0       	rjmp	.+488    	; 0x232 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f2 c0       	rjmp	.+484    	; 0x232 <__bad_interrupt>
      4e:	00 00       	nop
      50:	f0 c0       	rjmp	.+480    	; 0x232 <__bad_interrupt>
      52:	00 00       	nop
      54:	ee c0       	rjmp	.+476    	; 0x232 <__bad_interrupt>
      56:	00 00       	nop
      58:	ec c0       	rjmp	.+472    	; 0x232 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ea c0       	rjmp	.+468    	; 0x232 <__bad_interrupt>
      5e:	00 00       	nop
      60:	e8 c0       	rjmp	.+464    	; 0x232 <__bad_interrupt>
      62:	00 00       	nop
      64:	e6 c0       	rjmp	.+460    	; 0x232 <__bad_interrupt>
      66:	00 00       	nop
      68:	e4 c0       	rjmp	.+456    	; 0x232 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e2 c0       	rjmp	.+452    	; 0x232 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e0 c0       	rjmp	.+448    	; 0x232 <__bad_interrupt>
      72:	00 00       	nop
      74:	de c0       	rjmp	.+444    	; 0x232 <__bad_interrupt>
      76:	00 00       	nop
      78:	dc c0       	rjmp	.+440    	; 0x232 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	da c0       	rjmp	.+436    	; 0x232 <__bad_interrupt>
      7e:	00 00       	nop
      80:	d8 c0       	rjmp	.+432    	; 0x232 <__bad_interrupt>
      82:	00 00       	nop
      84:	d6 c0       	rjmp	.+428    	; 0x232 <__bad_interrupt>
      86:	00 00       	nop
      88:	d4 c0       	rjmp	.+424    	; 0x232 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d2 c0       	rjmp	.+420    	; 0x232 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d0 c0       	rjmp	.+416    	; 0x232 <__bad_interrupt>
      92:	00 00       	nop
      94:	ce c0       	rjmp	.+412    	; 0x232 <__bad_interrupt>
      96:	00 00       	nop
      98:	cc c0       	rjmp	.+408    	; 0x232 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ca c0       	rjmp	.+404    	; 0x232 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c8 c0       	rjmp	.+400    	; 0x232 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c6 c0       	rjmp	.+396    	; 0x232 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c4 c0       	rjmp	.+392    	; 0x232 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c2 c0       	rjmp	.+388    	; 0x232 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c0 c0       	rjmp	.+384    	; 0x232 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	be c0       	rjmp	.+380    	; 0x232 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	bc c0       	rjmp	.+376    	; 0x232 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	ba c0       	rjmp	.+372    	; 0x232 <__bad_interrupt>
      be:	00 00       	nop
      c0:	b8 c0       	rjmp	.+368    	; 0x232 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b6 c0       	rjmp	.+364    	; 0x232 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b4 c0       	rjmp	.+360    	; 0x232 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	b2 c0       	rjmp	.+356    	; 0x232 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b0 c0       	rjmp	.+352    	; 0x232 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	ae c0       	rjmp	.+348    	; 0x232 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ac c0       	rjmp	.+344    	; 0x232 <__bad_interrupt>
      da:	00 00       	nop
      dc:	aa c0       	rjmp	.+340    	; 0x232 <__bad_interrupt>
      de:	00 00       	nop
      e0:	a8 c0       	rjmp	.+336    	; 0x232 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a6 c0       	rjmp	.+332    	; 0x232 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	a4 c0       	rjmp	.+328    	; 0x232 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a2 c0       	rjmp	.+324    	; 0x232 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a0 c0       	rjmp	.+320    	; 0x232 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	9e c0       	rjmp	.+316    	; 0x232 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	9c c0       	rjmp	.+312    	; 0x232 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	9a c0       	rjmp	.+308    	; 0x232 <__bad_interrupt>
      fe:	00 00       	nop
     100:	98 c0       	rjmp	.+304    	; 0x232 <__bad_interrupt>
     102:	00 00       	nop
     104:	96 c0       	rjmp	.+300    	; 0x232 <__bad_interrupt>
     106:	00 00       	nop
     108:	94 c0       	rjmp	.+296    	; 0x232 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	92 c0       	rjmp	.+292    	; 0x232 <__bad_interrupt>
     10e:	00 00       	nop
     110:	90 c0       	rjmp	.+288    	; 0x232 <__bad_interrupt>
     112:	00 00       	nop
     114:	8e c0       	rjmp	.+284    	; 0x232 <__bad_interrupt>
     116:	00 00       	nop
     118:	8c c0       	rjmp	.+280    	; 0x232 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a4 c0       	rjmp	.+328    	; 0x266 <__vector_71>
     11e:	00 00       	nop
     120:	d0 c0       	rjmp	.+416    	; 0x2c2 <__vector_72>
     122:	00 00       	nop
     124:	fc c0       	rjmp	.+504    	; 0x31e <__vector_73>
     126:	00 00       	nop
     128:	28 c1       	rjmp	.+592    	; 0x37a <__vector_74>
     12a:	00 00       	nop
     12c:	82 c0       	rjmp	.+260    	; 0x232 <__bad_interrupt>
     12e:	00 00       	nop
     130:	80 c0       	rjmp	.+256    	; 0x232 <__bad_interrupt>
     132:	00 00       	nop
     134:	7e c0       	rjmp	.+252    	; 0x232 <__bad_interrupt>
     136:	00 00       	nop
     138:	7c c0       	rjmp	.+248    	; 0x232 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	7a c0       	rjmp	.+244    	; 0x232 <__bad_interrupt>
     13e:	00 00       	nop
     140:	78 c0       	rjmp	.+240    	; 0x232 <__bad_interrupt>
     142:	00 00       	nop
     144:	76 c0       	rjmp	.+236    	; 0x232 <__bad_interrupt>
     146:	00 00       	nop
     148:	74 c0       	rjmp	.+232    	; 0x232 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	72 c0       	rjmp	.+228    	; 0x232 <__bad_interrupt>
     14e:	00 00       	nop
     150:	70 c0       	rjmp	.+224    	; 0x232 <__bad_interrupt>
     152:	00 00       	nop
     154:	6e c0       	rjmp	.+220    	; 0x232 <__bad_interrupt>
     156:	00 00       	nop
     158:	6c c0       	rjmp	.+216    	; 0x232 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	6a c0       	rjmp	.+212    	; 0x232 <__bad_interrupt>
     15e:	00 00       	nop
     160:	68 c0       	rjmp	.+208    	; 0x232 <__bad_interrupt>
     162:	00 00       	nop
     164:	66 c0       	rjmp	.+204    	; 0x232 <__bad_interrupt>
     166:	00 00       	nop
     168:	64 c0       	rjmp	.+200    	; 0x232 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	62 c0       	rjmp	.+196    	; 0x232 <__bad_interrupt>
     16e:	00 00       	nop
     170:	60 c0       	rjmp	.+192    	; 0x232 <__bad_interrupt>
     172:	00 00       	nop
     174:	5e c0       	rjmp	.+188    	; 0x232 <__bad_interrupt>
     176:	00 00       	nop
     178:	5c c0       	rjmp	.+184    	; 0x232 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	5a c0       	rjmp	.+180    	; 0x232 <__bad_interrupt>
     17e:	00 00       	nop
     180:	58 c0       	rjmp	.+176    	; 0x232 <__bad_interrupt>
     182:	00 00       	nop
     184:	56 c0       	rjmp	.+172    	; 0x232 <__bad_interrupt>
     186:	00 00       	nop
     188:	54 c0       	rjmp	.+168    	; 0x232 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	52 c0       	rjmp	.+164    	; 0x232 <__bad_interrupt>
     18e:	00 00       	nop
     190:	50 c0       	rjmp	.+160    	; 0x232 <__bad_interrupt>
     192:	00 00       	nop
     194:	4e c0       	rjmp	.+156    	; 0x232 <__bad_interrupt>
     196:	00 00       	nop
     198:	4c c0       	rjmp	.+152    	; 0x232 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	4a c0       	rjmp	.+148    	; 0x232 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	48 c0       	rjmp	.+144    	; 0x232 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	46 c0       	rjmp	.+140    	; 0x232 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	44 c0       	rjmp	.+136    	; 0x232 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	42 c0       	rjmp	.+132    	; 0x232 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	40 c0       	rjmp	.+128    	; 0x232 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	3e c0       	rjmp	.+124    	; 0x232 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	3c c0       	rjmp	.+120    	; 0x232 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	3a c0       	rjmp	.+116    	; 0x232 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	38 c0       	rjmp	.+112    	; 0x232 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	36 c0       	rjmp	.+108    	; 0x232 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	34 c0       	rjmp	.+104    	; 0x232 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	32 c0       	rjmp	.+100    	; 0x232 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	30 c0       	rjmp	.+96     	; 0x232 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	2e c0       	rjmp	.+92     	; 0x232 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	2c c0       	rjmp	.+88     	; 0x232 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	2a c0       	rjmp	.+84     	; 0x232 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	28 c0       	rjmp	.+80     	; 0x232 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	26 c0       	rjmp	.+76     	; 0x232 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	24 c0       	rjmp	.+72     	; 0x232 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	22 c0       	rjmp	.+68     	; 0x232 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	20 c0       	rjmp	.+64     	; 0x232 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	1e c0       	rjmp	.+60     	; 0x232 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	1c c0       	rjmp	.+56     	; 0x232 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e2       	ldi	r29, 0x2F	; 47
     206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
     208:	10 e2       	ldi	r17, 0x20	; 32
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	ea e6       	ldi	r30, 0x6A	; 106
     210:	f0 e1       	ldi	r31, 0x10	; 16
     212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
     214:	05 90       	lpm	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	ae 30       	cpi	r26, 0x0E	; 14
     21a:	b1 07       	cpc	r27, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
     21e:	20 e2       	ldi	r18, 0x20	; 32
     220:	ae e0       	ldi	r26, 0x0E	; 14
     222:	b0 e2       	ldi	r27, 0x20	; 32
     224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
     226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
     228:	a0 32       	cpi	r26, 0x20	; 32
     22a:	b2 07       	cpc	r27, r18
     22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
     22e:	63 d5       	rcall	.+2758   	; 0xcf6 <main>
     230:	1a c7       	rjmp	.+3636   	; 0x1066 <_exit>

00000232 <__bad_interrupt>:
     232:	e6 ce       	rjmp	.-564    	; 0x0 <__vectors>

00000234 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
     238:	1f 92       	push	r1
     23a:	cd b7       	in	r28, 0x3d	; 61
     23c:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     23e:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <stdio_base>
     242:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <stdio_base+0x1>
     246:	e0 91 0e 20 	lds	r30, 0x200E	; 0x80200e <__data_end>
     24a:	f0 91 0f 20 	lds	r31, 0x200F	; 0x80200f <__data_end+0x1>
     24e:	be 01       	movw	r22, r28
     250:	6f 5f       	subi	r22, 0xFF	; 255
     252:	7f 4f       	sbci	r23, 0xFF	; 255
     254:	09 95       	icall
	return c;
     256:	89 81       	ldd	r24, Y+1	; 0x01
}
     258:	08 2e       	mov	r0, r24
     25a:	00 0c       	add	r0, r0
     25c:	99 0b       	sbc	r25, r25
     25e:	0f 90       	pop	r0
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	08 95       	ret

00000266 <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     266:	1f 92       	push	r1
     268:	0f 92       	push	r0
     26a:	0f b6       	in	r0, 0x3f	; 63
     26c:	0f 92       	push	r0
     26e:	11 24       	eor	r1, r1
     270:	2f 93       	push	r18
     272:	3f 93       	push	r19
     274:	4f 93       	push	r20
     276:	5f 93       	push	r21
     278:	6f 93       	push	r22
     27a:	7f 93       	push	r23
     27c:	8f 93       	push	r24
     27e:	9f 93       	push	r25
     280:	af 93       	push	r26
     282:	bf 93       	push	r27
     284:	ef 93       	push	r30
     286:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     288:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     28c:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     290:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <adca_callback>
     294:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <adca_callback+0x1>
     298:	61 e0       	ldi	r22, 0x01	; 1
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	92 e0       	ldi	r25, 0x02	; 2
     29e:	09 95       	icall
}
     2a0:	ff 91       	pop	r31
     2a2:	ef 91       	pop	r30
     2a4:	bf 91       	pop	r27
     2a6:	af 91       	pop	r26
     2a8:	9f 91       	pop	r25
     2aa:	8f 91       	pop	r24
     2ac:	7f 91       	pop	r23
     2ae:	6f 91       	pop	r22
     2b0:	5f 91       	pop	r21
     2b2:	4f 91       	pop	r20
     2b4:	3f 91       	pop	r19
     2b6:	2f 91       	pop	r18
     2b8:	0f 90       	pop	r0
     2ba:	0f be       	out	0x3f, r0	; 63
     2bc:	0f 90       	pop	r0
     2be:	1f 90       	pop	r1
     2c0:	18 95       	reti

000002c2 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     2c2:	1f 92       	push	r1
     2c4:	0f 92       	push	r0
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	0f 92       	push	r0
     2ca:	11 24       	eor	r1, r1
     2cc:	2f 93       	push	r18
     2ce:	3f 93       	push	r19
     2d0:	4f 93       	push	r20
     2d2:	5f 93       	push	r21
     2d4:	6f 93       	push	r22
     2d6:	7f 93       	push	r23
     2d8:	8f 93       	push	r24
     2da:	9f 93       	push	r25
     2dc:	af 93       	push	r26
     2de:	bf 93       	push	r27
     2e0:	ef 93       	push	r30
     2e2:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     2e4:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     2e8:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     2ec:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <adca_callback>
     2f0:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <adca_callback+0x1>
     2f4:	62 e0       	ldi	r22, 0x02	; 2
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	92 e0       	ldi	r25, 0x02	; 2
     2fa:	09 95       	icall
}
     2fc:	ff 91       	pop	r31
     2fe:	ef 91       	pop	r30
     300:	bf 91       	pop	r27
     302:	af 91       	pop	r26
     304:	9f 91       	pop	r25
     306:	8f 91       	pop	r24
     308:	7f 91       	pop	r23
     30a:	6f 91       	pop	r22
     30c:	5f 91       	pop	r21
     30e:	4f 91       	pop	r20
     310:	3f 91       	pop	r19
     312:	2f 91       	pop	r18
     314:	0f 90       	pop	r0
     316:	0f be       	out	0x3f, r0	; 63
     318:	0f 90       	pop	r0
     31a:	1f 90       	pop	r1
     31c:	18 95       	reti

0000031e <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     31e:	1f 92       	push	r1
     320:	0f 92       	push	r0
     322:	0f b6       	in	r0, 0x3f	; 63
     324:	0f 92       	push	r0
     326:	11 24       	eor	r1, r1
     328:	2f 93       	push	r18
     32a:	3f 93       	push	r19
     32c:	4f 93       	push	r20
     32e:	5f 93       	push	r21
     330:	6f 93       	push	r22
     332:	7f 93       	push	r23
     334:	8f 93       	push	r24
     336:	9f 93       	push	r25
     338:	af 93       	push	r26
     33a:	bf 93       	push	r27
     33c:	ef 93       	push	r30
     33e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     340:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     344:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     348:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <adca_callback>
     34c:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <adca_callback+0x1>
     350:	64 e0       	ldi	r22, 0x04	; 4
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	92 e0       	ldi	r25, 0x02	; 2
     356:	09 95       	icall
}
     358:	ff 91       	pop	r31
     35a:	ef 91       	pop	r30
     35c:	bf 91       	pop	r27
     35e:	af 91       	pop	r26
     360:	9f 91       	pop	r25
     362:	8f 91       	pop	r24
     364:	7f 91       	pop	r23
     366:	6f 91       	pop	r22
     368:	5f 91       	pop	r21
     36a:	4f 91       	pop	r20
     36c:	3f 91       	pop	r19
     36e:	2f 91       	pop	r18
     370:	0f 90       	pop	r0
     372:	0f be       	out	0x3f, r0	; 63
     374:	0f 90       	pop	r0
     376:	1f 90       	pop	r1
     378:	18 95       	reti

0000037a <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     37a:	1f 92       	push	r1
     37c:	0f 92       	push	r0
     37e:	0f b6       	in	r0, 0x3f	; 63
     380:	0f 92       	push	r0
     382:	11 24       	eor	r1, r1
     384:	2f 93       	push	r18
     386:	3f 93       	push	r19
     388:	4f 93       	push	r20
     38a:	5f 93       	push	r21
     38c:	6f 93       	push	r22
     38e:	7f 93       	push	r23
     390:	8f 93       	push	r24
     392:	9f 93       	push	r25
     394:	af 93       	push	r26
     396:	bf 93       	push	r27
     398:	ef 93       	push	r30
     39a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     39c:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     3a0:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     3a4:	e0 91 10 20 	lds	r30, 0x2010	; 0x802010 <adca_callback>
     3a8:	f0 91 11 20 	lds	r31, 0x2011	; 0x802011 <adca_callback+0x1>
     3ac:	68 e0       	ldi	r22, 0x08	; 8
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	92 e0       	ldi	r25, 0x02	; 2
     3b2:	09 95       	icall
}
     3b4:	ff 91       	pop	r31
     3b6:	ef 91       	pop	r30
     3b8:	bf 91       	pop	r27
     3ba:	af 91       	pop	r26
     3bc:	9f 91       	pop	r25
     3be:	8f 91       	pop	r24
     3c0:	7f 91       	pop	r23
     3c2:	6f 91       	pop	r22
     3c4:	5f 91       	pop	r21
     3c6:	4f 91       	pop	r20
     3c8:	3f 91       	pop	r19
     3ca:	2f 91       	pop	r18
     3cc:	0f 90       	pop	r0
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	0f 90       	pop	r0
     3d2:	1f 90       	pop	r1
     3d4:	18 95       	reti

000003d6 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     3d6:	fc 01       	movw	r30, r24
     3d8:	91 81       	ldd	r25, Z+1	; 0x01
     3da:	95 ff       	sbrs	r25, 5
     3dc:	fd cf       	rjmp	.-6      	; 0x3d8 <usart_putchar+0x2>
     3de:	60 83       	st	Z, r22
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	08 95       	ret

000003e6 <usart_getchar>:
     3e6:	fc 01       	movw	r30, r24
     3e8:	91 81       	ldd	r25, Z+1	; 0x01
     3ea:	99 23       	and	r25, r25
     3ec:	ec f7       	brge	.-6      	; 0x3e8 <usart_getchar+0x2>
     3ee:	80 81       	ld	r24, Z
     3f0:	08 95       	ret

000003f2 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     3f2:	4f 92       	push	r4
     3f4:	5f 92       	push	r5
     3f6:	6f 92       	push	r6
     3f8:	7f 92       	push	r7
     3fa:	8f 92       	push	r8
     3fc:	9f 92       	push	r9
     3fe:	af 92       	push	r10
     400:	bf 92       	push	r11
     402:	ef 92       	push	r14
     404:	ff 92       	push	r15
     406:	0f 93       	push	r16
     408:	1f 93       	push	r17
     40a:	cf 93       	push	r28
     40c:	7c 01       	movw	r14, r24
     40e:	4a 01       	movw	r8, r20
     410:	5b 01       	movw	r10, r22
     412:	28 01       	movw	r4, r16
     414:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     416:	fc 01       	movw	r30, r24
     418:	84 81       	ldd	r24, Z+4	; 0x04
     41a:	82 ff       	sbrs	r24, 2
     41c:	16 c0       	rjmp	.+44     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     41e:	d9 01       	movw	r26, r18
     420:	c8 01       	movw	r24, r16
     422:	68 94       	set
     424:	12 f8       	bld	r1, 2
     426:	b6 95       	lsr	r27
     428:	a7 95       	ror	r26
     42a:	97 95       	ror	r25
     42c:	87 95       	ror	r24
     42e:	16 94       	lsr	r1
     430:	d1 f7       	brne	.-12     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     432:	b9 01       	movw	r22, r18
     434:	a8 01       	movw	r20, r16
     436:	03 2e       	mov	r0, r19
     438:	36 e1       	ldi	r19, 0x16	; 22
     43a:	76 95       	lsr	r23
     43c:	67 95       	ror	r22
     43e:	57 95       	ror	r21
     440:	47 95       	ror	r20
     442:	3a 95       	dec	r19
     444:	d1 f7       	brne	.-12     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     446:	30 2d       	mov	r19, r0
     448:	15 c0       	rjmp	.+42     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     44a:	d9 01       	movw	r26, r18
     44c:	c8 01       	movw	r24, r16
     44e:	68 94       	set
     450:	13 f8       	bld	r1, 3
     452:	b6 95       	lsr	r27
     454:	a7 95       	ror	r26
     456:	97 95       	ror	r25
     458:	87 95       	ror	r24
     45a:	16 94       	lsr	r1
     45c:	d1 f7       	brne	.-12     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
		min_rate /= 2;
     45e:	b9 01       	movw	r22, r18
     460:	a8 01       	movw	r20, r16
     462:	03 2e       	mov	r0, r19
     464:	37 e1       	ldi	r19, 0x17	; 23
     466:	76 95       	lsr	r23
     468:	67 95       	ror	r22
     46a:	57 95       	ror	r21
     46c:	47 95       	ror	r20
     46e:	3a 95       	dec	r19
     470:	d1 f7       	brne	.-12     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     472:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     474:	88 15       	cp	r24, r8
     476:	99 05       	cpc	r25, r9
     478:	aa 05       	cpc	r26, r10
     47a:	bb 05       	cpc	r27, r11
     47c:	08 f4       	brcc	.+2      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     47e:	a2 c0       	rjmp	.+324    	; 0x5c4 <__LOCK_REGION_LENGTH__+0x1c4>
     480:	84 16       	cp	r8, r20
     482:	95 06       	cpc	r9, r21
     484:	a6 06       	cpc	r10, r22
     486:	b7 06       	cpc	r11, r23
     488:	08 f4       	brcc	.+2      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     48a:	9e c0       	rjmp	.+316    	; 0x5c8 <__LOCK_REGION_LENGTH__+0x1c8>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     48c:	f7 01       	movw	r30, r14
     48e:	84 81       	ldd	r24, Z+4	; 0x04
     490:	82 fd       	sbrc	r24, 2
     492:	04 c0       	rjmp	.+8      	; 0x49c <__LOCK_REGION_LENGTH__+0x9c>
		baud *= 2;
     494:	88 0c       	add	r8, r8
     496:	99 1c       	adc	r9, r9
     498:	aa 1c       	adc	r10, r10
     49a:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     49c:	c3 01       	movw	r24, r6
     49e:	b2 01       	movw	r22, r4
     4a0:	a5 01       	movw	r20, r10
     4a2:	94 01       	movw	r18, r8
     4a4:	32 d4       	rcall	.+2148   	; 0xd0a <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     4a6:	2f 3f       	cpi	r18, 0xFF	; 255
     4a8:	31 05       	cpc	r19, r1
     4aa:	41 05       	cpc	r20, r1
     4ac:	51 05       	cpc	r21, r1
     4ae:	08 f4       	brcc	.+2      	; 0x4b2 <__LOCK_REGION_LENGTH__+0xb2>
     4b0:	8d c0       	rjmp	.+282    	; 0x5cc <__LOCK_REGION_LENGTH__+0x1cc>
     4b2:	8f ef       	ldi	r24, 0xFF	; 255
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	a0 e0       	ldi	r26, 0x00	; 0
     4b8:	b0 e0       	ldi	r27, 0x00	; 0
     4ba:	c9 ef       	ldi	r28, 0xF9	; 249
     4bc:	05 c0       	rjmp	.+10     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4be:	28 17       	cp	r18, r24
     4c0:	39 07       	cpc	r19, r25
     4c2:	4a 07       	cpc	r20, r26
     4c4:	5b 07       	cpc	r21, r27
     4c6:	58 f0       	brcs	.+22     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
			break;
		}

		limit <<= 1;
     4c8:	88 0f       	add	r24, r24
     4ca:	99 1f       	adc	r25, r25
     4cc:	aa 1f       	adc	r26, r26
     4ce:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     4d0:	cd 3f       	cpi	r28, 0xFD	; 253
     4d2:	0c f4       	brge	.+2      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
			limit |= 1;
     4d4:	81 60       	ori	r24, 0x01	; 1
     4d6:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     4d8:	c7 30       	cpi	r28, 0x07	; 7
     4da:	89 f7       	brne	.-30     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
     4dc:	4d c0       	rjmp	.+154    	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     4de:	cc 23       	and	r28, r28
     4e0:	0c f0       	brlt	.+2      	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
     4e2:	4a c0       	rjmp	.+148    	; 0x578 <__LOCK_REGION_LENGTH__+0x178>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     4e4:	d5 01       	movw	r26, r10
     4e6:	c4 01       	movw	r24, r8
     4e8:	88 0f       	add	r24, r24
     4ea:	99 1f       	adc	r25, r25
     4ec:	aa 1f       	adc	r26, r26
     4ee:	bb 1f       	adc	r27, r27
     4f0:	88 0f       	add	r24, r24
     4f2:	99 1f       	adc	r25, r25
     4f4:	aa 1f       	adc	r26, r26
     4f6:	bb 1f       	adc	r27, r27
     4f8:	88 0f       	add	r24, r24
     4fa:	99 1f       	adc	r25, r25
     4fc:	aa 1f       	adc	r26, r26
     4fe:	bb 1f       	adc	r27, r27
     500:	48 1a       	sub	r4, r24
     502:	59 0a       	sbc	r5, r25
     504:	6a 0a       	sbc	r6, r26
     506:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     508:	ce 3f       	cpi	r28, 0xFE	; 254
     50a:	ec f4       	brge	.+58     	; 0x546 <__LOCK_REGION_LENGTH__+0x146>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     50c:	8d ef       	ldi	r24, 0xFD	; 253
     50e:	9f ef       	ldi	r25, 0xFF	; 255
     510:	8c 1b       	sub	r24, r28
     512:	91 09       	sbc	r25, r1
     514:	c7 fd       	sbrc	r28, 7
     516:	93 95       	inc	r25
     518:	04 c0       	rjmp	.+8      	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
     51a:	44 0c       	add	r4, r4
     51c:	55 1c       	adc	r5, r5
     51e:	66 1c       	adc	r6, r6
     520:	77 1c       	adc	r7, r7
     522:	8a 95       	dec	r24
     524:	d2 f7       	brpl	.-12     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
     526:	d5 01       	movw	r26, r10
     528:	c4 01       	movw	r24, r8
     52a:	b6 95       	lsr	r27
     52c:	a7 95       	ror	r26
     52e:	97 95       	ror	r25
     530:	87 95       	ror	r24
     532:	bc 01       	movw	r22, r24
     534:	cd 01       	movw	r24, r26
     536:	64 0d       	add	r22, r4
     538:	75 1d       	adc	r23, r5
     53a:	86 1d       	adc	r24, r6
     53c:	97 1d       	adc	r25, r7
     53e:	a5 01       	movw	r20, r10
     540:	94 01       	movw	r18, r8
     542:	e3 d3       	rcall	.+1990   	; 0xd0a <__udivmodsi4>
     544:	35 c0       	rjmp	.+106    	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
		} else {
			baud <<= exp + 3;
     546:	83 e0       	ldi	r24, 0x03	; 3
     548:	8c 0f       	add	r24, r28
     54a:	a5 01       	movw	r20, r10
     54c:	94 01       	movw	r18, r8
     54e:	04 c0       	rjmp	.+8      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
     550:	22 0f       	add	r18, r18
     552:	33 1f       	adc	r19, r19
     554:	44 1f       	adc	r20, r20
     556:	55 1f       	adc	r21, r21
     558:	8a 95       	dec	r24
     55a:	d2 f7       	brpl	.-12     	; 0x550 <__LOCK_REGION_LENGTH__+0x150>
			div = (cpu_hz + baud / 2) / baud;
     55c:	da 01       	movw	r26, r20
     55e:	c9 01       	movw	r24, r18
     560:	b6 95       	lsr	r27
     562:	a7 95       	ror	r26
     564:	97 95       	ror	r25
     566:	87 95       	ror	r24
     568:	bc 01       	movw	r22, r24
     56a:	cd 01       	movw	r24, r26
     56c:	64 0d       	add	r22, r4
     56e:	75 1d       	adc	r23, r5
     570:	86 1d       	adc	r24, r6
     572:	97 1d       	adc	r25, r7
     574:	ca d3       	rcall	.+1940   	; 0xd0a <__udivmodsi4>
     576:	1c c0       	rjmp	.+56     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     578:	83 e0       	ldi	r24, 0x03	; 3
     57a:	8c 0f       	add	r24, r28
     57c:	a5 01       	movw	r20, r10
     57e:	94 01       	movw	r18, r8
     580:	04 c0       	rjmp	.+8      	; 0x58a <__LOCK_REGION_LENGTH__+0x18a>
     582:	22 0f       	add	r18, r18
     584:	33 1f       	adc	r19, r19
     586:	44 1f       	adc	r20, r20
     588:	55 1f       	adc	r21, r21
     58a:	8a 95       	dec	r24
     58c:	d2 f7       	brpl	.-12     	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
		div = (cpu_hz + baud / 2) / baud - 1;
     58e:	da 01       	movw	r26, r20
     590:	c9 01       	movw	r24, r18
     592:	b6 95       	lsr	r27
     594:	a7 95       	ror	r26
     596:	97 95       	ror	r25
     598:	87 95       	ror	r24
     59a:	bc 01       	movw	r22, r24
     59c:	cd 01       	movw	r24, r26
     59e:	64 0d       	add	r22, r4
     5a0:	75 1d       	adc	r23, r5
     5a2:	86 1d       	adc	r24, r6
     5a4:	97 1d       	adc	r25, r7
     5a6:	b1 d3       	rcall	.+1890   	; 0xd0a <__udivmodsi4>
     5a8:	21 50       	subi	r18, 0x01	; 1
     5aa:	31 09       	sbc	r19, r1
     5ac:	41 09       	sbc	r20, r1
     5ae:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     5b0:	83 2f       	mov	r24, r19
     5b2:	8f 70       	andi	r24, 0x0F	; 15
     5b4:	c2 95       	swap	r28
     5b6:	c0 7f       	andi	r28, 0xF0	; 240
     5b8:	c8 2b       	or	r28, r24
     5ba:	f7 01       	movw	r30, r14
     5bc:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     5be:	26 83       	std	Z+6, r18	; 0x06

	return true;
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	18 c0       	rjmp	.+48     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     5c4:	80 e0       	ldi	r24, 0x00	; 0
     5c6:	16 c0       	rjmp	.+44     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	14 c0       	rjmp	.+40     	; 0x5f4 <__LOCK_REGION_LENGTH__+0x1f4>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     5cc:	d5 01       	movw	r26, r10
     5ce:	c4 01       	movw	r24, r8
     5d0:	88 0f       	add	r24, r24
     5d2:	99 1f       	adc	r25, r25
     5d4:	aa 1f       	adc	r26, r26
     5d6:	bb 1f       	adc	r27, r27
     5d8:	88 0f       	add	r24, r24
     5da:	99 1f       	adc	r25, r25
     5dc:	aa 1f       	adc	r26, r26
     5de:	bb 1f       	adc	r27, r27
     5e0:	88 0f       	add	r24, r24
     5e2:	99 1f       	adc	r25, r25
     5e4:	aa 1f       	adc	r26, r26
     5e6:	bb 1f       	adc	r27, r27
     5e8:	48 1a       	sub	r4, r24
     5ea:	59 0a       	sbc	r5, r25
     5ec:	6a 0a       	sbc	r6, r26
     5ee:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     5f0:	c9 ef       	ldi	r28, 0xF9	; 249
     5f2:	8c cf       	rjmp	.-232    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     5f4:	cf 91       	pop	r28
     5f6:	1f 91       	pop	r17
     5f8:	0f 91       	pop	r16
     5fa:	ff 90       	pop	r15
     5fc:	ef 90       	pop	r14
     5fe:	bf 90       	pop	r11
     600:	af 90       	pop	r10
     602:	9f 90       	pop	r9
     604:	8f 90       	pop	r8
     606:	7f 90       	pop	r7
     608:	6f 90       	pop	r6
     60a:	5f 90       	pop	r5
     60c:	4f 90       	pop	r4
     60e:	08 95       	ret

00000610 <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	ec 01       	movw	r28, r24
     61a:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     61c:	00 97       	sbiw	r24, 0x00	; 0
     61e:	09 f4       	brne	.+2      	; 0x622 <usart_init_rs232+0x12>
     620:	be c0       	rjmp	.+380    	; 0x79e <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     622:	80 3c       	cpi	r24, 0xC0	; 192
     624:	91 05       	cpc	r25, r1
     626:	21 f4       	brne	.+8      	; 0x630 <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     628:	60 e1       	ldi	r22, 0x10	; 16
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	f7 d2       	rcall	.+1518   	; 0xc1c <sysclk_enable_module>
     62e:	b7 c0       	rjmp	.+366    	; 0x79e <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     630:	c1 15       	cp	r28, r1
     632:	84 e0       	ldi	r24, 0x04	; 4
     634:	d8 07       	cpc	r29, r24
     636:	21 f4       	brne	.+8      	; 0x640 <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     638:	64 e0       	ldi	r22, 0x04	; 4
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	ef d2       	rcall	.+1502   	; 0xc1c <sysclk_enable_module>
     63e:	af c0       	rjmp	.+350    	; 0x79e <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     640:	c0 38       	cpi	r28, 0x80	; 128
     642:	e1 e0       	ldi	r30, 0x01	; 1
     644:	de 07       	cpc	r29, r30
     646:	21 f4       	brne	.+8      	; 0x650 <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     648:	62 e0       	ldi	r22, 0x02	; 2
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	e7 d2       	rcall	.+1486   	; 0xc1c <sysclk_enable_module>
     64e:	a7 c0       	rjmp	.+334    	; 0x79e <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     650:	c1 15       	cp	r28, r1
     652:	f1 e0       	ldi	r31, 0x01	; 1
     654:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     656:	21 f4       	brne	.+8      	; 0x660 <usart_init_rs232+0x50>
     658:	61 e0       	ldi	r22, 0x01	; 1
     65a:	80 e0       	ldi	r24, 0x00	; 0
     65c:	df d2       	rcall	.+1470   	; 0xc1c <sysclk_enable_module>
     65e:	9f c0       	rjmp	.+318    	; 0x79e <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     660:	c0 38       	cpi	r28, 0x80	; 128
     662:	83 e0       	ldi	r24, 0x03	; 3
     664:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     666:	21 f4       	brne	.+8      	; 0x670 <usart_init_rs232+0x60>
     668:	61 e0       	ldi	r22, 0x01	; 1
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	d7 d2       	rcall	.+1454   	; 0xc1c <sysclk_enable_module>
     66e:	97 c0       	rjmp	.+302    	; 0x79e <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     670:	c1 15       	cp	r28, r1
     672:	e2 e0       	ldi	r30, 0x02	; 2
     674:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     676:	21 f4       	brne	.+8      	; 0x680 <usart_init_rs232+0x70>
     678:	62 e0       	ldi	r22, 0x02	; 2
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	cf d2       	rcall	.+1438   	; 0xc1c <sysclk_enable_module>
     67e:	8f c0       	rjmp	.+286    	; 0x79e <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     680:	c0 32       	cpi	r28, 0x20	; 32
     682:	f3 e0       	ldi	r31, 0x03	; 3
     684:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     686:	21 f4       	brne	.+8      	; 0x690 <usart_init_rs232+0x80>
     688:	64 e0       	ldi	r22, 0x04	; 4
     68a:	82 e0       	ldi	r24, 0x02	; 2
     68c:	c7 d2       	rcall	.+1422   	; 0xc1c <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     68e:	87 c0       	rjmp	.+270    	; 0x79e <usart_init_rs232+0x18e>
     690:	c1 15       	cp	r28, r1
     692:	88 e0       	ldi	r24, 0x08	; 8
     694:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     696:	21 f4       	brne	.+8      	; 0x6a0 <usart_init_rs232+0x90>
     698:	61 e0       	ldi	r22, 0x01	; 1
     69a:	83 e0       	ldi	r24, 0x03	; 3
     69c:	bf d2       	rcall	.+1406   	; 0xc1c <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     69e:	7f c0       	rjmp	.+254    	; 0x79e <usart_init_rs232+0x18e>
     6a0:	c1 15       	cp	r28, r1
     6a2:	e9 e0       	ldi	r30, 0x09	; 9
     6a4:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     6a6:	21 f4       	brne	.+8      	; 0x6b0 <usart_init_rs232+0xa0>
     6a8:	61 e0       	ldi	r22, 0x01	; 1
     6aa:	84 e0       	ldi	r24, 0x04	; 4
     6ac:	b7 d2       	rcall	.+1390   	; 0xc1c <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     6ae:	77 c0       	rjmp	.+238    	; 0x79e <usart_init_rs232+0x18e>
     6b0:	c1 15       	cp	r28, r1
     6b2:	fa e0       	ldi	r31, 0x0A	; 10
     6b4:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     6b6:	21 f4       	brne	.+8      	; 0x6c0 <usart_init_rs232+0xb0>
     6b8:	61 e0       	ldi	r22, 0x01	; 1
     6ba:	85 e0       	ldi	r24, 0x05	; 5
     6bc:	af d2       	rcall	.+1374   	; 0xc1c <sysclk_enable_module>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     6be:	6f c0       	rjmp	.+222    	; 0x79e <usart_init_rs232+0x18e>
     6c0:	c0 34       	cpi	r28, 0x40	; 64
     6c2:	88 e0       	ldi	r24, 0x08	; 8
     6c4:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     6c6:	21 f4       	brne	.+8      	; 0x6d0 <usart_init_rs232+0xc0>
     6c8:	62 e0       	ldi	r22, 0x02	; 2
     6ca:	83 e0       	ldi	r24, 0x03	; 3
     6cc:	a7 d2       	rcall	.+1358   	; 0xc1c <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     6ce:	67 c0       	rjmp	.+206    	; 0x79e <usart_init_rs232+0x18e>
     6d0:	c0 34       	cpi	r28, 0x40	; 64
     6d2:	e9 e0       	ldi	r30, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     6d4:	de 07       	cpc	r29, r30
     6d6:	21 f4       	brne	.+8      	; 0x6e0 <usart_init_rs232+0xd0>
     6d8:	62 e0       	ldi	r22, 0x02	; 2
     6da:	84 e0       	ldi	r24, 0x04	; 4
     6dc:	9f d2       	rcall	.+1342   	; 0xc1c <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     6de:	5f c0       	rjmp	.+190    	; 0x79e <usart_init_rs232+0x18e>
     6e0:	c0 39       	cpi	r28, 0x90	; 144
     6e2:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     6e4:	df 07       	cpc	r29, r31
     6e6:	21 f4       	brne	.+8      	; 0x6f0 <usart_init_rs232+0xe0>
     6e8:	64 e0       	ldi	r22, 0x04	; 4
     6ea:	83 e0       	ldi	r24, 0x03	; 3
     6ec:	97 d2       	rcall	.+1326   	; 0xc1c <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     6ee:	57 c0       	rjmp	.+174    	; 0x79e <usart_init_rs232+0x18e>
     6f0:	c0 39       	cpi	r28, 0x90	; 144
     6f2:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     6f4:	d8 07       	cpc	r29, r24
     6f6:	21 f4       	brne	.+8      	; 0x700 <usart_init_rs232+0xf0>
     6f8:	64 e0       	ldi	r22, 0x04	; 4
     6fa:	84 e0       	ldi	r24, 0x04	; 4
     6fc:	8f d2       	rcall	.+1310   	; 0xc1c <sysclk_enable_module>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     6fe:	4f c0       	rjmp	.+158    	; 0x79e <usart_init_rs232+0x18e>
     700:	c0 39       	cpi	r28, 0x90	; 144
     702:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     704:	de 07       	cpc	r29, r30
     706:	21 f4       	brne	.+8      	; 0x710 <usart_init_rs232+0x100>
     708:	64 e0       	ldi	r22, 0x04	; 4
     70a:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     70c:	87 d2       	rcall	.+1294   	; 0xc1c <sysclk_enable_module>
     70e:	47 c0       	rjmp	.+142    	; 0x79e <usart_init_rs232+0x18e>
     710:	c0 3c       	cpi	r28, 0xC0	; 192
     712:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     714:	df 07       	cpc	r29, r31
     716:	21 f4       	brne	.+8      	; 0x720 <usart_init_rs232+0x110>
     718:	68 e0       	ldi	r22, 0x08	; 8
     71a:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     71c:	7f d2       	rcall	.+1278   	; 0xc1c <sysclk_enable_module>
     71e:	3f c0       	rjmp	.+126    	; 0x79e <usart_init_rs232+0x18e>
     720:	c0 3c       	cpi	r28, 0xC0	; 192
     722:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     724:	d8 07       	cpc	r29, r24
     726:	21 f4       	brne	.+8      	; 0x730 <usart_init_rs232+0x120>
     728:	68 e0       	ldi	r22, 0x08	; 8
     72a:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     72c:	77 d2       	rcall	.+1262   	; 0xc1c <sysclk_enable_module>
     72e:	37 c0       	rjmp	.+110    	; 0x79e <usart_init_rs232+0x18e>
     730:	c0 3a       	cpi	r28, 0xA0	; 160
     732:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     734:	de 07       	cpc	r29, r30
     736:	21 f4       	brne	.+8      	; 0x740 <usart_init_rs232+0x130>
     738:	60 e1       	ldi	r22, 0x10	; 16
     73a:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     73c:	6f d2       	rcall	.+1246   	; 0xc1c <sysclk_enable_module>
     73e:	2f c0       	rjmp	.+94     	; 0x79e <usart_init_rs232+0x18e>
     740:	c0 3a       	cpi	r28, 0xA0	; 160
     742:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     744:	df 07       	cpc	r29, r31
     746:	21 f4       	brne	.+8      	; 0x750 <usart_init_rs232+0x140>
     748:	60 e1       	ldi	r22, 0x10	; 16
     74a:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     74c:	67 d2       	rcall	.+1230   	; 0xc1c <sysclk_enable_module>
     74e:	27 c0       	rjmp	.+78     	; 0x79e <usart_init_rs232+0x18e>
     750:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     752:	8a e0       	ldi	r24, 0x0A	; 10
     754:	d8 07       	cpc	r29, r24
     756:	21 f4       	brne	.+8      	; 0x760 <usart_init_rs232+0x150>
     758:	60 e1       	ldi	r22, 0x10	; 16
     75a:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     75c:	5f d2       	rcall	.+1214   	; 0xc1c <sysclk_enable_module>
     75e:	1f c0       	rjmp	.+62     	; 0x79e <usart_init_rs232+0x18e>
     760:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     762:	e8 e0       	ldi	r30, 0x08	; 8
     764:	de 07       	cpc	r29, r30
     766:	21 f4       	brne	.+8      	; 0x770 <usart_init_rs232+0x160>
     768:	60 e2       	ldi	r22, 0x20	; 32
     76a:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     76c:	57 d2       	rcall	.+1198   	; 0xc1c <sysclk_enable_module>
     76e:	17 c0       	rjmp	.+46     	; 0x79e <usart_init_rs232+0x18e>
     770:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     772:	f9 e0       	ldi	r31, 0x09	; 9
     774:	df 07       	cpc	r29, r31
     776:	21 f4       	brne	.+8      	; 0x780 <usart_init_rs232+0x170>
     778:	60 e2       	ldi	r22, 0x20	; 32
     77a:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     77c:	4f d2       	rcall	.+1182   	; 0xc1c <sysclk_enable_module>
     77e:	0f c0       	rjmp	.+30     	; 0x79e <usart_init_rs232+0x18e>
     780:	c0 38       	cpi	r28, 0x80	; 128
     782:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     784:	d8 07       	cpc	r29, r24
     786:	21 f4       	brne	.+8      	; 0x790 <usart_init_rs232+0x180>
     788:	60 e4       	ldi	r22, 0x40	; 64
     78a:	83 e0       	ldi	r24, 0x03	; 3
     78c:	47 d2       	rcall	.+1166   	; 0xc1c <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     78e:	07 c0       	rjmp	.+14     	; 0x79e <usart_init_rs232+0x18e>
     790:	c0 3a       	cpi	r28, 0xA0	; 160
     792:	e4 e0       	ldi	r30, 0x04	; 4
     794:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     796:	19 f4       	brne	.+6      	; 0x79e <usart_init_rs232+0x18e>
     798:	60 e4       	ldi	r22, 0x40	; 64
     79a:	85 e0       	ldi	r24, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     79c:	3f d2       	rcall	.+1150   	; 0xc1c <sysclk_enable_module>
     79e:	8d 81       	ldd	r24, Y+5	; 0x05
     7a0:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     7a2:	8d 83       	std	Y+5, r24	; 0x05
     7a4:	f8 01       	movw	r30, r16
     7a6:	95 81       	ldd	r25, Z+5	; 0x05
     7a8:	84 81       	ldd	r24, Z+4	; 0x04
     7aa:	89 2b       	or	r24, r25
     7ac:	96 81       	ldd	r25, Z+6	; 0x06
     7ae:	91 11       	cpse	r25, r1
     7b0:	98 e0       	ldi	r25, 0x08	; 8
     7b2:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     7b4:	8d 83       	std	Y+5, r24	; 0x05
     7b6:	f8 01       	movw	r30, r16
     7b8:	40 81       	ld	r20, Z
     7ba:	51 81       	ldd	r21, Z+1	; 0x01
     7bc:	62 81       	ldd	r22, Z+2	; 0x02
     7be:	73 81       	ldd	r23, Z+3	; 0x03
     7c0:	00 e0       	ldi	r16, 0x00	; 0
     7c2:	18 e4       	ldi	r17, 0x48	; 72
     7c4:	28 ee       	ldi	r18, 0xE8	; 232
     7c6:	31 e0       	ldi	r19, 0x01	; 1
     7c8:	ce 01       	movw	r24, r28
     7ca:	13 de       	rcall	.-986    	; 0x3f2 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     7cc:	9c 81       	ldd	r25, Y+4	; 0x04
     7ce:	98 60       	ori	r25, 0x08	; 8
     7d0:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     7d2:	9c 81       	ldd	r25, Y+4	; 0x04
     7d4:	90 61       	ori	r25, 0x10	; 16
     7d6:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	1f 91       	pop	r17
     7de:	0f 91       	pop	r16
     7e0:	08 95       	ret

000007e2 <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     7e8:	fe dd       	rcall	.-1028   	; 0x3e6 <usart_getchar>
     7ea:	88 83       	st	Y, r24
}
     7ec:	df 91       	pop	r29
     7ee:	cf 91       	pop	r28
     7f0:	08 95       	ret

000007f2 <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     7f2:	f1 cd       	rjmp	.-1054   	; 0x3d6 <usart_putchar>
}
     7f4:	08 95       	ret

000007f6 <UART_computer_init>:

void UART_computer_init(USART_t* comms_usart, PORT_t* comms_port, ioport_pin_t tx_pin, ioport_pin_t rx_pin)
/* This sets up the UART pins that are used by the XBee (if plugged into a one month board), and by the computer during debugging
Call during startup.
Based on Adam's code template for one month, but with RX pin configuration. */
{
     7f6:	cf 92       	push	r12
     7f8:	df 92       	push	r13
     7fa:	ff 92       	push	r15
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	cd b7       	in	r28, 0x3d	; 61
     806:	de b7       	in	r29, 0x3e	; 62
     808:	27 97       	sbiw	r28, 0x07	; 7
     80a:	cd bf       	out	0x3d, r28	; 61
     80c:	de bf       	out	0x3e, r29	; 62
     80e:	8c 01       	movw	r16, r24
     810:	f2 2e       	mov	r15, r18
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     812:	84 2f       	mov	r24, r20
     814:	87 70       	andi	r24, 0x07	; 7
     816:	cc 24       	eor	r12, r12
     818:	c3 94       	inc	r12
     81a:	d1 2c       	mov	r13, r1
     81c:	b6 01       	movw	r22, r12
     81e:	02 c0       	rjmp	.+4      	; 0x824 <UART_computer_init+0x2e>
     820:	66 0f       	add	r22, r22
     822:	77 1f       	adc	r23, r23
     824:	8a 95       	dec	r24
     826:	e2 f7       	brpl	.-8      	; 0x820 <UART_computer_init+0x2a>
     828:	46 95       	lsr	r20
     82a:	46 95       	lsr	r20
     82c:	46 95       	lsr	r20
     82e:	20 e2       	ldi	r18, 0x20	; 32
     830:	42 9f       	mul	r20, r18
     832:	c0 01       	movw	r24, r0
     834:	11 24       	eor	r1, r1
     836:	41 e0       	ldi	r20, 0x01	; 1
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	9a 5f       	subi	r25, 0xFA	; 250
     83c:	94 d1       	rcall	.+808    	; 0xb66 <ioport_configure_port_pin>
     83e:	8f 2d       	mov	r24, r15
     840:	87 70       	andi	r24, 0x07	; 7
     842:	b6 01       	movw	r22, r12
     844:	02 c0       	rjmp	.+4      	; 0x84a <UART_computer_init+0x54>
     846:	66 0f       	add	r22, r22
     848:	77 1f       	adc	r23, r23
     84a:	8a 95       	dec	r24
     84c:	e2 f7       	brpl	.-8      	; 0x846 <UART_computer_init+0x50>
     84e:	f6 94       	lsr	r15
     850:	f6 94       	lsr	r15
     852:	f6 94       	lsr	r15
     854:	20 e2       	ldi	r18, 0x20	; 32
     856:	f2 9e       	mul	r15, r18
     858:	c0 01       	movw	r24, r0
     85a:	11 24       	eor	r1, r1
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	9a 5f       	subi	r25, 0xFA	; 250
     862:	81 d1       	rcall	.+770    	; 0xb66 <ioport_configure_port_pin>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     864:	01 15       	cp	r16, r1
     866:	11 05       	cpc	r17, r1
     868:	09 f4       	brne	.+2      	; 0x86c <UART_computer_init+0x76>
     86a:	3e c1       	rjmp	.+636    	; 0xae8 <UART_computer_init+0x2f2>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     86c:	00 3c       	cpi	r16, 0xC0	; 192
     86e:	11 05       	cpc	r17, r1
     870:	21 f4       	brne	.+8      	; 0x87a <UART_computer_init+0x84>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     872:	60 e1       	ldi	r22, 0x10	; 16
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	d2 d1       	rcall	.+932    	; 0xc1c <sysclk_enable_module>
     878:	37 c1       	rjmp	.+622    	; 0xae8 <UART_computer_init+0x2f2>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     87a:	01 15       	cp	r16, r1
     87c:	84 e0       	ldi	r24, 0x04	; 4
     87e:	18 07       	cpc	r17, r24
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     880:	21 f4       	brne	.+8      	; 0x88a <UART_computer_init+0x94>
     882:	64 e0       	ldi	r22, 0x04	; 4
     884:	80 e0       	ldi	r24, 0x00	; 0
     886:	ca d1       	rcall	.+916    	; 0xc1c <sysclk_enable_module>
     888:	2f c1       	rjmp	.+606    	; 0xae8 <UART_computer_init+0x2f2>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     88a:	00 38       	cpi	r16, 0x80	; 128
     88c:	21 e0       	ldi	r18, 0x01	; 1
     88e:	12 07       	cpc	r17, r18
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     890:	21 f4       	brne	.+8      	; 0x89a <UART_computer_init+0xa4>
     892:	62 e0       	ldi	r22, 0x02	; 2
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	c2 d1       	rcall	.+900    	; 0xc1c <sysclk_enable_module>
     898:	27 c1       	rjmp	.+590    	; 0xae8 <UART_computer_init+0x2f2>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     89a:	01 15       	cp	r16, r1
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	18 07       	cpc	r17, r24
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     8a0:	21 f4       	brne	.+8      	; 0x8aa <UART_computer_init+0xb4>
     8a2:	61 e0       	ldi	r22, 0x01	; 1
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	ba d1       	rcall	.+884    	; 0xc1c <sysclk_enable_module>
     8a8:	1f c1       	rjmp	.+574    	; 0xae8 <UART_computer_init+0x2f2>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     8aa:	00 38       	cpi	r16, 0x80	; 128
     8ac:	23 e0       	ldi	r18, 0x03	; 3
     8ae:	12 07       	cpc	r17, r18
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     8b0:	21 f4       	brne	.+8      	; 0x8ba <UART_computer_init+0xc4>
     8b2:	61 e0       	ldi	r22, 0x01	; 1
     8b4:	81 e0       	ldi	r24, 0x01	; 1
     8b6:	b2 d1       	rcall	.+868    	; 0xc1c <sysclk_enable_module>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     8b8:	17 c1       	rjmp	.+558    	; 0xae8 <UART_computer_init+0x2f2>
     8ba:	01 15       	cp	r16, r1
     8bc:	82 e0       	ldi	r24, 0x02	; 2
     8be:	18 07       	cpc	r17, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     8c0:	21 f4       	brne	.+8      	; 0x8ca <UART_computer_init+0xd4>
     8c2:	62 e0       	ldi	r22, 0x02	; 2
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	aa d1       	rcall	.+852    	; 0xc1c <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     8c8:	0f c1       	rjmp	.+542    	; 0xae8 <UART_computer_init+0x2f2>
     8ca:	00 32       	cpi	r16, 0x20	; 32
     8cc:	23 e0       	ldi	r18, 0x03	; 3
     8ce:	12 07       	cpc	r17, r18
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     8d0:	21 f4       	brne	.+8      	; 0x8da <UART_computer_init+0xe4>
     8d2:	64 e0       	ldi	r22, 0x04	; 4
     8d4:	82 e0       	ldi	r24, 0x02	; 2
     8d6:	a2 d1       	rcall	.+836    	; 0xc1c <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     8d8:	07 c1       	rjmp	.+526    	; 0xae8 <UART_computer_init+0x2f2>
     8da:	01 15       	cp	r16, r1
     8dc:	88 e0       	ldi	r24, 0x08	; 8
     8de:	18 07       	cpc	r17, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     8e0:	21 f4       	brne	.+8      	; 0x8ea <UART_computer_init+0xf4>
     8e2:	61 e0       	ldi	r22, 0x01	; 1
     8e4:	83 e0       	ldi	r24, 0x03	; 3
     8e6:	9a d1       	rcall	.+820    	; 0xc1c <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     8e8:	ff c0       	rjmp	.+510    	; 0xae8 <UART_computer_init+0x2f2>
     8ea:	01 15       	cp	r16, r1
     8ec:	29 e0       	ldi	r18, 0x09	; 9
     8ee:	12 07       	cpc	r17, r18
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     8f0:	21 f4       	brne	.+8      	; 0x8fa <UART_computer_init+0x104>
     8f2:	61 e0       	ldi	r22, 0x01	; 1
     8f4:	84 e0       	ldi	r24, 0x04	; 4
     8f6:	92 d1       	rcall	.+804    	; 0xc1c <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     8f8:	f7 c0       	rjmp	.+494    	; 0xae8 <UART_computer_init+0x2f2>
     8fa:	01 15       	cp	r16, r1
     8fc:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     8fe:	18 07       	cpc	r17, r24
     900:	21 f4       	brne	.+8      	; 0x90a <UART_computer_init+0x114>
     902:	61 e0       	ldi	r22, 0x01	; 1
     904:	85 e0       	ldi	r24, 0x05	; 5
     906:	8a d1       	rcall	.+788    	; 0xc1c <sysclk_enable_module>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     908:	ef c0       	rjmp	.+478    	; 0xae8 <UART_computer_init+0x2f2>
     90a:	00 34       	cpi	r16, 0x40	; 64
     90c:	28 e0       	ldi	r18, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     90e:	12 07       	cpc	r17, r18
     910:	21 f4       	brne	.+8      	; 0x91a <UART_computer_init+0x124>
     912:	62 e0       	ldi	r22, 0x02	; 2
     914:	83 e0       	ldi	r24, 0x03	; 3
     916:	82 d1       	rcall	.+772    	; 0xc1c <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     918:	e7 c0       	rjmp	.+462    	; 0xae8 <UART_computer_init+0x2f2>
     91a:	00 34       	cpi	r16, 0x40	; 64
     91c:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     91e:	18 07       	cpc	r17, r24
     920:	21 f4       	brne	.+8      	; 0x92a <UART_computer_init+0x134>
     922:	62 e0       	ldi	r22, 0x02	; 2
     924:	84 e0       	ldi	r24, 0x04	; 4
     926:	7a d1       	rcall	.+756    	; 0xc1c <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     928:	df c0       	rjmp	.+446    	; 0xae8 <UART_computer_init+0x2f2>
     92a:	00 39       	cpi	r16, 0x90	; 144
     92c:	28 e0       	ldi	r18, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     92e:	12 07       	cpc	r17, r18
     930:	21 f4       	brne	.+8      	; 0x93a <UART_computer_init+0x144>
     932:	64 e0       	ldi	r22, 0x04	; 4
     934:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     936:	72 d1       	rcall	.+740    	; 0xc1c <sysclk_enable_module>
     938:	d7 c0       	rjmp	.+430    	; 0xae8 <UART_computer_init+0x2f2>
     93a:	00 39       	cpi	r16, 0x90	; 144
     93c:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     93e:	18 07       	cpc	r17, r24
     940:	21 f4       	brne	.+8      	; 0x94a <UART_computer_init+0x154>
     942:	64 e0       	ldi	r22, 0x04	; 4
     944:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     946:	6a d1       	rcall	.+724    	; 0xc1c <sysclk_enable_module>
     948:	cf c0       	rjmp	.+414    	; 0xae8 <UART_computer_init+0x2f2>
     94a:	00 39       	cpi	r16, 0x90	; 144
     94c:	2a e0       	ldi	r18, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     94e:	12 07       	cpc	r17, r18
     950:	21 f4       	brne	.+8      	; 0x95a <UART_computer_init+0x164>
     952:	64 e0       	ldi	r22, 0x04	; 4
     954:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     956:	62 d1       	rcall	.+708    	; 0xc1c <sysclk_enable_module>
     958:	c7 c0       	rjmp	.+398    	; 0xae8 <UART_computer_init+0x2f2>
     95a:	00 3c       	cpi	r16, 0xC0	; 192
     95c:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     95e:	18 07       	cpc	r17, r24
     960:	21 f4       	brne	.+8      	; 0x96a <UART_computer_init+0x174>
     962:	68 e0       	ldi	r22, 0x08	; 8
     964:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     966:	5a d1       	rcall	.+692    	; 0xc1c <sysclk_enable_module>
     968:	bf c0       	rjmp	.+382    	; 0xae8 <UART_computer_init+0x2f2>
     96a:	00 3c       	cpi	r16, 0xC0	; 192
     96c:	29 e0       	ldi	r18, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     96e:	12 07       	cpc	r17, r18
     970:	21 f4       	brne	.+8      	; 0x97a <UART_computer_init+0x184>
     972:	68 e0       	ldi	r22, 0x08	; 8
     974:	84 e0       	ldi	r24, 0x04	; 4
     976:	52 d1       	rcall	.+676    	; 0xc1c <sysclk_enable_module>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     978:	b7 c0       	rjmp	.+366    	; 0xae8 <UART_computer_init+0x2f2>
     97a:	00 3a       	cpi	r16, 0xA0	; 160
     97c:	88 e0       	ldi	r24, 0x08	; 8
     97e:	18 07       	cpc	r17, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     980:	31 f5       	brne	.+76     	; 0x9ce <UART_computer_init+0x1d8>
     982:	60 e1       	ldi	r22, 0x10	; 16
     984:	83 e0       	ldi	r24, 0x03	; 3
     986:	4a d1       	rcall	.+660    	; 0xc1c <sysclk_enable_module>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     988:	80 ea       	ldi	r24, 0xA0	; 160
     98a:	98 e0       	ldi	r25, 0x08	; 8
     98c:	80 93 14 20 	sts	0x2014, r24	; 0x802014 <stdio_base>
     990:	90 93 15 20 	sts	0x2015, r25	; 0x802015 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     994:	89 ef       	ldi	r24, 0xF9	; 249
     996:	93 e0       	ldi	r25, 0x03	; 3
     998:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <ptr_put>
     99c:	90 93 13 20 	sts	0x2013, r25	; 0x802013 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     9a0:	81 ef       	ldi	r24, 0xF1	; 241
     9a2:	93 e0       	ldi	r25, 0x03	; 3
     9a4:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <__data_end>
     9a8:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <__data_end+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     9ac:	e6 e0       	ldi	r30, 0x06	; 6
     9ae:	f0 e2       	ldi	r31, 0x20	; 32
     9b0:	84 81       	ldd	r24, Z+4	; 0x04
	usart_rs232_options.paritytype   = options->paritytype;
     9b2:	8d 83       	std	Y+5, r24	; 0x05
     9b4:	85 81       	ldd	r24, Z+5	; 0x05
	usart_rs232_options.stopbits     = options->stopbits;
     9b6:	8e 83       	std	Y+6, r24	; 0x06
     9b8:	86 81       	ldd	r24, Z+6	; 0x06
	usart_rs232_options.baudrate     = options->baudrate;
     9ba:	8f 83       	std	Y+7, r24	; 0x07
     9bc:	80 81       	ld	r24, Z
     9be:	91 81       	ldd	r25, Z+1	; 0x01
     9c0:	a2 81       	ldd	r26, Z+2	; 0x02
     9c2:	b3 81       	ldd	r27, Z+3	; 0x03
     9c4:	89 83       	std	Y+1, r24	; 0x01
     9c6:	9a 83       	std	Y+2, r25	; 0x02
     9c8:	ab 83       	std	Y+3, r26	; 0x03
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     9ca:	bc 83       	std	Y+4, r27	; 0x04
     9cc:	55 c0       	rjmp	.+170    	; 0xa78 <UART_computer_init+0x282>
     9ce:	00 3a       	cpi	r16, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     9d0:	29 e0       	ldi	r18, 0x09	; 9
     9d2:	12 07       	cpc	r17, r18
     9d4:	21 f4       	brne	.+8      	; 0x9de <UART_computer_init+0x1e8>
     9d6:	60 e1       	ldi	r22, 0x10	; 16
     9d8:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     9da:	20 d1       	rcall	.+576    	; 0xc1c <sysclk_enable_module>
     9dc:	85 c0       	rjmp	.+266    	; 0xae8 <UART_computer_init+0x2f2>
     9de:	00 3a       	cpi	r16, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     9e0:	8a e0       	ldi	r24, 0x0A	; 10
     9e2:	18 07       	cpc	r17, r24
     9e4:	21 f4       	brne	.+8      	; 0x9ee <UART_computer_init+0x1f8>
     9e6:	60 e1       	ldi	r22, 0x10	; 16
     9e8:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     9ea:	18 d1       	rcall	.+560    	; 0xc1c <sysclk_enable_module>
     9ec:	7d c0       	rjmp	.+250    	; 0xae8 <UART_computer_init+0x2f2>
     9ee:	00 3b       	cpi	r16, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     9f0:	28 e0       	ldi	r18, 0x08	; 8
     9f2:	12 07       	cpc	r17, r18
     9f4:	21 f4       	brne	.+8      	; 0x9fe <UART_computer_init+0x208>
     9f6:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     9f8:	83 e0       	ldi	r24, 0x03	; 3
     9fa:	10 d1       	rcall	.+544    	; 0xc1c <sysclk_enable_module>
     9fc:	75 c0       	rjmp	.+234    	; 0xae8 <UART_computer_init+0x2f2>
     9fe:	00 3b       	cpi	r16, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     a00:	89 e0       	ldi	r24, 0x09	; 9
     a02:	18 07       	cpc	r17, r24
     a04:	21 f4       	brne	.+8      	; 0xa0e <UART_computer_init+0x218>
     a06:	60 e2       	ldi	r22, 0x20	; 32
     a08:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     a0a:	08 d1       	rcall	.+528    	; 0xc1c <sysclk_enable_module>
     a0c:	6d c0       	rjmp	.+218    	; 0xae8 <UART_computer_init+0x2f2>
     a0e:	00 38       	cpi	r16, 0x80	; 128
     a10:	24 e0       	ldi	r18, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     a12:	12 07       	cpc	r17, r18
     a14:	21 f4       	brne	.+8      	; 0xa1e <UART_computer_init+0x228>
     a16:	60 e4       	ldi	r22, 0x40	; 64
     a18:	83 e0       	ldi	r24, 0x03	; 3
     a1a:	00 d1       	rcall	.+512    	; 0xc1c <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     a1c:	65 c0       	rjmp	.+202    	; 0xae8 <UART_computer_init+0x2f2>
     a1e:	00 3a       	cpi	r16, 0xA0	; 160
     a20:	84 e0       	ldi	r24, 0x04	; 4
     a22:	18 07       	cpc	r17, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     a24:	21 f4       	brne	.+8      	; 0xa2e <UART_computer_init+0x238>
     a26:	60 e4       	ldi	r22, 0x40	; 64
     a28:	85 e0       	ldi	r24, 0x05	; 5
     a2a:	f8 d0       	rcall	.+496    	; 0xc1c <sysclk_enable_module>
     a2c:	5d c0       	rjmp	.+186    	; 0xae8 <UART_computer_init+0x2f2>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     a2e:	00 93 14 20 	sts	0x2014, r16	; 0x802014 <stdio_base>
     a32:	10 93 15 20 	sts	0x2015, r17	; 0x802015 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     a36:	89 ef       	ldi	r24, 0xF9	; 249
     a38:	93 e0       	ldi	r25, 0x03	; 3
     a3a:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <ptr_put>
     a3e:	90 93 13 20 	sts	0x2013, r25	; 0x802013 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     a42:	81 ef       	ldi	r24, 0xF1	; 241
     a44:	93 e0       	ldi	r25, 0x03	; 3
     a46:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <__data_end>
     a4a:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <__data_end+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     a4e:	e6 e0       	ldi	r30, 0x06	; 6
     a50:	f0 e2       	ldi	r31, 0x20	; 32
     a52:	84 81       	ldd	r24, Z+4	; 0x04
	usart_rs232_options.paritytype   = options->paritytype;
     a54:	8d 83       	std	Y+5, r24	; 0x05
     a56:	85 81       	ldd	r24, Z+5	; 0x05
	usart_rs232_options.stopbits     = options->stopbits;
     a58:	8e 83       	std	Y+6, r24	; 0x06
     a5a:	86 81       	ldd	r24, Z+6	; 0x06
	usart_rs232_options.baudrate     = options->baudrate;
     a5c:	8f 83       	std	Y+7, r24	; 0x07
     a5e:	80 81       	ld	r24, Z
     a60:	91 81       	ldd	r25, Z+1	; 0x01
     a62:	a2 81       	ldd	r26, Z+2	; 0x02
     a64:	b3 81       	ldd	r27, Z+3	; 0x03
     a66:	89 83       	std	Y+1, r24	; 0x01
     a68:	9a 83       	std	Y+2, r25	; 0x02

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
     a6a:	ab 83       	std	Y+3, r26	; 0x03
     a6c:	bc 83       	std	Y+4, r27	; 0x04
     a6e:	68 01       	movw	r12, r16
     a70:	00 3a       	cpi	r16, 0xA0	; 160
     a72:	28 e0       	ldi	r18, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
     a74:	12 07       	cpc	r17, r18
     a76:	51 f4       	brne	.+20     	; 0xa8c <UART_computer_init+0x296>
     a78:	60 e1       	ldi	r22, 0x10	; 16
     a7a:	83 e0       	ldi	r24, 0x03	; 3
     a7c:	cf d0       	rcall	.+414    	; 0xc1c <sysclk_enable_module>
     a7e:	0f 2e       	mov	r0, r31
     a80:	f0 ea       	ldi	r31, 0xA0	; 160
     a82:	cf 2e       	mov	r12, r31
     a84:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef USARTC1
	if((uint16_t)usart == (uint16_t)&USARTC1) {
     a86:	df 2e       	mov	r13, r31
     a88:	f0 2d       	mov	r31, r0
     a8a:	12 c0       	rjmp	.+36     	; 0xab0 <UART_computer_init+0x2ba>
     a8c:	80 eb       	ldi	r24, 0xB0	; 176
     a8e:	c8 16       	cp	r12, r24
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART1_bm);
     a90:	88 e0       	ldi	r24, 0x08	; 8
     a92:	d8 06       	cpc	r13, r24
     a94:	21 f4       	brne	.+8      	; 0xa9e <UART_computer_init+0x2a8>
     a96:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD0
	if((uint16_t)usart == (uint16_t)&USARTD0) {
     a98:	83 e0       	ldi	r24, 0x03	; 3
     a9a:	c0 d0       	rcall	.+384    	; 0xc1c <sysclk_enable_module>
     a9c:	12 c0       	rjmp	.+36     	; 0xac2 <UART_computer_init+0x2cc>
     a9e:	20 ea       	ldi	r18, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
     aa0:	c2 16       	cp	r12, r18
     aa2:	29 e0       	ldi	r18, 0x09	; 9
     aa4:	d2 06       	cpc	r13, r18
     aa6:	21 f4       	brne	.+8      	; 0xab0 <UART_computer_init+0x2ba>
	}
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
     aa8:	60 e1       	ldi	r22, 0x10	; 16
     aaa:	84 e0       	ldi	r24, 0x04	; 4
     aac:	b7 d0       	rcall	.+366    	; 0xc1c <sysclk_enable_module>
     aae:	11 c0       	rjmp	.+34     	; 0xad2 <UART_computer_init+0x2dc>
     ab0:	80 eb       	ldi	r24, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
     ab2:	c8 16       	cp	r12, r24
     ab4:	89 e0       	ldi	r24, 0x09	; 9
     ab6:	d8 06       	cpc	r13, r24
     ab8:	21 f4       	brne	.+8      	; 0xac2 <UART_computer_init+0x2cc>
     aba:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
     abc:	84 e0       	ldi	r24, 0x04	; 4
     abe:	ae d0       	rcall	.+348    	; 0xc1c <sysclk_enable_module>
     ac0:	08 c0       	rjmp	.+16     	; 0xad2 <UART_computer_init+0x2dc>
     ac2:	20 ea       	ldi	r18, 0xA0	; 160
     ac4:	c2 16       	cp	r12, r18
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     ac6:	2a e0       	ldi	r18, 0x0A	; 10
     ac8:	d2 06       	cpc	r13, r18
     aca:	19 f4       	brne	.+6      	; 0xad2 <UART_computer_init+0x2dc>
     acc:	60 e1       	ldi	r22, 0x10	; 16
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     ace:	85 e0       	ldi	r24, 0x05	; 5
     ad0:	a5 d0       	rcall	.+330    	; 0xc1c <sysclk_enable_module>
     ad2:	be 01       	movw	r22, r28
     ad4:	6f 5f       	subi	r22, 0xFF	; 255
     ad6:	7f 4f       	sbci	r23, 0xFF	; 255
     ad8:	c8 01       	movw	r24, r16
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     ada:	9a dd       	rcall	.-1228   	; 0x610 <usart_init_rs232>
     adc:	6a e1       	ldi	r22, 0x1A	; 26
     ade:	71 e0       	ldi	r23, 0x01	; 1
     ae0:	81 ea       	ldi	r24, 0xA1	; 161
     ae2:	95 e0       	ldi	r25, 0x05	; 5
     ae4:	34 d1       	rcall	.+616    	; 0xd4e <fdevopen>
	gpio_configure_pin(tx_pin, IOPORT_DIR_OUTPUT);
	gpio_configure_pin(rx_pin, IOPORT_DIR_INPUT);
	sysclk_enable_peripheral_clock(comms_usart); 
	
	stdio_serial_init(comms_usart, &options);
     ae6:	22 c0       	rjmp	.+68     	; 0xb2c <UART_computer_init+0x336>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     ae8:	00 93 14 20 	sts	0x2014, r16	; 0x802014 <stdio_base>
     aec:	10 93 15 20 	sts	0x2015, r17	; 0x802015 <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     af0:	89 ef       	ldi	r24, 0xF9	; 249
     af2:	93 e0       	ldi	r25, 0x03	; 3
     af4:	80 93 12 20 	sts	0x2012, r24	; 0x802012 <ptr_put>
     af8:	90 93 13 20 	sts	0x2013, r25	; 0x802013 <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     afc:	81 ef       	ldi	r24, 0xF1	; 241
     afe:	93 e0       	ldi	r25, 0x03	; 3
     b00:	80 93 0e 20 	sts	0x200E, r24	; 0x80200e <__data_end>
     b04:	90 93 0f 20 	sts	0x200F, r25	; 0x80200f <__data_end+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     b08:	e6 e0       	ldi	r30, 0x06	; 6
     b0a:	f0 e2       	ldi	r31, 0x20	; 32
     b0c:	84 81       	ldd	r24, Z+4	; 0x04
     b0e:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     b10:	85 81       	ldd	r24, Z+5	; 0x05
     b12:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     b14:	86 81       	ldd	r24, Z+6	; 0x06
     b16:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     b18:	80 81       	ld	r24, Z
     b1a:	91 81       	ldd	r25, Z+1	; 0x01
     b1c:	a2 81       	ldd	r26, Z+2	; 0x02
     b1e:	b3 81       	ldd	r27, Z+3	; 0x03
     b20:	89 83       	std	Y+1, r24	; 0x01
     b22:	9a 83       	std	Y+2, r25	; 0x02
     b24:	ab 83       	std	Y+3, r26	; 0x03
     b26:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
     b28:	68 01       	movw	r12, r16
     b2a:	b0 cf       	rjmp	.-160    	; 0xa8c <UART_computer_init+0x296>
     b2c:	27 96       	adiw	r28, 0x07	; 7
     b2e:	cd bf       	out	0x3d, r28	; 61
     b30:	de bf       	out	0x3e, r29	; 62
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	1f 91       	pop	r17
     b38:	0f 91       	pop	r16
     b3a:	ff 90       	pop	r15
     b3c:	df 90       	pop	r13
     b3e:	cf 90       	pop	r12
     b40:	08 95       	ret

00000b42 <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     b42:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     b44:	80 91 14 20 	lds	r24, 0x2014	; 0x802014 <stdio_base>
     b48:	90 91 15 20 	lds	r25, 0x2015	; 0x802015 <stdio_base+0x1>
     b4c:	e0 91 12 20 	lds	r30, 0x2012	; 0x802012 <ptr_put>
     b50:	f0 91 13 20 	lds	r31, 0x2013	; 0x802013 <ptr_put+0x1>
     b54:	09 95       	icall
     b56:	99 23       	and	r25, r25
     b58:	1c f0       	brlt	.+6      	; 0xb60 <_write+0x1e>
		return -1;
	}
	return 1;
     b5a:	81 e0       	ldi	r24, 0x01	; 1
     b5c:	90 e0       	ldi	r25, 0x00	; 0
     b5e:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     b60:	8f ef       	ldi	r24, 0xFF	; 255
     b62:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     b64:	08 95       	ret

00000b66 <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     b70:	c6 2f       	mov	r28, r22
     b72:	d0 e0       	ldi	r29, 0x00	; 0
     b74:	de 01       	movw	r26, r28
     b76:	02 2e       	mov	r0, r18
     b78:	02 c0       	rjmp	.+4      	; 0xb7e <ioport_configure_port_pin+0x18>
     b7a:	b5 95       	asr	r27
     b7c:	a7 95       	ror	r26
     b7e:	0a 94       	dec	r0
     b80:	e2 f7       	brpl	.-8      	; 0xb7a <ioport_configure_port_pin+0x14>
     b82:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     b84:	50 8b       	std	Z+16, r21	; 0x10
     b86:	2f 5f       	subi	r18, 0xFF	; 255
     b88:	3f 4f       	sbci	r19, 0xFF	; 255
     b8a:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     b8c:	28 30       	cpi	r18, 0x08	; 8
     b8e:	31 05       	cpc	r19, r1
     b90:	89 f7       	brne	.-30     	; 0xb74 <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     b92:	40 ff       	sbrs	r20, 0
     b94:	0a c0       	rjmp	.+20     	; 0xbaa <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
     b96:	41 ff       	sbrs	r20, 1
     b98:	03 c0       	rjmp	.+6      	; 0xba0 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     b9a:	fc 01       	movw	r30, r24
     b9c:	65 83       	std	Z+5, r22	; 0x05
     b9e:	02 c0       	rjmp	.+4      	; 0xba4 <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     ba0:	fc 01       	movw	r30, r24
     ba2:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     ba4:	fc 01       	movw	r30, r24
     ba6:	61 83       	std	Z+1, r22	; 0x01
     ba8:	02 c0       	rjmp	.+4      	; 0xbae <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     baa:	fc 01       	movw	r30, r24
     bac:	62 83       	std	Z+2, r22	; 0x02
	}
}
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	08 95       	ret

00000bb4 <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	00 d0       	rcall	.+0      	; 0xbba <sysclk_init+0x6>
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     bbe:	8f ef       	ldi	r24, 0xFF	; 255
     bc0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     bc4:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     bc8:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     bcc:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     bd0:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     bd4:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     bd8:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     bdc:	8f b7       	in	r24, 0x3f	; 63
     bde:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     be0:	f8 94       	cli
	return flags;
     be2:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     be4:	e0 e5       	ldi	r30, 0x50	; 80
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	82 60       	ori	r24, 0x02	; 2
     bec:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     bee:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     bf0:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     bf2:	81 ff       	sbrs	r24, 1
     bf4:	fd cf       	rjmp	.-6      	; 0xbf0 <sysclk_init+0x3c>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     bf6:	61 e0       	ldi	r22, 0x01	; 1
     bf8:	80 e4       	ldi	r24, 0x40	; 64
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	25 d0       	rcall	.+74     	; 0xc48 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     bfe:	8f b7       	in	r24, 0x3f	; 63
     c00:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     c02:	f8 94       	cli
	return flags;
     c04:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     c06:	e0 e5       	ldi	r30, 0x50	; 80
     c08:	f0 e0       	ldi	r31, 0x00	; 0
     c0a:	80 81       	ld	r24, Z
     c0c:	8e 7f       	andi	r24, 0xFE	; 254
     c0e:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c10:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     c12:	0f 90       	pop	r0
     c14:	0f 90       	pop	r0
     c16:	df 91       	pop	r29
     c18:	cf 91       	pop	r28
     c1a:	08 95       	ret

00000c1c <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	1f 92       	push	r1
     c22:	cd b7       	in	r28, 0x3d	; 61
     c24:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     c26:	9f b7       	in	r25, 0x3f	; 63
     c28:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
     c2a:	f8 94       	cli
	return flags;
     c2c:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     c2e:	e8 2f       	mov	r30, r24
     c30:	f0 e0       	ldi	r31, 0x00	; 0
     c32:	e0 59       	subi	r30, 0x90	; 144
     c34:	ff 4f       	sbci	r31, 0xFF	; 255
     c36:	60 95       	com	r22
     c38:	80 81       	ld	r24, Z
     c3a:	68 23       	and	r22, r24
     c3c:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     c3e:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
     c40:	0f 90       	pop	r0
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	08 95       	ret

00000c48 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
     c48:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
     c4a:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
     c4c:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
     c4e:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
     c50:	60 83       	st	Z, r22
	ret                             // Return to caller
     c52:	08 95       	ret

00000c54 <pin_setup>:
	}
	/* Insert application code here, after the board has been initialized. */
}

void pin_setup(void)
{
     c54:	ef 92       	push	r14
     c56:	ff 92       	push	r15
     c58:	0f 93       	push	r16
     c5a:	1f 93       	push	r17
     c5c:	cf 93       	push	r28
     c5e:	41 e0       	ldi	r20, 0x01	; 1
     c60:	50 e0       	ldi	r21, 0x00	; 0
     c62:	60 e2       	ldi	r22, 0x20	; 32
     c64:	80 e4       	ldi	r24, 0x40	; 64
     c66:	96 e0       	ldi	r25, 0x06	; 6
     c68:	7e df       	rcall	.-260    	; 0xb66 <ioport_configure_port_pin>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
     c6a:	00 e4       	ldi	r16, 0x40	; 64
     c6c:	16 e0       	ldi	r17, 0x06	; 6
     c6e:	80 e2       	ldi	r24, 0x20	; 32
     c70:	f8 01       	movw	r30, r16
     c72:	86 83       	std	Z+6, r24	; 0x06
     c74:	41 e0       	ldi	r20, 0x01	; 1
     c76:	50 e0       	ldi	r21, 0x00	; 0
     c78:	61 e0       	ldi	r22, 0x01	; 1
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	96 e0       	ldi	r25, 0x06	; 6
     c7e:	73 df       	rcall	.-282    	; 0xb66 <ioport_configure_port_pin>
     c80:	c1 e0       	ldi	r28, 0x01	; 1
     c82:	c0 93 06 06 	sts	0x0606, r28	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     c86:	41 e0       	ldi	r20, 0x01	; 1
     c88:	50 e0       	ldi	r21, 0x00	; 0
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	80 e4       	ldi	r24, 0x40	; 64
     c8e:	96 e0       	ldi	r25, 0x06	; 6
     c90:	6a df       	rcall	.-300    	; 0xb66 <ioport_configure_port_pin>
     c92:	f8 01       	movw	r30, r16
     c94:	c6 83       	std	Z+6, r28	; 0x06
     c96:	41 e0       	ldi	r20, 0x01	; 1
     c98:	50 e0       	ldi	r21, 0x00	; 0
     c9a:	61 e0       	ldi	r22, 0x01	; 1
     c9c:	80 e6       	ldi	r24, 0x60	; 96
     c9e:	96 e0       	ldi	r25, 0x06	; 6
     ca0:	62 df       	rcall	.-316    	; 0xb66 <ioport_configure_port_pin>
     ca2:	00 e6       	ldi	r16, 0x60	; 96
     ca4:	16 e0       	ldi	r17, 0x06	; 6
     ca6:	f8 01       	movw	r30, r16
     ca8:	c6 83       	std	Z+6, r28	; 0x06
     caa:	41 e0       	ldi	r20, 0x01	; 1
     cac:	50 e0       	ldi	r21, 0x00	; 0
     cae:	62 e0       	ldi	r22, 0x02	; 2
     cb0:	80 e8       	ldi	r24, 0x80	; 128
     cb2:	96 e0       	ldi	r25, 0x06	; 6
     cb4:	58 df       	rcall	.-336    	; 0xb66 <ioport_configure_port_pin>
     cb6:	0f 2e       	mov	r0, r31
     cb8:	f0 e8       	ldi	r31, 0x80	; 128
     cba:	ef 2e       	mov	r14, r31
     cbc:	f6 e0       	ldi	r31, 0x06	; 6
     cbe:	ff 2e       	mov	r15, r31
     cc0:	f0 2d       	mov	r31, r0
     cc2:	82 e0       	ldi	r24, 0x02	; 2
     cc4:	f7 01       	movw	r30, r14
     cc6:	86 83       	std	Z+6, r24	; 0x06
     cc8:	41 e0       	ldi	r20, 0x01	; 1
     cca:	50 e0       	ldi	r21, 0x00	; 0
     ccc:	61 e0       	ldi	r22, 0x01	; 1
     cce:	80 e8       	ldi	r24, 0x80	; 128
     cd0:	96 e0       	ldi	r25, 0x06	; 6
     cd2:	49 df       	rcall	.-366    	; 0xb66 <ioport_configure_port_pin>
     cd4:	f7 01       	movw	r30, r14
     cd6:	c6 83       	std	Z+6, r28	; 0x06
     cd8:	41 e0       	ldi	r20, 0x01	; 1
     cda:	50 e0       	ldi	r21, 0x00	; 0
     cdc:	60 e1       	ldi	r22, 0x10	; 16
     cde:	80 e6       	ldi	r24, 0x60	; 96
     ce0:	96 e0       	ldi	r25, 0x06	; 6
     ce2:	41 df       	rcall	.-382    	; 0xb66 <ioport_configure_port_pin>
     ce4:	80 e1       	ldi	r24, 0x10	; 16
     ce6:	f8 01       	movw	r30, r16
     ce8:	86 83       	std	Z+6, r24	; 0x06
	gpio_configure_pin(EMATCH_BACKUP_PIN, IOPORT_DIR_OUTPUT);
	gpio_set_pin_low(EMATCH_BACKUP_PIN);
	
	gpio_configure_pin(BUZZER_CTRL_PIN, IOPORT_DIR_OUTPUT);
	gpio_set_pin_low(BUZZER_CTRL_PIN);
     cea:	cf 91       	pop	r28
     cec:	1f 91       	pop	r17
     cee:	0f 91       	pop	r16
     cf0:	ff 90       	pop	r15
     cf2:	ef 90       	pop	r14
     cf4:	08 95       	ret

00000cf6 <main>:

void pin_setup(void);

int main (void)
{
	sysclk_init();
     cf6:	5e df       	rcall	.-324    	; 0xbb4 <sysclk_init>
	pin_setup();
     cf8:	ad df       	rcall	.-166    	; 0xc54 <pin_setup>
     cfa:	22 e1       	ldi	r18, 0x12	; 18
	UART_computer_init(&COMMS_USART, &PORTC, USART_TX_PIN, USART_RX_PIN);
     cfc:	43 e1       	ldi	r20, 0x13	; 19
     cfe:	60 e4       	ldi	r22, 0x40	; 64
     d00:	76 e0       	ldi	r23, 0x06	; 6
     d02:	80 ea       	ldi	r24, 0xA0	; 160
     d04:	98 e0       	ldi	r25, 0x08	; 8
     d06:	77 dd       	rcall	.-1298   	; 0x7f6 <UART_computer_init>
     d08:	ff cf       	rjmp	.-2      	; 0xd08 <main+0x12>

00000d0a <__udivmodsi4>:
     d0a:	a1 e2       	ldi	r26, 0x21	; 33
     d0c:	1a 2e       	mov	r1, r26
     d0e:	aa 1b       	sub	r26, r26
     d10:	bb 1b       	sub	r27, r27
     d12:	fd 01       	movw	r30, r26
     d14:	0d c0       	rjmp	.+26     	; 0xd30 <__udivmodsi4_ep>

00000d16 <__udivmodsi4_loop>:
     d16:	aa 1f       	adc	r26, r26
     d18:	bb 1f       	adc	r27, r27
     d1a:	ee 1f       	adc	r30, r30
     d1c:	ff 1f       	adc	r31, r31
     d1e:	a2 17       	cp	r26, r18
     d20:	b3 07       	cpc	r27, r19
     d22:	e4 07       	cpc	r30, r20
     d24:	f5 07       	cpc	r31, r21
     d26:	20 f0       	brcs	.+8      	; 0xd30 <__udivmodsi4_ep>
     d28:	a2 1b       	sub	r26, r18
     d2a:	b3 0b       	sbc	r27, r19
     d2c:	e4 0b       	sbc	r30, r20
     d2e:	f5 0b       	sbc	r31, r21

00000d30 <__udivmodsi4_ep>:
     d30:	66 1f       	adc	r22, r22
     d32:	77 1f       	adc	r23, r23
     d34:	88 1f       	adc	r24, r24
     d36:	99 1f       	adc	r25, r25
     d38:	1a 94       	dec	r1
     d3a:	69 f7       	brne	.-38     	; 0xd16 <__udivmodsi4_loop>
     d3c:	60 95       	com	r22
     d3e:	70 95       	com	r23
     d40:	80 95       	com	r24
     d42:	90 95       	com	r25
     d44:	9b 01       	movw	r18, r22
     d46:	ac 01       	movw	r20, r24
     d48:	bd 01       	movw	r22, r26
     d4a:	cf 01       	movw	r24, r30
     d4c:	08 95       	ret

00000d4e <fdevopen>:
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	00 97       	sbiw	r24, 0x00	; 0
     d58:	31 f4       	brne	.+12     	; 0xd66 <fdevopen+0x18>
     d5a:	61 15       	cp	r22, r1
     d5c:	71 05       	cpc	r23, r1
     d5e:	19 f4       	brne	.+6      	; 0xd66 <fdevopen+0x18>
     d60:	80 e0       	ldi	r24, 0x00	; 0
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	39 c0       	rjmp	.+114    	; 0xdd8 <fdevopen+0x8a>
     d66:	8b 01       	movw	r16, r22
     d68:	ec 01       	movw	r28, r24
     d6a:	6e e0       	ldi	r22, 0x0E	; 14
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	37 d0       	rcall	.+110    	; 0xde2 <calloc>
     d74:	fc 01       	movw	r30, r24
     d76:	89 2b       	or	r24, r25
     d78:	99 f3       	breq	.-26     	; 0xd60 <fdevopen+0x12>
     d7a:	80 e8       	ldi	r24, 0x80	; 128
     d7c:	83 83       	std	Z+3, r24	; 0x03
     d7e:	01 15       	cp	r16, r1
     d80:	11 05       	cpc	r17, r1
     d82:	71 f0       	breq	.+28     	; 0xda0 <fdevopen+0x52>
     d84:	02 87       	std	Z+10, r16	; 0x0a
     d86:	13 87       	std	Z+11, r17	; 0x0b
     d88:	81 e8       	ldi	r24, 0x81	; 129
     d8a:	83 83       	std	Z+3, r24	; 0x03
     d8c:	80 91 16 20 	lds	r24, 0x2016	; 0x802016 <__iob>
     d90:	90 91 17 20 	lds	r25, 0x2017	; 0x802017 <__iob+0x1>
     d94:	89 2b       	or	r24, r25
     d96:	21 f4       	brne	.+8      	; 0xda0 <fdevopen+0x52>
     d98:	e0 93 16 20 	sts	0x2016, r30	; 0x802016 <__iob>
     d9c:	f0 93 17 20 	sts	0x2017, r31	; 0x802017 <__iob+0x1>
     da0:	20 97       	sbiw	r28, 0x00	; 0
     da2:	c9 f0       	breq	.+50     	; 0xdd6 <fdevopen+0x88>
     da4:	c0 87       	std	Z+8, r28	; 0x08
     da6:	d1 87       	std	Z+9, r29	; 0x09
     da8:	83 81       	ldd	r24, Z+3	; 0x03
     daa:	82 60       	ori	r24, 0x02	; 2
     dac:	83 83       	std	Z+3, r24	; 0x03
     dae:	80 91 18 20 	lds	r24, 0x2018	; 0x802018 <__iob+0x2>
     db2:	90 91 19 20 	lds	r25, 0x2019	; 0x802019 <__iob+0x3>
     db6:	89 2b       	or	r24, r25
     db8:	71 f4       	brne	.+28     	; 0xdd6 <fdevopen+0x88>
     dba:	e0 93 18 20 	sts	0x2018, r30	; 0x802018 <__iob+0x2>
     dbe:	f0 93 19 20 	sts	0x2019, r31	; 0x802019 <__iob+0x3>
     dc2:	80 91 1a 20 	lds	r24, 0x201A	; 0x80201a <__iob+0x4>
     dc6:	90 91 1b 20 	lds	r25, 0x201B	; 0x80201b <__iob+0x5>
     dca:	89 2b       	or	r24, r25
     dcc:	21 f4       	brne	.+8      	; 0xdd6 <fdevopen+0x88>
     dce:	e0 93 1a 20 	sts	0x201A, r30	; 0x80201a <__iob+0x4>
     dd2:	f0 93 1b 20 	sts	0x201B, r31	; 0x80201b <__iob+0x5>
     dd6:	cf 01       	movw	r24, r30
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	1f 91       	pop	r17
     dde:	0f 91       	pop	r16
     de0:	08 95       	ret

00000de2 <calloc>:
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	86 9f       	mul	r24, r22
     dec:	80 01       	movw	r16, r0
     dee:	87 9f       	mul	r24, r23
     df0:	10 0d       	add	r17, r0
     df2:	96 9f       	mul	r25, r22
     df4:	10 0d       	add	r17, r0
     df6:	11 24       	eor	r1, r1
     df8:	c8 01       	movw	r24, r16
     dfa:	0d d0       	rcall	.+26     	; 0xe16 <malloc>
     dfc:	ec 01       	movw	r28, r24
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	21 f0       	breq	.+8      	; 0xe0a <calloc+0x28>
     e02:	a8 01       	movw	r20, r16
     e04:	60 e0       	ldi	r22, 0x00	; 0
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	27 d1       	rcall	.+590    	; 0x1058 <memset>
     e0a:	ce 01       	movw	r24, r28
     e0c:	df 91       	pop	r29
     e0e:	cf 91       	pop	r28
     e10:	1f 91       	pop	r17
     e12:	0f 91       	pop	r16
     e14:	08 95       	ret

00000e16 <malloc>:
     e16:	0f 93       	push	r16
     e18:	1f 93       	push	r17
     e1a:	cf 93       	push	r28
     e1c:	df 93       	push	r29
     e1e:	82 30       	cpi	r24, 0x02	; 2
     e20:	91 05       	cpc	r25, r1
     e22:	10 f4       	brcc	.+4      	; 0xe28 <malloc+0x12>
     e24:	82 e0       	ldi	r24, 0x02	; 2
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	e0 91 1e 20 	lds	r30, 0x201E	; 0x80201e <__flp>
     e2c:	f0 91 1f 20 	lds	r31, 0x201F	; 0x80201f <__flp+0x1>
     e30:	20 e0       	ldi	r18, 0x00	; 0
     e32:	30 e0       	ldi	r19, 0x00	; 0
     e34:	a0 e0       	ldi	r26, 0x00	; 0
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	30 97       	sbiw	r30, 0x00	; 0
     e3a:	19 f1       	breq	.+70     	; 0xe82 <malloc+0x6c>
     e3c:	40 81       	ld	r20, Z
     e3e:	51 81       	ldd	r21, Z+1	; 0x01
     e40:	02 81       	ldd	r16, Z+2	; 0x02
     e42:	13 81       	ldd	r17, Z+3	; 0x03
     e44:	48 17       	cp	r20, r24
     e46:	59 07       	cpc	r21, r25
     e48:	c8 f0       	brcs	.+50     	; 0xe7c <malloc+0x66>
     e4a:	84 17       	cp	r24, r20
     e4c:	95 07       	cpc	r25, r21
     e4e:	69 f4       	brne	.+26     	; 0xe6a <malloc+0x54>
     e50:	10 97       	sbiw	r26, 0x00	; 0
     e52:	31 f0       	breq	.+12     	; 0xe60 <malloc+0x4a>
     e54:	12 96       	adiw	r26, 0x02	; 2
     e56:	0c 93       	st	X, r16
     e58:	12 97       	sbiw	r26, 0x02	; 2
     e5a:	13 96       	adiw	r26, 0x03	; 3
     e5c:	1c 93       	st	X, r17
     e5e:	27 c0       	rjmp	.+78     	; 0xeae <malloc+0x98>
     e60:	00 93 1e 20 	sts	0x201E, r16	; 0x80201e <__flp>
     e64:	10 93 1f 20 	sts	0x201F, r17	; 0x80201f <__flp+0x1>
     e68:	22 c0       	rjmp	.+68     	; 0xeae <malloc+0x98>
     e6a:	21 15       	cp	r18, r1
     e6c:	31 05       	cpc	r19, r1
     e6e:	19 f0       	breq	.+6      	; 0xe76 <malloc+0x60>
     e70:	42 17       	cp	r20, r18
     e72:	53 07       	cpc	r21, r19
     e74:	18 f4       	brcc	.+6      	; 0xe7c <malloc+0x66>
     e76:	9a 01       	movw	r18, r20
     e78:	bd 01       	movw	r22, r26
     e7a:	ef 01       	movw	r28, r30
     e7c:	df 01       	movw	r26, r30
     e7e:	f8 01       	movw	r30, r16
     e80:	db cf       	rjmp	.-74     	; 0xe38 <malloc+0x22>
     e82:	21 15       	cp	r18, r1
     e84:	31 05       	cpc	r19, r1
     e86:	f9 f0       	breq	.+62     	; 0xec6 <malloc+0xb0>
     e88:	28 1b       	sub	r18, r24
     e8a:	39 0b       	sbc	r19, r25
     e8c:	24 30       	cpi	r18, 0x04	; 4
     e8e:	31 05       	cpc	r19, r1
     e90:	80 f4       	brcc	.+32     	; 0xeb2 <malloc+0x9c>
     e92:	8a 81       	ldd	r24, Y+2	; 0x02
     e94:	9b 81       	ldd	r25, Y+3	; 0x03
     e96:	61 15       	cp	r22, r1
     e98:	71 05       	cpc	r23, r1
     e9a:	21 f0       	breq	.+8      	; 0xea4 <malloc+0x8e>
     e9c:	fb 01       	movw	r30, r22
     e9e:	82 83       	std	Z+2, r24	; 0x02
     ea0:	93 83       	std	Z+3, r25	; 0x03
     ea2:	04 c0       	rjmp	.+8      	; 0xeac <malloc+0x96>
     ea4:	80 93 1e 20 	sts	0x201E, r24	; 0x80201e <__flp>
     ea8:	90 93 1f 20 	sts	0x201F, r25	; 0x80201f <__flp+0x1>
     eac:	fe 01       	movw	r30, r28
     eae:	32 96       	adiw	r30, 0x02	; 2
     eb0:	44 c0       	rjmp	.+136    	; 0xf3a <malloc+0x124>
     eb2:	fe 01       	movw	r30, r28
     eb4:	e2 0f       	add	r30, r18
     eb6:	f3 1f       	adc	r31, r19
     eb8:	81 93       	st	Z+, r24
     eba:	91 93       	st	Z+, r25
     ebc:	22 50       	subi	r18, 0x02	; 2
     ebe:	31 09       	sbc	r19, r1
     ec0:	28 83       	st	Y, r18
     ec2:	39 83       	std	Y+1, r19	; 0x01
     ec4:	3a c0       	rjmp	.+116    	; 0xf3a <malloc+0x124>
     ec6:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <__brkval>
     eca:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <__brkval+0x1>
     ece:	23 2b       	or	r18, r19
     ed0:	41 f4       	brne	.+16     	; 0xee2 <malloc+0xcc>
     ed2:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
     ed6:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
     eda:	20 93 1c 20 	sts	0x201C, r18	; 0x80201c <__brkval>
     ede:	30 93 1d 20 	sts	0x201D, r19	; 0x80201d <__brkval+0x1>
     ee2:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
     ee6:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
     eea:	21 15       	cp	r18, r1
     eec:	31 05       	cpc	r19, r1
     eee:	41 f4       	brne	.+16     	; 0xf00 <malloc+0xea>
     ef0:	2d b7       	in	r18, 0x3d	; 61
     ef2:	3e b7       	in	r19, 0x3e	; 62
     ef4:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
     ef8:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
     efc:	24 1b       	sub	r18, r20
     efe:	35 0b       	sbc	r19, r21
     f00:	e0 91 1c 20 	lds	r30, 0x201C	; 0x80201c <__brkval>
     f04:	f0 91 1d 20 	lds	r31, 0x201D	; 0x80201d <__brkval+0x1>
     f08:	e2 17       	cp	r30, r18
     f0a:	f3 07       	cpc	r31, r19
     f0c:	a0 f4       	brcc	.+40     	; 0xf36 <malloc+0x120>
     f0e:	2e 1b       	sub	r18, r30
     f10:	3f 0b       	sbc	r19, r31
     f12:	28 17       	cp	r18, r24
     f14:	39 07       	cpc	r19, r25
     f16:	78 f0       	brcs	.+30     	; 0xf36 <malloc+0x120>
     f18:	ac 01       	movw	r20, r24
     f1a:	4e 5f       	subi	r20, 0xFE	; 254
     f1c:	5f 4f       	sbci	r21, 0xFF	; 255
     f1e:	24 17       	cp	r18, r20
     f20:	35 07       	cpc	r19, r21
     f22:	48 f0       	brcs	.+18     	; 0xf36 <malloc+0x120>
     f24:	4e 0f       	add	r20, r30
     f26:	5f 1f       	adc	r21, r31
     f28:	40 93 1c 20 	sts	0x201C, r20	; 0x80201c <__brkval>
     f2c:	50 93 1d 20 	sts	0x201D, r21	; 0x80201d <__brkval+0x1>
     f30:	81 93       	st	Z+, r24
     f32:	91 93       	st	Z+, r25
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <malloc+0x124>
     f36:	e0 e0       	ldi	r30, 0x00	; 0
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	cf 01       	movw	r24, r30
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	1f 91       	pop	r17
     f42:	0f 91       	pop	r16
     f44:	08 95       	ret

00000f46 <free>:
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	09 f4       	brne	.+2      	; 0xf50 <free+0xa>
     f4e:	81 c0       	rjmp	.+258    	; 0x1052 <free+0x10c>
     f50:	fc 01       	movw	r30, r24
     f52:	32 97       	sbiw	r30, 0x02	; 2
     f54:	12 82       	std	Z+2, r1	; 0x02
     f56:	13 82       	std	Z+3, r1	; 0x03
     f58:	a0 91 1e 20 	lds	r26, 0x201E	; 0x80201e <__flp>
     f5c:	b0 91 1f 20 	lds	r27, 0x201F	; 0x80201f <__flp+0x1>
     f60:	10 97       	sbiw	r26, 0x00	; 0
     f62:	81 f4       	brne	.+32     	; 0xf84 <free+0x3e>
     f64:	20 81       	ld	r18, Z
     f66:	31 81       	ldd	r19, Z+1	; 0x01
     f68:	82 0f       	add	r24, r18
     f6a:	93 1f       	adc	r25, r19
     f6c:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <__brkval>
     f70:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <__brkval+0x1>
     f74:	28 17       	cp	r18, r24
     f76:	39 07       	cpc	r19, r25
     f78:	51 f5       	brne	.+84     	; 0xfce <free+0x88>
     f7a:	e0 93 1c 20 	sts	0x201C, r30	; 0x80201c <__brkval>
     f7e:	f0 93 1d 20 	sts	0x201D, r31	; 0x80201d <__brkval+0x1>
     f82:	67 c0       	rjmp	.+206    	; 0x1052 <free+0x10c>
     f84:	ed 01       	movw	r28, r26
     f86:	20 e0       	ldi	r18, 0x00	; 0
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	ce 17       	cp	r28, r30
     f8c:	df 07       	cpc	r29, r31
     f8e:	40 f4       	brcc	.+16     	; 0xfa0 <free+0x5a>
     f90:	4a 81       	ldd	r20, Y+2	; 0x02
     f92:	5b 81       	ldd	r21, Y+3	; 0x03
     f94:	9e 01       	movw	r18, r28
     f96:	41 15       	cp	r20, r1
     f98:	51 05       	cpc	r21, r1
     f9a:	f1 f0       	breq	.+60     	; 0xfd8 <free+0x92>
     f9c:	ea 01       	movw	r28, r20
     f9e:	f5 cf       	rjmp	.-22     	; 0xf8a <free+0x44>
     fa0:	c2 83       	std	Z+2, r28	; 0x02
     fa2:	d3 83       	std	Z+3, r29	; 0x03
     fa4:	40 81       	ld	r20, Z
     fa6:	51 81       	ldd	r21, Z+1	; 0x01
     fa8:	84 0f       	add	r24, r20
     faa:	95 1f       	adc	r25, r21
     fac:	c8 17       	cp	r28, r24
     fae:	d9 07       	cpc	r29, r25
     fb0:	59 f4       	brne	.+22     	; 0xfc8 <free+0x82>
     fb2:	88 81       	ld	r24, Y
     fb4:	99 81       	ldd	r25, Y+1	; 0x01
     fb6:	84 0f       	add	r24, r20
     fb8:	95 1f       	adc	r25, r21
     fba:	02 96       	adiw	r24, 0x02	; 2
     fbc:	80 83       	st	Z, r24
     fbe:	91 83       	std	Z+1, r25	; 0x01
     fc0:	8a 81       	ldd	r24, Y+2	; 0x02
     fc2:	9b 81       	ldd	r25, Y+3	; 0x03
     fc4:	82 83       	std	Z+2, r24	; 0x02
     fc6:	93 83       	std	Z+3, r25	; 0x03
     fc8:	21 15       	cp	r18, r1
     fca:	31 05       	cpc	r19, r1
     fcc:	29 f4       	brne	.+10     	; 0xfd8 <free+0x92>
     fce:	e0 93 1e 20 	sts	0x201E, r30	; 0x80201e <__flp>
     fd2:	f0 93 1f 20 	sts	0x201F, r31	; 0x80201f <__flp+0x1>
     fd6:	3d c0       	rjmp	.+122    	; 0x1052 <free+0x10c>
     fd8:	e9 01       	movw	r28, r18
     fda:	ea 83       	std	Y+2, r30	; 0x02
     fdc:	fb 83       	std	Y+3, r31	; 0x03
     fde:	49 91       	ld	r20, Y+
     fe0:	59 91       	ld	r21, Y+
     fe2:	c4 0f       	add	r28, r20
     fe4:	d5 1f       	adc	r29, r21
     fe6:	ec 17       	cp	r30, r28
     fe8:	fd 07       	cpc	r31, r29
     fea:	61 f4       	brne	.+24     	; 0x1004 <free+0xbe>
     fec:	80 81       	ld	r24, Z
     fee:	91 81       	ldd	r25, Z+1	; 0x01
     ff0:	84 0f       	add	r24, r20
     ff2:	95 1f       	adc	r25, r21
     ff4:	02 96       	adiw	r24, 0x02	; 2
     ff6:	e9 01       	movw	r28, r18
     ff8:	88 83       	st	Y, r24
     ffa:	99 83       	std	Y+1, r25	; 0x01
     ffc:	82 81       	ldd	r24, Z+2	; 0x02
     ffe:	93 81       	ldd	r25, Z+3	; 0x03
    1000:	8a 83       	std	Y+2, r24	; 0x02
    1002:	9b 83       	std	Y+3, r25	; 0x03
    1004:	e0 e0       	ldi	r30, 0x00	; 0
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	12 96       	adiw	r26, 0x02	; 2
    100a:	8d 91       	ld	r24, X+
    100c:	9c 91       	ld	r25, X
    100e:	13 97       	sbiw	r26, 0x03	; 3
    1010:	00 97       	sbiw	r24, 0x00	; 0
    1012:	19 f0       	breq	.+6      	; 0x101a <free+0xd4>
    1014:	fd 01       	movw	r30, r26
    1016:	dc 01       	movw	r26, r24
    1018:	f7 cf       	rjmp	.-18     	; 0x1008 <free+0xc2>
    101a:	8d 91       	ld	r24, X+
    101c:	9c 91       	ld	r25, X
    101e:	11 97       	sbiw	r26, 0x01	; 1
    1020:	9d 01       	movw	r18, r26
    1022:	2e 5f       	subi	r18, 0xFE	; 254
    1024:	3f 4f       	sbci	r19, 0xFF	; 255
    1026:	82 0f       	add	r24, r18
    1028:	93 1f       	adc	r25, r19
    102a:	20 91 1c 20 	lds	r18, 0x201C	; 0x80201c <__brkval>
    102e:	30 91 1d 20 	lds	r19, 0x201D	; 0x80201d <__brkval+0x1>
    1032:	28 17       	cp	r18, r24
    1034:	39 07       	cpc	r19, r25
    1036:	69 f4       	brne	.+26     	; 0x1052 <free+0x10c>
    1038:	30 97       	sbiw	r30, 0x00	; 0
    103a:	29 f4       	brne	.+10     	; 0x1046 <free+0x100>
    103c:	10 92 1e 20 	sts	0x201E, r1	; 0x80201e <__flp>
    1040:	10 92 1f 20 	sts	0x201F, r1	; 0x80201f <__flp+0x1>
    1044:	02 c0       	rjmp	.+4      	; 0x104a <free+0x104>
    1046:	12 82       	std	Z+2, r1	; 0x02
    1048:	13 82       	std	Z+3, r1	; 0x03
    104a:	a0 93 1c 20 	sts	0x201C, r26	; 0x80201c <__brkval>
    104e:	b0 93 1d 20 	sts	0x201D, r27	; 0x80201d <__brkval+0x1>
    1052:	df 91       	pop	r29
    1054:	cf 91       	pop	r28
    1056:	08 95       	ret

00001058 <memset>:
    1058:	dc 01       	movw	r26, r24
    105a:	01 c0       	rjmp	.+2      	; 0x105e <memset+0x6>
    105c:	6d 93       	st	X+, r22
    105e:	41 50       	subi	r20, 0x01	; 1
    1060:	50 40       	sbci	r21, 0x00	; 0
    1062:	e0 f7       	brcc	.-8      	; 0x105c <memset+0x4>
    1064:	08 95       	ret

00001066 <_exit>:
    1066:	f8 94       	cli

00001068 <__stop_program>:
    1068:	ff cf       	rjmp	.-2      	; 0x1068 <__stop_program>
