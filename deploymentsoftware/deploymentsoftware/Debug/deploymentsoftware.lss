
deploymentsoftware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002354  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000104  00802000  00002354  000023e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000021f  00802104  00802104  000024ec  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000024ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002548  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000368  00000000  00000000  00002588  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e71f  00000000  00000000  000028f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004132  00000000  00000000  0001100f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000644b  00000000  00000000  00015141  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bc0  00000000  00000000  0001b58c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0002d0c4  00000000  00000000  0001c14c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003814  00000000  00000000  00049210  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000328  00000000  00000000  0004ca24  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00002897  00000000  00000000  0004cd4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	18 c1       	rjmp	.+560    	; 0x236 <__bad_interrupt>
       6:	00 00       	nop
       8:	16 c1       	rjmp	.+556    	; 0x236 <__bad_interrupt>
       a:	00 00       	nop
       c:	14 c1       	rjmp	.+552    	; 0x236 <__bad_interrupt>
       e:	00 00       	nop
      10:	12 c1       	rjmp	.+548    	; 0x236 <__bad_interrupt>
      12:	00 00       	nop
      14:	10 c1       	rjmp	.+544    	; 0x236 <__bad_interrupt>
      16:	00 00       	nop
      18:	0e c1       	rjmp	.+540    	; 0x236 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c c1       	rjmp	.+536    	; 0x236 <__bad_interrupt>
      1e:	00 00       	nop
      20:	0a c1       	rjmp	.+532    	; 0x236 <__bad_interrupt>
      22:	00 00       	nop
      24:	08 c1       	rjmp	.+528    	; 0x236 <__bad_interrupt>
      26:	00 00       	nop
      28:	06 c1       	rjmp	.+524    	; 0x236 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	04 c1       	rjmp	.+520    	; 0x236 <__bad_interrupt>
      2e:	00 00       	nop
      30:	02 c1       	rjmp	.+516    	; 0x236 <__bad_interrupt>
      32:	00 00       	nop
      34:	00 c1       	rjmp	.+512    	; 0x236 <__bad_interrupt>
      36:	00 00       	nop
      38:	fe c0       	rjmp	.+508    	; 0x236 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	fc c0       	rjmp	.+504    	; 0x236 <__bad_interrupt>
      3e:	00 00       	nop
      40:	fa c0       	rjmp	.+500    	; 0x236 <__bad_interrupt>
      42:	00 00       	nop
      44:	f8 c0       	rjmp	.+496    	; 0x236 <__bad_interrupt>
      46:	00 00       	nop
      48:	f6 c0       	rjmp	.+492    	; 0x236 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f4 c0       	rjmp	.+488    	; 0x236 <__bad_interrupt>
      4e:	00 00       	nop
      50:	f2 c0       	rjmp	.+484    	; 0x236 <__bad_interrupt>
      52:	00 00       	nop
      54:	f0 c0       	rjmp	.+480    	; 0x236 <__bad_interrupt>
      56:	00 00       	nop
      58:	ee c0       	rjmp	.+476    	; 0x236 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ec c0       	rjmp	.+472    	; 0x236 <__bad_interrupt>
      5e:	00 00       	nop
      60:	ea c0       	rjmp	.+468    	; 0x236 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 9a 08 	jmp	0x1134	; 0x1134 <__vector_25>
      68:	e6 c0       	rjmp	.+460    	; 0x236 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e4 c0       	rjmp	.+456    	; 0x236 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e2 c0       	rjmp	.+452    	; 0x236 <__bad_interrupt>
      72:	00 00       	nop
      74:	e0 c0       	rjmp	.+448    	; 0x236 <__bad_interrupt>
      76:	00 00       	nop
      78:	de c0       	rjmp	.+444    	; 0x236 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	dc c0       	rjmp	.+440    	; 0x236 <__bad_interrupt>
      7e:	00 00       	nop
      80:	da c0       	rjmp	.+436    	; 0x236 <__bad_interrupt>
      82:	00 00       	nop
      84:	d8 c0       	rjmp	.+432    	; 0x236 <__bad_interrupt>
      86:	00 00       	nop
      88:	d6 c0       	rjmp	.+428    	; 0x236 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d4 c0       	rjmp	.+424    	; 0x236 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d2 c0       	rjmp	.+420    	; 0x236 <__bad_interrupt>
      92:	00 00       	nop
      94:	d0 c0       	rjmp	.+416    	; 0x236 <__bad_interrupt>
      96:	00 00       	nop
      98:	ce c0       	rjmp	.+412    	; 0x236 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	cc c0       	rjmp	.+408    	; 0x236 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ca c0       	rjmp	.+404    	; 0x236 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c8 c0       	rjmp	.+400    	; 0x236 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c6 c0       	rjmp	.+396    	; 0x236 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c4 c0       	rjmp	.+392    	; 0x236 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c2 c0       	rjmp	.+388    	; 0x236 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c0 c0       	rjmp	.+384    	; 0x236 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	be c0       	rjmp	.+380    	; 0x236 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	ef c7       	rjmp	.+4062   	; 0x109c <__vector_47>
      be:	00 00       	nop
      c0:	ba c0       	rjmp	.+372    	; 0x236 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b8 c0       	rjmp	.+368    	; 0x236 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b6 c0       	rjmp	.+364    	; 0x236 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	b4 c0       	rjmp	.+360    	; 0x236 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	b2 c0       	rjmp	.+356    	; 0x236 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	b0 c0       	rjmp	.+352    	; 0x236 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ae c0       	rjmp	.+348    	; 0x236 <__bad_interrupt>
      da:	00 00       	nop
      dc:	ac c0       	rjmp	.+344    	; 0x236 <__bad_interrupt>
      de:	00 00       	nop
      e0:	aa c0       	rjmp	.+340    	; 0x236 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a8 c0       	rjmp	.+336    	; 0x236 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	a6 c0       	rjmp	.+332    	; 0x236 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a4 c0       	rjmp	.+328    	; 0x236 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a2 c0       	rjmp	.+324    	; 0x236 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a0 c0       	rjmp	.+320    	; 0x236 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	9e c0       	rjmp	.+316    	; 0x236 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	9c c0       	rjmp	.+312    	; 0x236 <__bad_interrupt>
      fe:	00 00       	nop
     100:	9a c0       	rjmp	.+308    	; 0x236 <__bad_interrupt>
     102:	00 00       	nop
     104:	98 c0       	rjmp	.+304    	; 0x236 <__bad_interrupt>
     106:	00 00       	nop
     108:	96 c0       	rjmp	.+300    	; 0x236 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	94 c0       	rjmp	.+296    	; 0x236 <__bad_interrupt>
     10e:	00 00       	nop
     110:	92 c0       	rjmp	.+292    	; 0x236 <__bad_interrupt>
     112:	00 00       	nop
     114:	90 c0       	rjmp	.+288    	; 0x236 <__bad_interrupt>
     116:	00 00       	nop
     118:	8e c0       	rjmp	.+284    	; 0x236 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	a6 c0       	rjmp	.+332    	; 0x26a <__vector_71>
     11e:	00 00       	nop
     120:	d2 c0       	rjmp	.+420    	; 0x2c6 <__vector_72>
     122:	00 00       	nop
     124:	fe c0       	rjmp	.+508    	; 0x322 <__vector_73>
     126:	00 00       	nop
     128:	2a c1       	rjmp	.+596    	; 0x37e <__vector_74>
     12a:	00 00       	nop
     12c:	84 c0       	rjmp	.+264    	; 0x236 <__bad_interrupt>
     12e:	00 00       	nop
     130:	82 c0       	rjmp	.+260    	; 0x236 <__bad_interrupt>
     132:	00 00       	nop
     134:	8e c7       	rjmp	.+3868   	; 0x1052 <__vector_77>
     136:	00 00       	nop
     138:	7e c0       	rjmp	.+252    	; 0x236 <__bad_interrupt>
     13a:	00 00       	nop
     13c:	7c c0       	rjmp	.+248    	; 0x236 <__bad_interrupt>
     13e:	00 00       	nop
     140:	7a c0       	rjmp	.+244    	; 0x236 <__bad_interrupt>
     142:	00 00       	nop
     144:	78 c0       	rjmp	.+240    	; 0x236 <__bad_interrupt>
     146:	00 00       	nop
     148:	76 c0       	rjmp	.+236    	; 0x236 <__bad_interrupt>
     14a:	00 00       	nop
     14c:	74 c0       	rjmp	.+232    	; 0x236 <__bad_interrupt>
     14e:	00 00       	nop
     150:	72 c0       	rjmp	.+228    	; 0x236 <__bad_interrupt>
     152:	00 00       	nop
     154:	70 c0       	rjmp	.+224    	; 0x236 <__bad_interrupt>
     156:	00 00       	nop
     158:	6e c0       	rjmp	.+220    	; 0x236 <__bad_interrupt>
     15a:	00 00       	nop
     15c:	6c c0       	rjmp	.+216    	; 0x236 <__bad_interrupt>
     15e:	00 00       	nop
     160:	6a c0       	rjmp	.+212    	; 0x236 <__bad_interrupt>
     162:	00 00       	nop
     164:	68 c0       	rjmp	.+208    	; 0x236 <__bad_interrupt>
     166:	00 00       	nop
     168:	66 c0       	rjmp	.+204    	; 0x236 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	64 c0       	rjmp	.+200    	; 0x236 <__bad_interrupt>
     16e:	00 00       	nop
     170:	62 c0       	rjmp	.+196    	; 0x236 <__bad_interrupt>
     172:	00 00       	nop
     174:	60 c0       	rjmp	.+192    	; 0x236 <__bad_interrupt>
     176:	00 00       	nop
     178:	5e c0       	rjmp	.+188    	; 0x236 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	5c c0       	rjmp	.+184    	; 0x236 <__bad_interrupt>
     17e:	00 00       	nop
     180:	5a c0       	rjmp	.+180    	; 0x236 <__bad_interrupt>
     182:	00 00       	nop
     184:	58 c0       	rjmp	.+176    	; 0x236 <__bad_interrupt>
     186:	00 00       	nop
     188:	56 c0       	rjmp	.+172    	; 0x236 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	54 c0       	rjmp	.+168    	; 0x236 <__bad_interrupt>
     18e:	00 00       	nop
     190:	52 c0       	rjmp	.+164    	; 0x236 <__bad_interrupt>
     192:	00 00       	nop
     194:	50 c0       	rjmp	.+160    	; 0x236 <__bad_interrupt>
     196:	00 00       	nop
     198:	4e c0       	rjmp	.+156    	; 0x236 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	4c c0       	rjmp	.+152    	; 0x236 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4a c0       	rjmp	.+148    	; 0x236 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	48 c0       	rjmp	.+144    	; 0x236 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	46 c0       	rjmp	.+140    	; 0x236 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	44 c0       	rjmp	.+136    	; 0x236 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	42 c0       	rjmp	.+132    	; 0x236 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	40 c0       	rjmp	.+128    	; 0x236 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	3e c0       	rjmp	.+124    	; 0x236 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	3c c0       	rjmp	.+120    	; 0x236 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	3a c0       	rjmp	.+116    	; 0x236 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	38 c0       	rjmp	.+112    	; 0x236 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	36 c0       	rjmp	.+108    	; 0x236 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	34 c0       	rjmp	.+104    	; 0x236 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	32 c0       	rjmp	.+100    	; 0x236 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	30 c0       	rjmp	.+96     	; 0x236 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	2e c0       	rjmp	.+92     	; 0x236 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	2c c0       	rjmp	.+88     	; 0x236 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2a c0       	rjmp	.+84     	; 0x236 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	28 c0       	rjmp	.+80     	; 0x236 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	26 c0       	rjmp	.+76     	; 0x236 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	24 c0       	rjmp	.+72     	; 0x236 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	22 c0       	rjmp	.+68     	; 0x236 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	20 c0       	rjmp	.+64     	; 0x236 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	1e c0       	rjmp	.+60     	; 0x236 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e2       	ldi	r29, 0x2F	; 47
     206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
     208:	11 e2       	ldi	r17, 0x21	; 33
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	e4 e5       	ldi	r30, 0x54	; 84
     210:	f3 e2       	ldi	r31, 0x23	; 35
     212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
     214:	05 90       	lpm	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	a4 30       	cpi	r26, 0x04	; 4
     21a:	b1 07       	cpc	r27, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
     21e:	23 e2       	ldi	r18, 0x23	; 35
     220:	a4 e0       	ldi	r26, 0x04	; 4
     222:	b1 e2       	ldi	r27, 0x21	; 33
     224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
     226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
     228:	a3 32       	cpi	r26, 0x23	; 35
     22a:	b2 07       	cpc	r27, r18
     22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
     22e:	0e 94 48 0a 	call	0x1490	; 0x1490 <main>
     232:	0c 94 a8 11 	jmp	0x2350	; 0x2350 <_exit>

00000236 <__bad_interrupt>:
     236:	e4 ce       	rjmp	.-568    	; 0x0 <__vectors>

00000238 <_read>:
#elif (defined(__GNUC__) && (XMEGA || MEGA) )

int _read (int *f); // Remove GCC compiler warning

int _read (int *f)
{
     238:	cf 93       	push	r28
     23a:	df 93       	push	r29
     23c:	1f 92       	push	r1
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
	char c;
	ptr_get(stdio_base,&c);
     242:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <stdio_base>
     246:	90 91 0f 21 	lds	r25, 0x210F	; 0x80210f <stdio_base+0x1>
     24a:	e0 91 08 21 	lds	r30, 0x2108	; 0x802108 <ptr_get>
     24e:	f0 91 09 21 	lds	r31, 0x2109	; 0x802109 <ptr_get+0x1>
     252:	be 01       	movw	r22, r28
     254:	6f 5f       	subi	r22, 0xFF	; 255
     256:	7f 4f       	sbci	r23, 0xFF	; 255
     258:	09 95       	icall
	return c;
     25a:	89 81       	ldd	r24, Y+1	; 0x01
}
     25c:	08 2e       	mov	r0, r24
     25e:	00 0c       	add	r0, r0
     260:	99 0b       	sbc	r25, r25
     262:	0f 90       	pop	r0
     264:	df 91       	pop	r29
     266:	cf 91       	pop	r28
     268:	08 95       	ret

0000026a <__vector_71>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH0_vect)
{
     26a:	1f 92       	push	r1
     26c:	0f 92       	push	r0
     26e:	0f b6       	in	r0, 0x3f	; 63
     270:	0f 92       	push	r0
     272:	11 24       	eor	r1, r1
     274:	2f 93       	push	r18
     276:	3f 93       	push	r19
     278:	4f 93       	push	r20
     27a:	5f 93       	push	r21
     27c:	6f 93       	push	r22
     27e:	7f 93       	push	r23
     280:	8f 93       	push	r24
     282:	9f 93       	push	r25
     284:	af 93       	push	r26
     286:	bf 93       	push	r27
     288:	ef 93       	push	r30
     28a:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH0, adc_get_result(&ADCA, ADC_CH0));
     28c:	40 91 24 02 	lds	r20, 0x0224	; 0x800224 <__TEXT_REGION_LENGTH__+0x700224>
     290:	50 91 25 02 	lds	r21, 0x0225	; 0x800225 <__TEXT_REGION_LENGTH__+0x700225>
     294:	e0 91 0a 21 	lds	r30, 0x210A	; 0x80210a <adca_callback>
     298:	f0 91 0b 21 	lds	r31, 0x210B	; 0x80210b <adca_callback+0x1>
     29c:	61 e0       	ldi	r22, 0x01	; 1
     29e:	80 e0       	ldi	r24, 0x00	; 0
     2a0:	92 e0       	ldi	r25, 0x02	; 2
     2a2:	09 95       	icall
}
     2a4:	ff 91       	pop	r31
     2a6:	ef 91       	pop	r30
     2a8:	bf 91       	pop	r27
     2aa:	af 91       	pop	r26
     2ac:	9f 91       	pop	r25
     2ae:	8f 91       	pop	r24
     2b0:	7f 91       	pop	r23
     2b2:	6f 91       	pop	r22
     2b4:	5f 91       	pop	r21
     2b6:	4f 91       	pop	r20
     2b8:	3f 91       	pop	r19
     2ba:	2f 91       	pop	r18
     2bc:	0f 90       	pop	r0
     2be:	0f be       	out	0x3f, r0	; 63
     2c0:	0f 90       	pop	r0
     2c2:	1f 90       	pop	r1
     2c4:	18 95       	reti

000002c6 <__vector_72>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH1_vect)
{
     2c6:	1f 92       	push	r1
     2c8:	0f 92       	push	r0
     2ca:	0f b6       	in	r0, 0x3f	; 63
     2cc:	0f 92       	push	r0
     2ce:	11 24       	eor	r1, r1
     2d0:	2f 93       	push	r18
     2d2:	3f 93       	push	r19
     2d4:	4f 93       	push	r20
     2d6:	5f 93       	push	r21
     2d8:	6f 93       	push	r22
     2da:	7f 93       	push	r23
     2dc:	8f 93       	push	r24
     2de:	9f 93       	push	r25
     2e0:	af 93       	push	r26
     2e2:	bf 93       	push	r27
     2e4:	ef 93       	push	r30
     2e6:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH1, adc_get_result(&ADCA, ADC_CH1));
     2e8:	40 91 2c 02 	lds	r20, 0x022C	; 0x80022c <__TEXT_REGION_LENGTH__+0x70022c>
     2ec:	50 91 2d 02 	lds	r21, 0x022D	; 0x80022d <__TEXT_REGION_LENGTH__+0x70022d>
     2f0:	e0 91 0a 21 	lds	r30, 0x210A	; 0x80210a <adca_callback>
     2f4:	f0 91 0b 21 	lds	r31, 0x210B	; 0x80210b <adca_callback+0x1>
     2f8:	62 e0       	ldi	r22, 0x02	; 2
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	92 e0       	ldi	r25, 0x02	; 2
     2fe:	09 95       	icall
}
     300:	ff 91       	pop	r31
     302:	ef 91       	pop	r30
     304:	bf 91       	pop	r27
     306:	af 91       	pop	r26
     308:	9f 91       	pop	r25
     30a:	8f 91       	pop	r24
     30c:	7f 91       	pop	r23
     30e:	6f 91       	pop	r22
     310:	5f 91       	pop	r21
     312:	4f 91       	pop	r20
     314:	3f 91       	pop	r19
     316:	2f 91       	pop	r18
     318:	0f 90       	pop	r0
     31a:	0f be       	out	0x3f, r0	; 63
     31c:	0f 90       	pop	r0
     31e:	1f 90       	pop	r1
     320:	18 95       	reti

00000322 <__vector_73>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH2_vect)
{
     322:	1f 92       	push	r1
     324:	0f 92       	push	r0
     326:	0f b6       	in	r0, 0x3f	; 63
     328:	0f 92       	push	r0
     32a:	11 24       	eor	r1, r1
     32c:	2f 93       	push	r18
     32e:	3f 93       	push	r19
     330:	4f 93       	push	r20
     332:	5f 93       	push	r21
     334:	6f 93       	push	r22
     336:	7f 93       	push	r23
     338:	8f 93       	push	r24
     33a:	9f 93       	push	r25
     33c:	af 93       	push	r26
     33e:	bf 93       	push	r27
     340:	ef 93       	push	r30
     342:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH2, adc_get_result(&ADCA, ADC_CH2));
     344:	40 91 34 02 	lds	r20, 0x0234	; 0x800234 <__TEXT_REGION_LENGTH__+0x700234>
     348:	50 91 35 02 	lds	r21, 0x0235	; 0x800235 <__TEXT_REGION_LENGTH__+0x700235>
     34c:	e0 91 0a 21 	lds	r30, 0x210A	; 0x80210a <adca_callback>
     350:	f0 91 0b 21 	lds	r31, 0x210B	; 0x80210b <adca_callback+0x1>
     354:	64 e0       	ldi	r22, 0x04	; 4
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	92 e0       	ldi	r25, 0x02	; 2
     35a:	09 95       	icall
}
     35c:	ff 91       	pop	r31
     35e:	ef 91       	pop	r30
     360:	bf 91       	pop	r27
     362:	af 91       	pop	r26
     364:	9f 91       	pop	r25
     366:	8f 91       	pop	r24
     368:	7f 91       	pop	r23
     36a:	6f 91       	pop	r22
     36c:	5f 91       	pop	r21
     36e:	4f 91       	pop	r20
     370:	3f 91       	pop	r19
     372:	2f 91       	pop	r18
     374:	0f 90       	pop	r0
     376:	0f be       	out	0x3f, r0	; 63
     378:	0f 90       	pop	r0
     37a:	1f 90       	pop	r1
     37c:	18 95       	reti

0000037e <__vector_74>:
 *
 * Calls the callback function that has been set for the ADC when the channel's
 * interrupt flag is set, if its interrupt has been enabled.
 */
ISR(ADCA_CH3_vect)
{
     37e:	1f 92       	push	r1
     380:	0f 92       	push	r0
     382:	0f b6       	in	r0, 0x3f	; 63
     384:	0f 92       	push	r0
     386:	11 24       	eor	r1, r1
     388:	2f 93       	push	r18
     38a:	3f 93       	push	r19
     38c:	4f 93       	push	r20
     38e:	5f 93       	push	r21
     390:	6f 93       	push	r22
     392:	7f 93       	push	r23
     394:	8f 93       	push	r24
     396:	9f 93       	push	r25
     398:	af 93       	push	r26
     39a:	bf 93       	push	r27
     39c:	ef 93       	push	r30
     39e:	ff 93       	push	r31
	adca_callback(&ADCA, ADC_CH3, adc_get_result(&ADCA, ADC_CH3));
     3a0:	40 91 3c 02 	lds	r20, 0x023C	; 0x80023c <__TEXT_REGION_LENGTH__+0x70023c>
     3a4:	50 91 3d 02 	lds	r21, 0x023D	; 0x80023d <__TEXT_REGION_LENGTH__+0x70023d>
     3a8:	e0 91 0a 21 	lds	r30, 0x210A	; 0x80210a <adca_callback>
     3ac:	f0 91 0b 21 	lds	r31, 0x210B	; 0x80210b <adca_callback+0x1>
     3b0:	68 e0       	ldi	r22, 0x08	; 8
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	92 e0       	ldi	r25, 0x02	; 2
     3b6:	09 95       	icall
}
     3b8:	ff 91       	pop	r31
     3ba:	ef 91       	pop	r30
     3bc:	bf 91       	pop	r27
     3be:	af 91       	pop	r26
     3c0:	9f 91       	pop	r25
     3c2:	8f 91       	pop	r24
     3c4:	7f 91       	pop	r23
     3c6:	6f 91       	pop	r22
     3c8:	5f 91       	pop	r21
     3ca:	4f 91       	pop	r20
     3cc:	3f 91       	pop	r19
     3ce:	2f 91       	pop	r18
     3d0:	0f 90       	pop	r0
     3d2:	0f be       	out	0x3f, r0	; 63
     3d4:	0f 90       	pop	r0
     3d6:	1f 90       	pop	r1
     3d8:	18 95       	reti

000003da <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
     3da:	fc 01       	movw	r30, r24
     3dc:	91 81       	ldd	r25, Z+1	; 0x01
     3de:	95 ff       	sbrs	r25, 5
     3e0:	fd cf       	rjmp	.-6      	; 0x3dc <usart_putchar+0x2>
     3e2:	60 83       	st	Z, r22
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	08 95       	ret

000003ea <usart_getchar>:
     3ea:	fc 01       	movw	r30, r24
     3ec:	91 81       	ldd	r25, Z+1	; 0x01
     3ee:	99 23       	and	r25, r25
     3f0:	ec f7       	brge	.-6      	; 0x3ec <usart_getchar+0x2>
     3f2:	80 81       	ld	r24, Z
     3f4:	08 95       	ret

000003f6 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
     3f6:	4f 92       	push	r4
     3f8:	5f 92       	push	r5
     3fa:	6f 92       	push	r6
     3fc:	7f 92       	push	r7
     3fe:	8f 92       	push	r8
     400:	9f 92       	push	r9
     402:	af 92       	push	r10
     404:	bf 92       	push	r11
     406:	ef 92       	push	r14
     408:	ff 92       	push	r15
     40a:	0f 93       	push	r16
     40c:	1f 93       	push	r17
     40e:	cf 93       	push	r28
     410:	7c 01       	movw	r14, r24
     412:	4a 01       	movw	r8, r20
     414:	5b 01       	movw	r10, r22
     416:	28 01       	movw	r4, r16
     418:	39 01       	movw	r6, r18
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     41a:	fc 01       	movw	r30, r24
     41c:	84 81       	ldd	r24, Z+4	; 0x04
     41e:	82 ff       	sbrs	r24, 2
     420:	16 c0       	rjmp	.+44     	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
     422:	d9 01       	movw	r26, r18
     424:	c8 01       	movw	r24, r16
     426:	68 94       	set
     428:	12 f8       	bld	r1, 2
     42a:	b6 95       	lsr	r27
     42c:	a7 95       	ror	r26
     42e:	97 95       	ror	r25
     430:	87 95       	ror	r24
     432:	16 94       	lsr	r1
     434:	d1 f7       	brne	.-12     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
     436:	b9 01       	movw	r22, r18
     438:	a8 01       	movw	r20, r16
     43a:	03 2e       	mov	r0, r19
     43c:	36 e1       	ldi	r19, 0x16	; 22
     43e:	76 95       	lsr	r23
     440:	67 95       	ror	r22
     442:	57 95       	ror	r21
     444:	47 95       	ror	r20
     446:	3a 95       	dec	r19
     448:	d1 f7       	brne	.-12     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     44a:	30 2d       	mov	r19, r0
     44c:	15 c0       	rjmp	.+42     	; 0x478 <__LOCK_REGION_LENGTH__+0x78>

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		max_rate /= 2;
     44e:	d9 01       	movw	r26, r18
     450:	c8 01       	movw	r24, r16
     452:	68 94       	set
     454:	13 f8       	bld	r1, 3
     456:	b6 95       	lsr	r27
     458:	a7 95       	ror	r26
     45a:	97 95       	ror	r25
     45c:	87 95       	ror	r24
     45e:	16 94       	lsr	r1
     460:	d1 f7       	brne	.-12     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
		min_rate /= 2;
     462:	b9 01       	movw	r22, r18
     464:	a8 01       	movw	r20, r16
     466:	03 2e       	mov	r0, r19
     468:	37 e1       	ldi	r19, 0x17	; 23
     46a:	76 95       	lsr	r23
     46c:	67 95       	ror	r22
     46e:	57 95       	ror	r21
     470:	47 95       	ror	r20
     472:	3a 95       	dec	r19
     474:	d1 f7       	brne	.-12     	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     476:	30 2d       	mov	r19, r0
	}

	if ((baud > max_rate) || (baud < min_rate)) {
     478:	88 15       	cp	r24, r8
     47a:	99 05       	cpc	r25, r9
     47c:	aa 05       	cpc	r26, r10
     47e:	bb 05       	cpc	r27, r11
     480:	08 f4       	brcc	.+2      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     482:	a6 c0       	rjmp	.+332    	; 0x5d0 <__LOCK_REGION_LENGTH__+0x1d0>
     484:	84 16       	cp	r8, r20
     486:	95 06       	cpc	r9, r21
     488:	a6 06       	cpc	r10, r22
     48a:	b7 06       	cpc	r11, r23
     48c:	08 f4       	brcc	.+2      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     48e:	a2 c0       	rjmp	.+324    	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
     490:	f7 01       	movw	r30, r14
     492:	84 81       	ldd	r24, Z+4	; 0x04
     494:	82 fd       	sbrc	r24, 2
     496:	04 c0       	rjmp	.+8      	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
		baud *= 2;
     498:	88 0c       	add	r8, r8
     49a:	99 1c       	adc	r9, r9
     49c:	aa 1c       	adc	r10, r10
     49e:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
     4a0:	c3 01       	movw	r24, r6
     4a2:	b2 01       	movw	r22, r4
     4a4:	a5 01       	movw	r20, r10
     4a6:	94 01       	movw	r18, r8
     4a8:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
     4ac:	2f 3f       	cpi	r18, 0xFF	; 255
     4ae:	31 05       	cpc	r19, r1
     4b0:	41 05       	cpc	r20, r1
     4b2:	51 05       	cpc	r21, r1
     4b4:	08 f4       	brcc	.+2      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     4b6:	90 c0       	rjmp	.+288    	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
     4b8:	8f ef       	ldi	r24, 0xFF	; 255
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	a0 e0       	ldi	r26, 0x00	; 0
     4be:	b0 e0       	ldi	r27, 0x00	; 0
     4c0:	c9 ef       	ldi	r28, 0xF9	; 249
     4c2:	05 c0       	rjmp	.+10     	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
     4c4:	28 17       	cp	r18, r24
     4c6:	39 07       	cpc	r19, r25
     4c8:	4a 07       	cpc	r20, r26
     4ca:	5b 07       	cpc	r21, r27
     4cc:	58 f0       	brcs	.+22     	; 0x4e4 <__LOCK_REGION_LENGTH__+0xe4>
			break;
		}

		limit <<= 1;
     4ce:	88 0f       	add	r24, r24
     4d0:	99 1f       	adc	r25, r25
     4d2:	aa 1f       	adc	r26, r26
     4d4:	bb 1f       	adc	r27, r27

		if (exp < -3) {
     4d6:	cd 3f       	cpi	r28, 0xFD	; 253
     4d8:	0c f4       	brge	.+2      	; 0x4dc <__LOCK_REGION_LENGTH__+0xdc>
			limit |= 1;
     4da:	81 60       	ori	r24, 0x01	; 1
     4dc:	cf 5f       	subi	r28, 0xFF	; 255

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     4de:	c7 30       	cpi	r28, 0x07	; 7
     4e0:	89 f7       	brne	.-30     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
     4e2:	4f c0       	rjmp	.+158    	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
     4e4:	cc 23       	and	r28, r28
     4e6:	0c f0       	brlt	.+2      	; 0x4ea <__LOCK_REGION_LENGTH__+0xea>
     4e8:	4c c0       	rjmp	.+152    	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     4ea:	d5 01       	movw	r26, r10
     4ec:	c4 01       	movw	r24, r8
     4ee:	88 0f       	add	r24, r24
     4f0:	99 1f       	adc	r25, r25
     4f2:	aa 1f       	adc	r26, r26
     4f4:	bb 1f       	adc	r27, r27
     4f6:	88 0f       	add	r24, r24
     4f8:	99 1f       	adc	r25, r25
     4fa:	aa 1f       	adc	r26, r26
     4fc:	bb 1f       	adc	r27, r27
     4fe:	88 0f       	add	r24, r24
     500:	99 1f       	adc	r25, r25
     502:	aa 1f       	adc	r26, r26
     504:	bb 1f       	adc	r27, r27
     506:	48 1a       	sub	r4, r24
     508:	59 0a       	sbc	r5, r25
     50a:	6a 0a       	sbc	r6, r26
     50c:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
     50e:	ce 3f       	cpi	r28, 0xFE	; 254
     510:	f4 f4       	brge	.+60     	; 0x54e <__LOCK_REGION_LENGTH__+0x14e>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
     512:	8d ef       	ldi	r24, 0xFD	; 253
     514:	9f ef       	ldi	r25, 0xFF	; 255
     516:	8c 1b       	sub	r24, r28
     518:	91 09       	sbc	r25, r1
     51a:	c7 fd       	sbrc	r28, 7
     51c:	93 95       	inc	r25
     51e:	04 c0       	rjmp	.+8      	; 0x528 <__LOCK_REGION_LENGTH__+0x128>
     520:	44 0c       	add	r4, r4
     522:	55 1c       	adc	r5, r5
     524:	66 1c       	adc	r6, r6
     526:	77 1c       	adc	r7, r7
     528:	8a 95       	dec	r24
     52a:	d2 f7       	brpl	.-12     	; 0x520 <__LOCK_REGION_LENGTH__+0x120>
     52c:	d5 01       	movw	r26, r10
     52e:	c4 01       	movw	r24, r8
     530:	b6 95       	lsr	r27
     532:	a7 95       	ror	r26
     534:	97 95       	ror	r25
     536:	87 95       	ror	r24
     538:	bc 01       	movw	r22, r24
     53a:	cd 01       	movw	r24, r26
     53c:	64 0d       	add	r22, r4
     53e:	75 1d       	adc	r23, r5
     540:	86 1d       	adc	r24, r6
     542:	97 1d       	adc	r25, r7
     544:	a5 01       	movw	r20, r10
     546:	94 01       	movw	r18, r8
     548:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__udivmodsi4>
     54c:	37 c0       	rjmp	.+110    	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
		} else {
			baud <<= exp + 3;
     54e:	83 e0       	ldi	r24, 0x03	; 3
     550:	8c 0f       	add	r24, r28
     552:	a5 01       	movw	r20, r10
     554:	94 01       	movw	r18, r8
     556:	04 c0       	rjmp	.+8      	; 0x560 <__LOCK_REGION_LENGTH__+0x160>
     558:	22 0f       	add	r18, r18
     55a:	33 1f       	adc	r19, r19
     55c:	44 1f       	adc	r20, r20
     55e:	55 1f       	adc	r21, r21
     560:	8a 95       	dec	r24
     562:	d2 f7       	brpl	.-12     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
			div = (cpu_hz + baud / 2) / baud;
     564:	da 01       	movw	r26, r20
     566:	c9 01       	movw	r24, r18
     568:	b6 95       	lsr	r27
     56a:	a7 95       	ror	r26
     56c:	97 95       	ror	r25
     56e:	87 95       	ror	r24
     570:	bc 01       	movw	r22, r24
     572:	cd 01       	movw	r24, r26
     574:	64 0d       	add	r22, r4
     576:	75 1d       	adc	r23, r5
     578:	86 1d       	adc	r24, r6
     57a:	97 1d       	adc	r25, r7
     57c:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__udivmodsi4>
     580:	1d c0       	rjmp	.+58     	; 0x5bc <__LOCK_REGION_LENGTH__+0x1bc>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
     582:	83 e0       	ldi	r24, 0x03	; 3
     584:	8c 0f       	add	r24, r28
     586:	a5 01       	movw	r20, r10
     588:	94 01       	movw	r18, r8
     58a:	04 c0       	rjmp	.+8      	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
     58c:	22 0f       	add	r18, r18
     58e:	33 1f       	adc	r19, r19
     590:	44 1f       	adc	r20, r20
     592:	55 1f       	adc	r21, r21
     594:	8a 95       	dec	r24
     596:	d2 f7       	brpl	.-12     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
		div = (cpu_hz + baud / 2) / baud - 1;
     598:	da 01       	movw	r26, r20
     59a:	c9 01       	movw	r24, r18
     59c:	b6 95       	lsr	r27
     59e:	a7 95       	ror	r26
     5a0:	97 95       	ror	r25
     5a2:	87 95       	ror	r24
     5a4:	bc 01       	movw	r22, r24
     5a6:	cd 01       	movw	r24, r26
     5a8:	64 0d       	add	r22, r4
     5aa:	75 1d       	adc	r23, r5
     5ac:	86 1d       	adc	r24, r6
     5ae:	97 1d       	adc	r25, r7
     5b0:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <__udivmodsi4>
     5b4:	21 50       	subi	r18, 0x01	; 1
     5b6:	31 09       	sbc	r19, r1
     5b8:	41 09       	sbc	r20, r1
     5ba:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
     5bc:	83 2f       	mov	r24, r19
     5be:	8f 70       	andi	r24, 0x0F	; 15
     5c0:	c2 95       	swap	r28
     5c2:	c0 7f       	andi	r28, 0xF0	; 240
     5c4:	c8 2b       	or	r28, r24
     5c6:	f7 01       	movw	r30, r14
     5c8:	c7 83       	std	Z+7, r28	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
     5ca:	26 83       	std	Z+6, r18	; 0x06

	return true;
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	18 c0       	rjmp	.+48     	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	16 c0       	rjmp	.+44     	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	14 c0       	rjmp	.+40     	; 0x600 <__LOCK_REGION_LENGTH__+0x200>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
     5d8:	d5 01       	movw	r26, r10
     5da:	c4 01       	movw	r24, r8
     5dc:	88 0f       	add	r24, r24
     5de:	99 1f       	adc	r25, r25
     5e0:	aa 1f       	adc	r26, r26
     5e2:	bb 1f       	adc	r27, r27
     5e4:	88 0f       	add	r24, r24
     5e6:	99 1f       	adc	r25, r25
     5e8:	aa 1f       	adc	r26, r26
     5ea:	bb 1f       	adc	r27, r27
     5ec:	88 0f       	add	r24, r24
     5ee:	99 1f       	adc	r25, r25
     5f0:	aa 1f       	adc	r26, r26
     5f2:	bb 1f       	adc	r27, r27
     5f4:	48 1a       	sub	r4, r24
     5f6:	59 0a       	sbc	r5, r25
     5f8:	6a 0a       	sbc	r6, r26
     5fa:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
     5fc:	c9 ef       	ldi	r28, 0xF9	; 249
     5fe:	89 cf       	rjmp	.-238    	; 0x512 <__LOCK_REGION_LENGTH__+0x112>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	0f 91       	pop	r16
     606:	ff 90       	pop	r15
     608:	ef 90       	pop	r14
     60a:	bf 90       	pop	r11
     60c:	af 90       	pop	r10
     60e:	9f 90       	pop	r9
     610:	8f 90       	pop	r8
     612:	7f 90       	pop	r7
     614:	6f 90       	pop	r6
     616:	5f 90       	pop	r5
     618:	4f 90       	pop	r4
     61a:	08 95       	ret

0000061c <usart_init_rs232>:
 *
 * \retval true if the initialization was successfull
 * \retval false if the initialization failed (error in baud rate calculation)
 */
bool usart_init_rs232(USART_t *usart, const usart_rs232_options_t *opt)
{
     61c:	0f 93       	push	r16
     61e:	1f 93       	push	r17
     620:	cf 93       	push	r28
     622:	df 93       	push	r29
     624:	ec 01       	movw	r28, r24
     626:	8b 01       	movw	r16, r22
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     628:	00 97       	sbiw	r24, 0x00	; 0
     62a:	09 f4       	brne	.+2      	; 0x62e <usart_init_rs232+0x12>
     62c:	be c0       	rjmp	.+380    	; 0x7aa <usart_init_rs232+0x18e>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     62e:	80 3c       	cpi	r24, 0xC0	; 192
     630:	91 05       	cpc	r25, r1
     632:	21 f4       	brne	.+8      	; 0x63c <usart_init_rs232+0x20>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     634:	60 e1       	ldi	r22, 0x10	; 16
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	e5 d4       	rcall	.+2506   	; 0x1004 <sysclk_enable_module>
     63a:	b7 c0       	rjmp	.+366    	; 0x7aa <usart_init_rs232+0x18e>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     63c:	c1 15       	cp	r28, r1
     63e:	84 e0       	ldi	r24, 0x04	; 4
     640:	d8 07       	cpc	r29, r24
     642:	21 f4       	brne	.+8      	; 0x64c <usart_init_rs232+0x30>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     644:	64 e0       	ldi	r22, 0x04	; 4
     646:	80 e0       	ldi	r24, 0x00	; 0
     648:	dd d4       	rcall	.+2490   	; 0x1004 <sysclk_enable_module>
     64a:	af c0       	rjmp	.+350    	; 0x7aa <usart_init_rs232+0x18e>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     64c:	c0 38       	cpi	r28, 0x80	; 128
     64e:	e1 e0       	ldi	r30, 0x01	; 1
     650:	de 07       	cpc	r29, r30
     652:	21 f4       	brne	.+8      	; 0x65c <usart_init_rs232+0x40>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     654:	62 e0       	ldi	r22, 0x02	; 2
     656:	80 e0       	ldi	r24, 0x00	; 0
     658:	d5 d4       	rcall	.+2474   	; 0x1004 <sysclk_enable_module>
     65a:	a7 c0       	rjmp	.+334    	; 0x7aa <usart_init_rs232+0x18e>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     65c:	c1 15       	cp	r28, r1
     65e:	f1 e0       	ldi	r31, 0x01	; 1
     660:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     662:	21 f4       	brne	.+8      	; 0x66c <usart_init_rs232+0x50>
     664:	61 e0       	ldi	r22, 0x01	; 1
     666:	80 e0       	ldi	r24, 0x00	; 0
     668:	cd d4       	rcall	.+2458   	; 0x1004 <sysclk_enable_module>
     66a:	9f c0       	rjmp	.+318    	; 0x7aa <usart_init_rs232+0x18e>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     66c:	c0 38       	cpi	r28, 0x80	; 128
     66e:	83 e0       	ldi	r24, 0x03	; 3
     670:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     672:	21 f4       	brne	.+8      	; 0x67c <usart_init_rs232+0x60>
     674:	61 e0       	ldi	r22, 0x01	; 1
     676:	81 e0       	ldi	r24, 0x01	; 1
     678:	c5 d4       	rcall	.+2442   	; 0x1004 <sysclk_enable_module>
     67a:	97 c0       	rjmp	.+302    	; 0x7aa <usart_init_rs232+0x18e>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     67c:	c1 15       	cp	r28, r1
     67e:	e2 e0       	ldi	r30, 0x02	; 2
     680:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     682:	21 f4       	brne	.+8      	; 0x68c <usart_init_rs232+0x70>
     684:	62 e0       	ldi	r22, 0x02	; 2
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	bd d4       	rcall	.+2426   	; 0x1004 <sysclk_enable_module>
     68a:	8f c0       	rjmp	.+286    	; 0x7aa <usart_init_rs232+0x18e>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     68c:	c0 32       	cpi	r28, 0x20	; 32
     68e:	f3 e0       	ldi	r31, 0x03	; 3
     690:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     692:	21 f4       	brne	.+8      	; 0x69c <usart_init_rs232+0x80>
     694:	64 e0       	ldi	r22, 0x04	; 4
     696:	82 e0       	ldi	r24, 0x02	; 2
     698:	b5 d4       	rcall	.+2410   	; 0x1004 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     69a:	87 c0       	rjmp	.+270    	; 0x7aa <usart_init_rs232+0x18e>
     69c:	c1 15       	cp	r28, r1
     69e:	88 e0       	ldi	r24, 0x08	; 8
     6a0:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     6a2:	21 f4       	brne	.+8      	; 0x6ac <usart_init_rs232+0x90>
     6a4:	61 e0       	ldi	r22, 0x01	; 1
     6a6:	83 e0       	ldi	r24, 0x03	; 3
     6a8:	ad d4       	rcall	.+2394   	; 0x1004 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     6aa:	7f c0       	rjmp	.+254    	; 0x7aa <usart_init_rs232+0x18e>
     6ac:	c1 15       	cp	r28, r1
     6ae:	e9 e0       	ldi	r30, 0x09	; 9
     6b0:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     6b2:	21 f4       	brne	.+8      	; 0x6bc <usart_init_rs232+0xa0>
     6b4:	61 e0       	ldi	r22, 0x01	; 1
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	a5 d4       	rcall	.+2378   	; 0x1004 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     6ba:	77 c0       	rjmp	.+238    	; 0x7aa <usart_init_rs232+0x18e>
     6bc:	c1 15       	cp	r28, r1
     6be:	fa e0       	ldi	r31, 0x0A	; 10
     6c0:	df 07       	cpc	r29, r31
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     6c2:	21 f4       	brne	.+8      	; 0x6cc <usart_init_rs232+0xb0>
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	85 e0       	ldi	r24, 0x05	; 5
     6c8:	9d d4       	rcall	.+2362   	; 0x1004 <sysclk_enable_module>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     6ca:	6f c0       	rjmp	.+222    	; 0x7aa <usart_init_rs232+0x18e>
     6cc:	c0 34       	cpi	r28, 0x40	; 64
     6ce:	88 e0       	ldi	r24, 0x08	; 8
     6d0:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     6d2:	21 f4       	brne	.+8      	; 0x6dc <usart_init_rs232+0xc0>
     6d4:	62 e0       	ldi	r22, 0x02	; 2
     6d6:	83 e0       	ldi	r24, 0x03	; 3
     6d8:	95 d4       	rcall	.+2346   	; 0x1004 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     6da:	67 c0       	rjmp	.+206    	; 0x7aa <usart_init_rs232+0x18e>
     6dc:	c0 34       	cpi	r28, 0x40	; 64
     6de:	e9 e0       	ldi	r30, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     6e0:	de 07       	cpc	r29, r30
     6e2:	21 f4       	brne	.+8      	; 0x6ec <usart_init_rs232+0xd0>
     6e4:	62 e0       	ldi	r22, 0x02	; 2
     6e6:	84 e0       	ldi	r24, 0x04	; 4
     6e8:	8d d4       	rcall	.+2330   	; 0x1004 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     6ea:	5f c0       	rjmp	.+190    	; 0x7aa <usart_init_rs232+0x18e>
     6ec:	c0 39       	cpi	r28, 0x90	; 144
     6ee:	f8 e0       	ldi	r31, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     6f0:	df 07       	cpc	r29, r31
     6f2:	21 f4       	brne	.+8      	; 0x6fc <usart_init_rs232+0xe0>
     6f4:	64 e0       	ldi	r22, 0x04	; 4
     6f6:	83 e0       	ldi	r24, 0x03	; 3
     6f8:	85 d4       	rcall	.+2314   	; 0x1004 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     6fa:	57 c0       	rjmp	.+174    	; 0x7aa <usart_init_rs232+0x18e>
     6fc:	c0 39       	cpi	r28, 0x90	; 144
     6fe:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     700:	d8 07       	cpc	r29, r24
     702:	21 f4       	brne	.+8      	; 0x70c <usart_init_rs232+0xf0>
     704:	64 e0       	ldi	r22, 0x04	; 4
     706:	84 e0       	ldi	r24, 0x04	; 4
     708:	7d d4       	rcall	.+2298   	; 0x1004 <sysclk_enable_module>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     70a:	4f c0       	rjmp	.+158    	; 0x7aa <usart_init_rs232+0x18e>
     70c:	c0 39       	cpi	r28, 0x90	; 144
     70e:	ea e0       	ldi	r30, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     710:	de 07       	cpc	r29, r30
     712:	21 f4       	brne	.+8      	; 0x71c <usart_init_rs232+0x100>
     714:	64 e0       	ldi	r22, 0x04	; 4
     716:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     718:	75 d4       	rcall	.+2282   	; 0x1004 <sysclk_enable_module>
     71a:	47 c0       	rjmp	.+142    	; 0x7aa <usart_init_rs232+0x18e>
     71c:	c0 3c       	cpi	r28, 0xC0	; 192
     71e:	f8 e0       	ldi	r31, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     720:	df 07       	cpc	r29, r31
     722:	21 f4       	brne	.+8      	; 0x72c <usart_init_rs232+0x110>
     724:	68 e0       	ldi	r22, 0x08	; 8
     726:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     728:	6d d4       	rcall	.+2266   	; 0x1004 <sysclk_enable_module>
     72a:	3f c0       	rjmp	.+126    	; 0x7aa <usart_init_rs232+0x18e>
     72c:	c0 3c       	cpi	r28, 0xC0	; 192
     72e:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     730:	d8 07       	cpc	r29, r24
     732:	21 f4       	brne	.+8      	; 0x73c <usart_init_rs232+0x120>
     734:	68 e0       	ldi	r22, 0x08	; 8
     736:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     738:	65 d4       	rcall	.+2250   	; 0x1004 <sysclk_enable_module>
     73a:	37 c0       	rjmp	.+110    	; 0x7aa <usart_init_rs232+0x18e>
     73c:	c0 3a       	cpi	r28, 0xA0	; 160
     73e:	e8 e0       	ldi	r30, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     740:	de 07       	cpc	r29, r30
     742:	21 f4       	brne	.+8      	; 0x74c <usart_init_rs232+0x130>
     744:	60 e1       	ldi	r22, 0x10	; 16
     746:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     748:	5d d4       	rcall	.+2234   	; 0x1004 <sysclk_enable_module>
     74a:	2f c0       	rjmp	.+94     	; 0x7aa <usart_init_rs232+0x18e>
     74c:	c0 3a       	cpi	r28, 0xA0	; 160
     74e:	f9 e0       	ldi	r31, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     750:	df 07       	cpc	r29, r31
     752:	21 f4       	brne	.+8      	; 0x75c <usart_init_rs232+0x140>
     754:	60 e1       	ldi	r22, 0x10	; 16
     756:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     758:	55 d4       	rcall	.+2218   	; 0x1004 <sysclk_enable_module>
     75a:	27 c0       	rjmp	.+78     	; 0x7aa <usart_init_rs232+0x18e>
     75c:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     75e:	8a e0       	ldi	r24, 0x0A	; 10
     760:	d8 07       	cpc	r29, r24
     762:	21 f4       	brne	.+8      	; 0x76c <usart_init_rs232+0x150>
     764:	60 e1       	ldi	r22, 0x10	; 16
     766:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     768:	4d d4       	rcall	.+2202   	; 0x1004 <sysclk_enable_module>
     76a:	1f c0       	rjmp	.+62     	; 0x7aa <usart_init_rs232+0x18e>
     76c:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     76e:	e8 e0       	ldi	r30, 0x08	; 8
     770:	de 07       	cpc	r29, r30
     772:	21 f4       	brne	.+8      	; 0x77c <usart_init_rs232+0x160>
     774:	60 e2       	ldi	r22, 0x20	; 32
     776:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     778:	45 d4       	rcall	.+2186   	; 0x1004 <sysclk_enable_module>
     77a:	17 c0       	rjmp	.+46     	; 0x7aa <usart_init_rs232+0x18e>
     77c:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     77e:	f9 e0       	ldi	r31, 0x09	; 9
     780:	df 07       	cpc	r29, r31
     782:	21 f4       	brne	.+8      	; 0x78c <usart_init_rs232+0x170>
     784:	60 e2       	ldi	r22, 0x20	; 32
     786:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     788:	3d d4       	rcall	.+2170   	; 0x1004 <sysclk_enable_module>
     78a:	0f c0       	rjmp	.+30     	; 0x7aa <usart_init_rs232+0x18e>
     78c:	c0 38       	cpi	r28, 0x80	; 128
     78e:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     790:	d8 07       	cpc	r29, r24
     792:	21 f4       	brne	.+8      	; 0x79c <usart_init_rs232+0x180>
     794:	60 e4       	ldi	r22, 0x40	; 64
     796:	83 e0       	ldi	r24, 0x03	; 3
     798:	35 d4       	rcall	.+2154   	; 0x1004 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     79a:	07 c0       	rjmp	.+14     	; 0x7aa <usart_init_rs232+0x18e>
     79c:	c0 3a       	cpi	r28, 0xA0	; 160
     79e:	e4 e0       	ldi	r30, 0x04	; 4
     7a0:	de 07       	cpc	r29, r30
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     7a2:	19 f4       	brne	.+6      	; 0x7aa <usart_init_rs232+0x18e>
     7a4:	60 e4       	ldi	r22, 0x40	; 64
     7a6:	85 e0       	ldi	r24, 0x05	; 5
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     7a8:	2d d4       	rcall	.+2138   	; 0x1004 <sysclk_enable_module>
     7aa:	8d 81       	ldd	r24, Y+5	; 0x05
     7ac:	8f 73       	andi	r24, 0x3F	; 63
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     7ae:	8d 83       	std	Y+5, r24	; 0x05
     7b0:	f8 01       	movw	r30, r16
     7b2:	95 81       	ldd	r25, Z+5	; 0x05
     7b4:	84 81       	ldd	r24, Z+4	; 0x04
     7b6:	89 2b       	or	r24, r25
     7b8:	96 81       	ldd	r25, Z+6	; 0x06
     7ba:	91 11       	cpse	r25, r1
     7bc:	98 e0       	ldi	r25, 0x08	; 8
     7be:	89 2b       	or	r24, r25
	bool result;
	sysclk_enable_peripheral_clock(usart);
	usart_set_mode(usart, USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(usart, opt->charlength, opt->paritytype,
			opt->stopbits);
	result = usart_set_baudrate(usart, opt->baudrate, sysclk_get_per_hz());
     7c0:	8d 83       	std	Y+5, r24	; 0x05
     7c2:	f8 01       	movw	r30, r16
     7c4:	40 81       	ld	r20, Z
     7c6:	51 81       	ldd	r21, Z+1	; 0x01
     7c8:	62 81       	ldd	r22, Z+2	; 0x02
     7ca:	73 81       	ldd	r23, Z+3	; 0x03
     7cc:	00 e0       	ldi	r16, 0x00	; 0
     7ce:	18 e4       	ldi	r17, 0x48	; 72
     7d0:	28 ee       	ldi	r18, 0xE8	; 232
     7d2:	31 e0       	ldi	r19, 0x01	; 1
     7d4:	ce 01       	movw	r24, r28
     7d6:	0f de       	rcall	.-994    	; 0x3f6 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     7d8:	9c 81       	ldd	r25, Y+4	; 0x04
     7da:	98 60       	ori	r25, 0x08	; 8
     7dc:	9c 83       	std	Y+4, r25	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     7de:	9c 81       	ldd	r25, Y+4	; 0x04
     7e0:	90 61       	ori	r25, 0x10	; 16
     7e2:	9c 83       	std	Y+4, r25	; 0x04
	usart_tx_enable(usart);
	usart_rx_enable(usart);
	
	return result;
}
     7e4:	df 91       	pop	r29
     7e6:	cf 91       	pop	r28
     7e8:	1f 91       	pop	r17
     7ea:	0f 91       	pop	r16
     7ec:	08 95       	ret

000007ee <TC0_setup>:
void TC0_setup(TC0_t* TC, enum sysclk_port_id sysclk_port, uint8_t pins_to_ctrl, bool ctrl_pins)
/*	TC: pointer to timer counter (e.g. &TCE0)
	port: pointer to port (e.g. &PORTE)
	pins_to_ctrl: bitmask where the lower nibble specifies which pins on the port should be controlled by the TC (e.g. 0b1100 for pin 2 and 3)
*/
{
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	cf 93       	push	r28
     7f6:	df 93       	push	r29
     7f8:	ec 01       	movw	r28, r24
     7fa:	f6 2e       	mov	r15, r22
     7fc:	14 2f       	mov	r17, r20
     7fe:	02 2f       	mov	r16, r18
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     800:	00 97       	sbiw	r24, 0x00	; 0
     802:	09 f4       	brne	.+2      	; 0x806 <TC0_setup+0x18>
     804:	be c0       	rjmp	.+380    	; 0x982 <TC0_setup+0x194>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     806:	80 3c       	cpi	r24, 0xC0	; 192
     808:	91 05       	cpc	r25, r1
     80a:	21 f4       	brne	.+8      	; 0x814 <TC0_setup+0x26>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     80c:	60 e1       	ldi	r22, 0x10	; 16
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	f9 d3       	rcall	.+2034   	; 0x1004 <sysclk_enable_module>
     812:	b7 c0       	rjmp	.+366    	; 0x982 <TC0_setup+0x194>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     814:	c1 15       	cp	r28, r1
     816:	84 e0       	ldi	r24, 0x04	; 4
     818:	d8 07       	cpc	r29, r24
     81a:	21 f4       	brne	.+8      	; 0x824 <TC0_setup+0x36>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     81c:	64 e0       	ldi	r22, 0x04	; 4
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	f1 d3       	rcall	.+2018   	; 0x1004 <sysclk_enable_module>
     822:	af c0       	rjmp	.+350    	; 0x982 <TC0_setup+0x194>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     824:	c0 38       	cpi	r28, 0x80	; 128
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	d8 07       	cpc	r29, r24
     82a:	21 f4       	brne	.+8      	; 0x834 <TC0_setup+0x46>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     82c:	62 e0       	ldi	r22, 0x02	; 2
     82e:	80 e0       	ldi	r24, 0x00	; 0
     830:	e9 d3       	rcall	.+2002   	; 0x1004 <sysclk_enable_module>
     832:	a7 c0       	rjmp	.+334    	; 0x982 <TC0_setup+0x194>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     834:	c1 15       	cp	r28, r1
     836:	81 e0       	ldi	r24, 0x01	; 1
     838:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     83a:	21 f4       	brne	.+8      	; 0x844 <TC0_setup+0x56>
     83c:	61 e0       	ldi	r22, 0x01	; 1
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	e1 d3       	rcall	.+1986   	; 0x1004 <sysclk_enable_module>
     842:	9f c0       	rjmp	.+318    	; 0x982 <TC0_setup+0x194>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     844:	c0 38       	cpi	r28, 0x80	; 128
     846:	83 e0       	ldi	r24, 0x03	; 3
     848:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     84a:	21 f4       	brne	.+8      	; 0x854 <TC0_setup+0x66>
     84c:	61 e0       	ldi	r22, 0x01	; 1
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	d9 d3       	rcall	.+1970   	; 0x1004 <sysclk_enable_module>
     852:	97 c0       	rjmp	.+302    	; 0x982 <TC0_setup+0x194>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     854:	c1 15       	cp	r28, r1
     856:	82 e0       	ldi	r24, 0x02	; 2
     858:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     85a:	21 f4       	brne	.+8      	; 0x864 <TC0_setup+0x76>
     85c:	62 e0       	ldi	r22, 0x02	; 2
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	d1 d3       	rcall	.+1954   	; 0x1004 <sysclk_enable_module>
     862:	8f c0       	rjmp	.+286    	; 0x982 <TC0_setup+0x194>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     864:	c0 32       	cpi	r28, 0x20	; 32
     866:	83 e0       	ldi	r24, 0x03	; 3
     868:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     86a:	21 f4       	brne	.+8      	; 0x874 <TC0_setup+0x86>
     86c:	64 e0       	ldi	r22, 0x04	; 4
     86e:	82 e0       	ldi	r24, 0x02	; 2
     870:	c9 d3       	rcall	.+1938   	; 0x1004 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     872:	87 c0       	rjmp	.+270    	; 0x982 <TC0_setup+0x194>
     874:	c1 15       	cp	r28, r1
     876:	88 e0       	ldi	r24, 0x08	; 8
     878:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     87a:	21 f4       	brne	.+8      	; 0x884 <TC0_setup+0x96>
     87c:	61 e0       	ldi	r22, 0x01	; 1
     87e:	83 e0       	ldi	r24, 0x03	; 3
     880:	c1 d3       	rcall	.+1922   	; 0x1004 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     882:	7f c0       	rjmp	.+254    	; 0x982 <TC0_setup+0x194>
     884:	c1 15       	cp	r28, r1
     886:	89 e0       	ldi	r24, 0x09	; 9
     888:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     88a:	21 f4       	brne	.+8      	; 0x894 <TC0_setup+0xa6>
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	84 e0       	ldi	r24, 0x04	; 4
     890:	b9 d3       	rcall	.+1906   	; 0x1004 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     892:	77 c0       	rjmp	.+238    	; 0x982 <TC0_setup+0x194>
     894:	c1 15       	cp	r28, r1
     896:	8a e0       	ldi	r24, 0x0A	; 10
     898:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     89a:	21 f4       	brne	.+8      	; 0x8a4 <TC0_setup+0xb6>
     89c:	61 e0       	ldi	r22, 0x01	; 1
     89e:	85 e0       	ldi	r24, 0x05	; 5
     8a0:	b1 d3       	rcall	.+1890   	; 0x1004 <sysclk_enable_module>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     8a2:	6f c0       	rjmp	.+222    	; 0x982 <TC0_setup+0x194>
     8a4:	c0 34       	cpi	r28, 0x40	; 64
     8a6:	88 e0       	ldi	r24, 0x08	; 8
     8a8:	d8 07       	cpc	r29, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     8aa:	21 f4       	brne	.+8      	; 0x8b4 <TC0_setup+0xc6>
     8ac:	62 e0       	ldi	r22, 0x02	; 2
     8ae:	83 e0       	ldi	r24, 0x03	; 3
     8b0:	a9 d3       	rcall	.+1874   	; 0x1004 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     8b2:	67 c0       	rjmp	.+206    	; 0x982 <TC0_setup+0x194>
     8b4:	c0 34       	cpi	r28, 0x40	; 64
     8b6:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     8b8:	d8 07       	cpc	r29, r24
     8ba:	21 f4       	brne	.+8      	; 0x8c4 <TC0_setup+0xd6>
     8bc:	62 e0       	ldi	r22, 0x02	; 2
     8be:	84 e0       	ldi	r24, 0x04	; 4
     8c0:	a1 d3       	rcall	.+1858   	; 0x1004 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     8c2:	5f c0       	rjmp	.+190    	; 0x982 <TC0_setup+0x194>
     8c4:	c0 39       	cpi	r28, 0x90	; 144
     8c6:	88 e0       	ldi	r24, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     8c8:	d8 07       	cpc	r29, r24
     8ca:	21 f4       	brne	.+8      	; 0x8d4 <TC0_setup+0xe6>
     8cc:	64 e0       	ldi	r22, 0x04	; 4
     8ce:	83 e0       	ldi	r24, 0x03	; 3
     8d0:	99 d3       	rcall	.+1842   	; 0x1004 <sysclk_enable_module>
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     8d2:	57 c0       	rjmp	.+174    	; 0x982 <TC0_setup+0x194>
     8d4:	c0 39       	cpi	r28, 0x90	; 144
     8d6:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     8d8:	d8 07       	cpc	r29, r24
     8da:	21 f4       	brne	.+8      	; 0x8e4 <TC0_setup+0xf6>
     8dc:	64 e0       	ldi	r22, 0x04	; 4
     8de:	84 e0       	ldi	r24, 0x04	; 4
     8e0:	91 d3       	rcall	.+1826   	; 0x1004 <sysclk_enable_module>
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     8e2:	4f c0       	rjmp	.+158    	; 0x982 <TC0_setup+0x194>
     8e4:	c0 39       	cpi	r28, 0x90	; 144
     8e6:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     8e8:	d8 07       	cpc	r29, r24
     8ea:	21 f4       	brne	.+8      	; 0x8f4 <TC0_setup+0x106>
     8ec:	64 e0       	ldi	r22, 0x04	; 4
     8ee:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     8f0:	89 d3       	rcall	.+1810   	; 0x1004 <sysclk_enable_module>
     8f2:	47 c0       	rjmp	.+142    	; 0x982 <TC0_setup+0x194>
     8f4:	c0 3c       	cpi	r28, 0xC0	; 192
     8f6:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     8f8:	d8 07       	cpc	r29, r24
     8fa:	21 f4       	brne	.+8      	; 0x904 <TC0_setup+0x116>
     8fc:	68 e0       	ldi	r22, 0x08	; 8
     8fe:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     900:	81 d3       	rcall	.+1794   	; 0x1004 <sysclk_enable_module>
     902:	3f c0       	rjmp	.+126    	; 0x982 <TC0_setup+0x194>
     904:	c0 3c       	cpi	r28, 0xC0	; 192
     906:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     908:	d8 07       	cpc	r29, r24
     90a:	21 f4       	brne	.+8      	; 0x914 <TC0_setup+0x126>
     90c:	68 e0       	ldi	r22, 0x08	; 8
     90e:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     910:	79 d3       	rcall	.+1778   	; 0x1004 <sysclk_enable_module>
     912:	37 c0       	rjmp	.+110    	; 0x982 <TC0_setup+0x194>
     914:	c0 3a       	cpi	r28, 0xA0	; 160
     916:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     918:	d8 07       	cpc	r29, r24
     91a:	21 f4       	brne	.+8      	; 0x924 <TC0_setup+0x136>
     91c:	60 e1       	ldi	r22, 0x10	; 16
     91e:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     920:	71 d3       	rcall	.+1762   	; 0x1004 <sysclk_enable_module>
     922:	2f c0       	rjmp	.+94     	; 0x982 <TC0_setup+0x194>
     924:	c0 3a       	cpi	r28, 0xA0	; 160
     926:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     928:	d8 07       	cpc	r29, r24
     92a:	21 f4       	brne	.+8      	; 0x934 <TC0_setup+0x146>
     92c:	60 e1       	ldi	r22, 0x10	; 16
     92e:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     930:	69 d3       	rcall	.+1746   	; 0x1004 <sysclk_enable_module>
     932:	27 c0       	rjmp	.+78     	; 0x982 <TC0_setup+0x194>
     934:	c0 3a       	cpi	r28, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     936:	8a e0       	ldi	r24, 0x0A	; 10
     938:	d8 07       	cpc	r29, r24
     93a:	21 f4       	brne	.+8      	; 0x944 <TC0_setup+0x156>
     93c:	60 e1       	ldi	r22, 0x10	; 16
     93e:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     940:	61 d3       	rcall	.+1730   	; 0x1004 <sysclk_enable_module>
     942:	1f c0       	rjmp	.+62     	; 0x982 <TC0_setup+0x194>
     944:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     946:	88 e0       	ldi	r24, 0x08	; 8
     948:	d8 07       	cpc	r29, r24
     94a:	21 f4       	brne	.+8      	; 0x954 <TC0_setup+0x166>
     94c:	60 e2       	ldi	r22, 0x20	; 32
     94e:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     950:	59 d3       	rcall	.+1714   	; 0x1004 <sysclk_enable_module>
     952:	17 c0       	rjmp	.+46     	; 0x982 <TC0_setup+0x194>
     954:	c0 3b       	cpi	r28, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     956:	89 e0       	ldi	r24, 0x09	; 9
     958:	d8 07       	cpc	r29, r24
     95a:	21 f4       	brne	.+8      	; 0x964 <TC0_setup+0x176>
     95c:	60 e2       	ldi	r22, 0x20	; 32
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     95e:	84 e0       	ldi	r24, 0x04	; 4
     960:	51 d3       	rcall	.+1698   	; 0x1004 <sysclk_enable_module>
     962:	0f c0       	rjmp	.+30     	; 0x982 <TC0_setup+0x194>
     964:	c0 38       	cpi	r28, 0x80	; 128
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     966:	84 e0       	ldi	r24, 0x04	; 4
     968:	d8 07       	cpc	r29, r24
     96a:	21 f4       	brne	.+8      	; 0x974 <TC0_setup+0x186>
     96c:	60 e4       	ldi	r22, 0x40	; 64
     96e:	83 e0       	ldi	r24, 0x03	; 3
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     970:	49 d3       	rcall	.+1682   	; 0x1004 <sysclk_enable_module>
     972:	07 c0       	rjmp	.+14     	; 0x982 <TC0_setup+0x194>
     974:	c0 3a       	cpi	r28, 0xA0	; 160
     976:	84 e0       	ldi	r24, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     978:	d8 07       	cpc	r29, r24
     97a:	19 f4       	brne	.+6      	; 0x982 <TC0_setup+0x194>
     97c:	60 e4       	ldi	r22, 0x40	; 64
     97e:	85 e0       	ldi	r24, 0x05	; 5
	sysclk_enable_peripheral_clock(TC);
	sysclk_enable_module(sysclk_port, SYSCLK_HIRES);
     980:	41 d3       	rcall	.+1666   	; 0x1004 <sysclk_enable_module>
     982:	64 e0       	ldi	r22, 0x04	; 4
     984:	8f 2d       	mov	r24, r15
     986:	3e d3       	rcall	.+1660   	; 0x1004 <sysclk_enable_module>
	
	TC->CTRLA = 0b00000111;
     988:	87 e0       	ldi	r24, 0x07	; 7
     98a:	88 83       	st	Y, r24
	if (ctrl_pins)
     98c:	00 23       	and	r16, r16
     98e:	39 f0       	breq	.+14     	; 0x99e <TC0_setup+0x1b0>
	{
		TC->CTRLB = (pins_to_ctrl << 4) | 0b0011; //Control the user-specified pins, and set to single-slope PWM
     990:	80 e1       	ldi	r24, 0x10	; 16
     992:	18 9f       	mul	r17, r24
     994:	a0 01       	movw	r20, r0
     996:	11 24       	eor	r1, r1
     998:	43 60       	ori	r20, 0x03	; 3
     99a:	49 83       	std	Y+1, r20	; 0x01
     99c:	01 c0       	rjmp	.+2      	; 0x9a0 <TC0_setup+0x1b2>
	}
	else
	{
		TC->CTRLB = 0x0;
     99e:	19 82       	std	Y+1, r1	; 0x01
	}
}
     9a0:	df 91       	pop	r29
     9a2:	cf 91       	pop	r28
     9a4:	1f 91       	pop	r17
     9a6:	0f 91       	pop	r16
     9a8:	ff 90       	pop	r15
     9aa:	08 95       	ret

000009ac <TC_config>:
void TC_config(TC0_t* TC, float freq, float duty)
/*	TC: pointer to timer counter (e.g. &TCE0)
	freq: frequency as a float (e.g. 0.75)
	duty: duty cycle for all controlled pins
*/
{
     9ac:	cf 92       	push	r12
     9ae:	df 92       	push	r13
     9b0:	ef 92       	push	r14
     9b2:	ff 92       	push	r15
     9b4:	0f 93       	push	r16
     9b6:	1f 93       	push	r17
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	ec 01       	movw	r28, r24
     9be:	cb 01       	movw	r24, r22
     9c0:	ba 01       	movw	r22, r20
     9c2:	68 01       	movw	r12, r16
     9c4:	79 01       	movw	r14, r18
	TC->PER = (uint16_t)(fclk / (PRESCALER * freq) - 1.0f);
     9c6:	20 e0       	ldi	r18, 0x00	; 0
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	40 e8       	ldi	r20, 0x80	; 128
     9cc:	54 e4       	ldi	r21, 0x44	; 68
     9ce:	7e d7       	rcall	.+3836   	; 0x18cc <__mulsf3>
     9d0:	9b 01       	movw	r18, r22
     9d2:	ac 01       	movw	r20, r24
     9d4:	60 e0       	ldi	r22, 0x00	; 0
     9d6:	74 e2       	ldi	r23, 0x24	; 36
     9d8:	84 ef       	ldi	r24, 0xF4	; 244
     9da:	9b e4       	ldi	r25, 0x4B	; 75
     9dc:	55 d6       	rcall	.+3242   	; 0x1688 <__divsf3>
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	40 e8       	ldi	r20, 0x80	; 128
     9e4:	5f e3       	ldi	r21, 0x3F	; 63
     9e6:	eb d5       	rcall	.+3030   	; 0x15be <__subsf3>
     9e8:	b7 d6       	rcall	.+3438   	; 0x1758 <__fixunssfsi>
     9ea:	6e a3       	std	Y+38, r22	; 0x26
     9ec:	7f a3       	std	Y+39, r23	; 0x27
	TC->CCA = (uint16_t)(duty * (float)TC->PER);
     9ee:	6e a1       	ldd	r22, Y+38	; 0x26
     9f0:	7f a1       	ldd	r23, Y+39	; 0x27
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	dc d6       	rcall	.+3512   	; 0x17b0 <__floatunsisf>
     9f8:	a7 01       	movw	r20, r14
     9fa:	96 01       	movw	r18, r12
     9fc:	67 d7       	rcall	.+3790   	; 0x18cc <__mulsf3>
     9fe:	ac d6       	rcall	.+3416   	; 0x1758 <__fixunssfsi>
     a00:	68 a7       	std	Y+40, r22	; 0x28
     a02:	79 a7       	std	Y+41, r23	; 0x29
	TC->CCB = TC->CCA;
     a04:	88 a5       	ldd	r24, Y+40	; 0x28
     a06:	99 a5       	ldd	r25, Y+41	; 0x29
     a08:	8a a7       	std	Y+42, r24	; 0x2a
     a0a:	9b a7       	std	Y+43, r25	; 0x2b
	TC->CCC = TC->CCA;
     a0c:	88 a5       	ldd	r24, Y+40	; 0x28
     a0e:	99 a5       	ldd	r25, Y+41	; 0x29
     a10:	8c a7       	std	Y+44, r24	; 0x2c
     a12:	9d a7       	std	Y+45, r25	; 0x2d
	TC->CCD = TC->CCA;
     a14:	88 a5       	ldd	r24, Y+40	; 0x28
     a16:	99 a5       	ldd	r25, Y+41	; 0x29
     a18:	8e a7       	std	Y+46, r24	; 0x2e
     a1a:	9f a7       	std	Y+47, r25	; 0x2f
     a1c:	df 91       	pop	r29
     a1e:	cf 91       	pop	r28
     a20:	1f 91       	pop	r17
     a22:	0f 91       	pop	r16
     a24:	ff 90       	pop	r15
     a26:	ef 90       	pop	r14
     a28:	df 90       	pop	r13
     a2a:	cf 90       	pop	r12
     a2c:	08 95       	ret

00000a2e <usart_serial_getchar>:
 * \param usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if usart, uint8_t *data)
{
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	eb 01       	movw	r28, r22
	*data = usart_getchar(usart);
     a34:	da dc       	rcall	.-1612   	; 0x3ea <usart_getchar>
     a36:	88 83       	st	Y, r24
}
     a38:	df 91       	pop	r29
     a3a:	cf 91       	pop	r28
     a3c:	08 95       	ret

00000a3e <usart_serial_putchar>:
 *
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(usart_if usart, uint8_t c)
{
	return usart_putchar(usart, c);
     a3e:	cd cc       	rjmp	.-1638   	; 0x3da <usart_putchar>
}
     a40:	08 95       	ret

00000a42 <UART_computer_init>:

void UART_computer_init(USART_t* comms_usart, PORT_t* comms_port, ioport_pin_t tx_pin, ioport_pin_t rx_pin)
/* This sets up the UART pins that are used by the XBee (if plugged into a one month board), and by the computer during debugging
Call during startup.
Based on Adam's code template for one month, but with RX pin configuration. */
{
     a42:	cf 92       	push	r12
     a44:	df 92       	push	r13
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	cf 93       	push	r28
     a4e:	df 93       	push	r29
     a50:	cd b7       	in	r28, 0x3d	; 61
     a52:	de b7       	in	r29, 0x3e	; 62
     a54:	27 97       	sbiw	r28, 0x07	; 7
     a56:	cd bf       	out	0x3d, r28	; 61
     a58:	de bf       	out	0x3e, r29	; 62
     a5a:	8c 01       	movw	r16, r24
     a5c:	f2 2e       	mov	r15, r18
 * \param flags Bitmask of flags specifying additional configuration
 * parameters.
 */
static inline void ioport_configure_pin(port_pin_t pin, port_pin_flags_t flags)
{
	ioport_configure_port_pin(arch_ioport_pin_to_base(pin),
     a5e:	84 2f       	mov	r24, r20
     a60:	87 70       	andi	r24, 0x07	; 7
     a62:	cc 24       	eor	r12, r12
     a64:	c3 94       	inc	r12
     a66:	d1 2c       	mov	r13, r1
     a68:	b6 01       	movw	r22, r12
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <UART_computer_init+0x2e>
     a6c:	66 0f       	add	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	e2 f7       	brpl	.-8      	; 0xa6c <UART_computer_init+0x2a>
     a74:	46 95       	lsr	r20
     a76:	46 95       	lsr	r20
     a78:	46 95       	lsr	r20
     a7a:	20 e2       	ldi	r18, 0x20	; 32
     a7c:	42 9f       	mul	r20, r18
     a7e:	c0 01       	movw	r24, r0
     a80:	11 24       	eor	r1, r1
     a82:	41 e0       	ldi	r20, 0x01	; 1
     a84:	50 e0       	ldi	r21, 0x00	; 0
     a86:	9a 5f       	subi	r25, 0xFA	; 250
     a88:	62 d2       	rcall	.+1220   	; 0xf4e <ioport_configure_port_pin>
     a8a:	8f 2d       	mov	r24, r15
     a8c:	87 70       	andi	r24, 0x07	; 7
     a8e:	b6 01       	movw	r22, r12
     a90:	02 c0       	rjmp	.+4      	; 0xa96 <UART_computer_init+0x54>
     a92:	66 0f       	add	r22, r22
     a94:	77 1f       	adc	r23, r23
     a96:	8a 95       	dec	r24
     a98:	e2 f7       	brpl	.-8      	; 0xa92 <UART_computer_init+0x50>
     a9a:	f6 94       	lsr	r15
     a9c:	f6 94       	lsr	r15
     a9e:	f6 94       	lsr	r15
     aa0:	20 e2       	ldi	r18, 0x20	; 32
     aa2:	f2 9e       	mul	r15, r18
     aa4:	c0 01       	movw	r24, r0
     aa6:	11 24       	eor	r1, r1
     aa8:	40 e0       	ldi	r20, 0x00	; 0
     aaa:	50 e0       	ldi	r21, 0x00	; 0
     aac:	9a 5f       	subi	r25, 0xFA	; 250
     aae:	4f d2       	rcall	.+1182   	; 0xf4e <ioport_configure_port_pin>
 *
 * \param module Pointer to the module's base address.
 */
static inline void sysclk_enable_peripheral_clock(const volatile void *module)
{
	if (module == NULL) {
     ab0:	01 15       	cp	r16, r1
     ab2:	11 05       	cpc	r17, r1
     ab4:	09 f4       	brne	.+2      	; 0xab8 <UART_computer_init+0x76>
     ab6:	3e c1       	rjmp	.+636    	; 0xd34 <UART_computer_init+0x2f2>
		Assert(false);
	}
#ifdef AES
	else if (module == &AES) {
     ab8:	00 3c       	cpi	r16, 0xC0	; 192
     aba:	11 05       	cpc	r17, r1
     abc:	21 f4       	brne	.+8      	; 0xac6 <UART_computer_init+0x84>
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_AES);
     abe:	60 e1       	ldi	r22, 0x10	; 16
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	a0 d2       	rcall	.+1344   	; 0x1004 <sysclk_enable_module>
     ac4:	37 c1       	rjmp	.+622    	; 0xd34 <UART_computer_init+0x2f2>
	else if (module == &EBI) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EBI);
	}
#endif
#ifdef RTC
	else if (module == &RTC) {
     ac6:	01 15       	cp	r16, r1
     ac8:	84 e0       	ldi	r24, 0x04	; 4
     aca:	18 07       	cpc	r17, r24
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_RTC);
     acc:	21 f4       	brne	.+8      	; 0xad6 <UART_computer_init+0x94>
     ace:	64 e0       	ldi	r22, 0x04	; 4
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	98 d2       	rcall	.+1328   	; 0x1004 <sysclk_enable_module>
     ad4:	2f c1       	rjmp	.+606    	; 0xd34 <UART_computer_init+0x2f2>
	}
#endif
#ifdef EVSYS
	else if (module == &EVSYS) {
     ad6:	00 38       	cpi	r16, 0x80	; 128
     ad8:	21 e0       	ldi	r18, 0x01	; 1
     ada:	12 07       	cpc	r17, r18
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EVSYS);
     adc:	21 f4       	brne	.+8      	; 0xae6 <UART_computer_init+0xa4>
     ade:	62 e0       	ldi	r22, 0x02	; 2
     ae0:	80 e0       	ldi	r24, 0x00	; 0
     ae2:	90 d2       	rcall	.+1312   	; 0x1004 <sysclk_enable_module>
     ae4:	27 c1       	rjmp	.+590    	; 0xd34 <UART_computer_init+0x2f2>
	}
#endif
#ifdef DMA
	else if (module == &DMA) {
     ae6:	01 15       	cp	r16, r1
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	18 07       	cpc	r17, r24
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_DMA);
     aec:	21 f4       	brne	.+8      	; 0xaf6 <UART_computer_init+0xb4>
     aee:	61 e0       	ldi	r22, 0x01	; 1
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	88 d2       	rcall	.+1296   	; 0x1004 <sysclk_enable_module>
     af4:	1f c1       	rjmp	.+574    	; 0xd34 <UART_computer_init+0x2f2>
	else if (module == &EDMA) {
		sysclk_enable_module(SYSCLK_PORT_GEN, SYSCLK_EDMA);
	}
#endif
#ifdef ACA
	else if (module == &ACA) {
     af6:	00 38       	cpi	r16, 0x80	; 128
     af8:	23 e0       	ldi	r18, 0x03	; 3
     afa:	12 07       	cpc	r17, r18
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_AC);
     afc:	21 f4       	brne	.+8      	; 0xb06 <UART_computer_init+0xc4>
     afe:	61 e0       	ldi	r22, 0x01	; 1
     b00:	81 e0       	ldi	r24, 0x01	; 1
     b02:	80 d2       	rcall	.+1280   	; 0x1004 <sysclk_enable_module>
	else if (module == &ACB) {
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_AC);
	}
#endif
#ifdef ADCA
	else if (module == &ADCA) {
     b04:	17 c1       	rjmp	.+558    	; 0xd34 <UART_computer_init+0x2f2>
     b06:	01 15       	cp	r16, r1
     b08:	82 e0       	ldi	r24, 0x02	; 2
     b0a:	18 07       	cpc	r17, r24
		sysclk_enable_module(SYSCLK_PORT_A, SYSCLK_ADC);
     b0c:	21 f4       	brne	.+8      	; 0xb16 <UART_computer_init+0xd4>
     b0e:	62 e0       	ldi	r22, 0x02	; 2
     b10:	81 e0       	ldi	r24, 0x01	; 1
     b12:	78 d2       	rcall	.+1264   	; 0x1004 <sysclk_enable_module>
	}
#endif
// Workaround for bad XMEGA D header file
#if !XMEGA_D
#ifdef DACB
	else if (module == &DACB) {
     b14:	0f c1       	rjmp	.+542    	; 0xd34 <UART_computer_init+0x2f2>
     b16:	00 32       	cpi	r16, 0x20	; 32
     b18:	23 e0       	ldi	r18, 0x03	; 3
     b1a:	12 07       	cpc	r17, r18
		sysclk_enable_module(SYSCLK_PORT_B, SYSCLK_DAC);
     b1c:	21 f4       	brne	.+8      	; 0xb26 <UART_computer_init+0xe4>
     b1e:	64 e0       	ldi	r22, 0x04	; 4
     b20:	82 e0       	ldi	r24, 0x02	; 2
     b22:	70 d2       	rcall	.+1248   	; 0x1004 <sysclk_enable_module>
	}
#endif
#endif // Workaround end
#ifdef TCC0
	else if (module == &TCC0) {
     b24:	07 c1       	rjmp	.+526    	; 0xd34 <UART_computer_init+0x2f2>
     b26:	01 15       	cp	r16, r1
     b28:	88 e0       	ldi	r24, 0x08	; 8
     b2a:	18 07       	cpc	r17, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
     b2c:	21 f4       	brne	.+8      	; 0xb36 <UART_computer_init+0xf4>
     b2e:	61 e0       	ldi	r22, 0x01	; 1
     b30:	83 e0       	ldi	r24, 0x03	; 3
     b32:	68 d2       	rcall	.+1232   	; 0x1004 <sysclk_enable_module>
	}
#endif
#ifdef TCD0
	else if (module == &TCD0) {
     b34:	ff c0       	rjmp	.+510    	; 0xd34 <UART_computer_init+0x2f2>
     b36:	01 15       	cp	r16, r1
     b38:	29 e0       	ldi	r18, 0x09	; 9
     b3a:	12 07       	cpc	r17, r18
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
     b3c:	21 f4       	brne	.+8      	; 0xb46 <UART_computer_init+0x104>
     b3e:	61 e0       	ldi	r22, 0x01	; 1
     b40:	84 e0       	ldi	r24, 0x04	; 4
     b42:	60 d2       	rcall	.+1216   	; 0x1004 <sysclk_enable_module>
	}
#endif
#ifdef TCE0
	else if (module == &TCE0) {
     b44:	f7 c0       	rjmp	.+494    	; 0xd34 <UART_computer_init+0x2f2>
     b46:	01 15       	cp	r16, r1
     b48:	8a e0       	ldi	r24, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
     b4a:	18 07       	cpc	r17, r24
     b4c:	21 f4       	brne	.+8      	; 0xb56 <UART_computer_init+0x114>
     b4e:	61 e0       	ldi	r22, 0x01	; 1
     b50:	85 e0       	ldi	r24, 0x05	; 5
     b52:	58 d2       	rcall	.+1200   	; 0x1004 <sysclk_enable_module>
	else if (module == &TCF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_TC0);
	}
#endif
#ifdef TCC1
	else if (module == &TCC1) {
     b54:	ef c0       	rjmp	.+478    	; 0xd34 <UART_computer_init+0x2f2>
     b56:	00 34       	cpi	r16, 0x40	; 64
     b58:	28 e0       	ldi	r18, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
     b5a:	12 07       	cpc	r17, r18
     b5c:	21 f4       	brne	.+8      	; 0xb66 <UART_computer_init+0x124>
     b5e:	62 e0       	ldi	r22, 0x02	; 2
     b60:	83 e0       	ldi	r24, 0x03	; 3
     b62:	50 d2       	rcall	.+1184   	; 0x1004 <sysclk_enable_module>
	}
#endif
#ifdef TCD1
	else if (module == &TCD1) {
     b64:	e7 c0       	rjmp	.+462    	; 0xd34 <UART_computer_init+0x2f2>
     b66:	00 34       	cpi	r16, 0x40	; 64
     b68:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
     b6a:	18 07       	cpc	r17, r24
     b6c:	21 f4       	brne	.+8      	; 0xb76 <UART_computer_init+0x134>
     b6e:	62 e0       	ldi	r22, 0x02	; 2
     b70:	84 e0       	ldi	r24, 0x04	; 4
     b72:	48 d2       	rcall	.+1168   	; 0x1004 <sysclk_enable_module>
	else if (module == &TCD5) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC5);
	}
#endif
#ifdef HIRESC
	else if (module == &HIRESC) {
     b74:	df c0       	rjmp	.+446    	; 0xd34 <UART_computer_init+0x2f2>
     b76:	00 39       	cpi	r16, 0x90	; 144
     b78:	28 e0       	ldi	r18, 0x08	; 8
			sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
     b7a:	12 07       	cpc	r17, r18
     b7c:	21 f4       	brne	.+8      	; 0xb86 <UART_computer_init+0x144>
     b7e:	64 e0       	ldi	r22, 0x04	; 4
     b80:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef HIRESD
	else if (module == &HIRESD) {
     b82:	40 d2       	rcall	.+1152   	; 0x1004 <sysclk_enable_module>
     b84:	d7 c0       	rjmp	.+430    	; 0xd34 <UART_computer_init+0x2f2>
     b86:	00 39       	cpi	r16, 0x90	; 144
     b88:	89 e0       	ldi	r24, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
     b8a:	18 07       	cpc	r17, r24
     b8c:	21 f4       	brne	.+8      	; 0xb96 <UART_computer_init+0x154>
     b8e:	64 e0       	ldi	r22, 0x04	; 4
     b90:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef HIRESE
	else if (module == &HIRESE) {
     b92:	38 d2       	rcall	.+1136   	; 0x1004 <sysclk_enable_module>
     b94:	cf c0       	rjmp	.+414    	; 0xd34 <UART_computer_init+0x2f2>
     b96:	00 39       	cpi	r16, 0x90	; 144
     b98:	2a e0       	ldi	r18, 0x0A	; 10
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
     b9a:	12 07       	cpc	r17, r18
     b9c:	21 f4       	brne	.+8      	; 0xba6 <UART_computer_init+0x164>
     b9e:	64 e0       	ldi	r22, 0x04	; 4
     ba0:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &HIRESF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_HIRES);
	}
#endif
#ifdef SPIC
	else if (module == &SPIC) {
     ba2:	30 d2       	rcall	.+1120   	; 0x1004 <sysclk_enable_module>
     ba4:	c7 c0       	rjmp	.+398    	; 0xd34 <UART_computer_init+0x2f2>
     ba6:	00 3c       	cpi	r16, 0xC0	; 192
     ba8:	88 e0       	ldi	r24, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_SPI);
     baa:	18 07       	cpc	r17, r24
     bac:	21 f4       	brne	.+8      	; 0xbb6 <UART_computer_init+0x174>
     bae:	68 e0       	ldi	r22, 0x08	; 8
     bb0:	83 e0       	ldi	r24, 0x03	; 3
	}
#endif
#ifdef SPID
	else if (module == &SPID) {
     bb2:	28 d2       	rcall	.+1104   	; 0x1004 <sysclk_enable_module>
     bb4:	bf c0       	rjmp	.+382    	; 0xd34 <UART_computer_init+0x2f2>
     bb6:	00 3c       	cpi	r16, 0xC0	; 192
     bb8:	29 e0       	ldi	r18, 0x09	; 9
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_SPI);
     bba:	12 07       	cpc	r17, r18
     bbc:	21 f4       	brne	.+8      	; 0xbc6 <UART_computer_init+0x184>
     bbe:	68 e0       	ldi	r22, 0x08	; 8
     bc0:	84 e0       	ldi	r24, 0x04	; 4
     bc2:	20 d2       	rcall	.+1088   	; 0x1004 <sysclk_enable_module>
	else if (module == &SPIF) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_SPI);
	}
#endif
#ifdef USARTC0
	else if (module == &USARTC0) {
     bc4:	b7 c0       	rjmp	.+366    	; 0xd34 <UART_computer_init+0x2f2>
     bc6:	00 3a       	cpi	r16, 0xA0	; 160
     bc8:	88 e0       	ldi	r24, 0x08	; 8
     bca:	18 07       	cpc	r17, r24
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART0);
     bcc:	31 f5       	brne	.+76     	; 0xc1a <UART_computer_init+0x1d8>
     bce:	60 e1       	ldi	r22, 0x10	; 16
     bd0:	83 e0       	ldi	r24, 0x03	; 3
     bd2:	18 d2       	rcall	.+1072   	; 0x1004 <sysclk_enable_module>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     bd4:	80 ea       	ldi	r24, 0xA0	; 160
     bd6:	98 e0       	ldi	r25, 0x08	; 8
     bd8:	80 93 0e 21 	sts	0x210E, r24	; 0x80210e <stdio_base>
     bdc:	90 93 0f 21 	sts	0x210F, r25	; 0x80210f <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     be0:	8f e1       	ldi	r24, 0x1F	; 31
     be2:	95 e0       	ldi	r25, 0x05	; 5
     be4:	80 93 0c 21 	sts	0x210C, r24	; 0x80210c <ptr_put>
     be8:	90 93 0d 21 	sts	0x210D, r25	; 0x80210d <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     bec:	87 e1       	ldi	r24, 0x17	; 23
     bee:	95 e0       	ldi	r25, 0x05	; 5
     bf0:	80 93 08 21 	sts	0x2108, r24	; 0x802108 <ptr_get>
     bf4:	90 93 09 21 	sts	0x2109, r25	; 0x802109 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     bf8:	e6 e0       	ldi	r30, 0x06	; 6
     bfa:	f0 e2       	ldi	r31, 0x20	; 32
     bfc:	84 81       	ldd	r24, Z+4	; 0x04
	usart_rs232_options.paritytype   = options->paritytype;
     bfe:	8d 83       	std	Y+5, r24	; 0x05
     c00:	85 81       	ldd	r24, Z+5	; 0x05
	usart_rs232_options.stopbits     = options->stopbits;
     c02:	8e 83       	std	Y+6, r24	; 0x06
     c04:	86 81       	ldd	r24, Z+6	; 0x06
	usart_rs232_options.baudrate     = options->baudrate;
     c06:	8f 83       	std	Y+7, r24	; 0x07
     c08:	80 81       	ld	r24, Z
     c0a:	91 81       	ldd	r25, Z+1	; 0x01
     c0c:	a2 81       	ldd	r26, Z+2	; 0x02
     c0e:	b3 81       	ldd	r27, Z+3	; 0x03
     c10:	89 83       	std	Y+1, r24	; 0x01
     c12:	9a 83       	std	Y+2, r25	; 0x02
     c14:	ab 83       	std	Y+3, r26	; 0x03
	}
#endif
#ifdef USARTD0
	else if (module == &USARTD0) {
     c16:	bc 83       	std	Y+4, r27	; 0x04
     c18:	55 c0       	rjmp	.+170    	; 0xcc4 <UART_computer_init+0x282>
     c1a:	00 3a       	cpi	r16, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART0);
     c1c:	29 e0       	ldi	r18, 0x09	; 9
     c1e:	12 07       	cpc	r17, r18
     c20:	21 f4       	brne	.+8      	; 0xc2a <UART_computer_init+0x1e8>
     c22:	60 e1       	ldi	r22, 0x10	; 16
     c24:	84 e0       	ldi	r24, 0x04	; 4
	}
#endif
#ifdef USARTE0
	else if (module == &USARTE0) {
     c26:	ee d1       	rcall	.+988    	; 0x1004 <sysclk_enable_module>
     c28:	85 c0       	rjmp	.+266    	; 0xd34 <UART_computer_init+0x2f2>
     c2a:	00 3a       	cpi	r16, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_USART0);
     c2c:	8a e0       	ldi	r24, 0x0A	; 10
     c2e:	18 07       	cpc	r17, r24
     c30:	21 f4       	brne	.+8      	; 0xc3a <UART_computer_init+0x1f8>
     c32:	60 e1       	ldi	r22, 0x10	; 16
     c34:	85 e0       	ldi	r24, 0x05	; 5
	else if (module == &USARTF0) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART0);
	}
#endif
#ifdef USARTC1
	else if (module == &USARTC1) {
     c36:	e6 d1       	rcall	.+972    	; 0x1004 <sysclk_enable_module>
     c38:	7d c0       	rjmp	.+250    	; 0xd34 <UART_computer_init+0x2f2>
     c3a:	00 3b       	cpi	r16, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_USART1);
     c3c:	28 e0       	ldi	r18, 0x08	; 8
     c3e:	12 07       	cpc	r17, r18
     c40:	21 f4       	brne	.+8      	; 0xc4a <UART_computer_init+0x208>
     c42:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD1
	else if (module == &USARTD1) {
     c44:	83 e0       	ldi	r24, 0x03	; 3
     c46:	de d1       	rcall	.+956    	; 0x1004 <sysclk_enable_module>
     c48:	75 c0       	rjmp	.+234    	; 0xd34 <UART_computer_init+0x2f2>
     c4a:	00 3b       	cpi	r16, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_USART1);
     c4c:	89 e0       	ldi	r24, 0x09	; 9
     c4e:	18 07       	cpc	r17, r24
     c50:	21 f4       	brne	.+8      	; 0xc5a <UART_computer_init+0x218>
     c52:	60 e2       	ldi	r22, 0x20	; 32
     c54:	84 e0       	ldi	r24, 0x04	; 4
	else if (module == &USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F, SYSCLK_USART1);
	}
#endif
#ifdef TWIC
	else if (module == &TWIC) {
     c56:	d6 d1       	rcall	.+940    	; 0x1004 <sysclk_enable_module>
     c58:	6d c0       	rjmp	.+218    	; 0xd34 <UART_computer_init+0x2f2>
     c5a:	00 38       	cpi	r16, 0x80	; 128
     c5c:	24 e0       	ldi	r18, 0x04	; 4
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TWI);
     c5e:	12 07       	cpc	r17, r18
     c60:	21 f4       	brne	.+8      	; 0xc6a <UART_computer_init+0x228>
     c62:	60 e4       	ldi	r22, 0x40	; 64
     c64:	83 e0       	ldi	r24, 0x03	; 3
     c66:	ce d1       	rcall	.+924    	; 0x1004 <sysclk_enable_module>
	else if (module == &TWID) {
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TWI);
	}
#endif
#ifdef TWIE
	else if (module == &TWIE) {
     c68:	65 c0       	rjmp	.+202    	; 0xd34 <UART_computer_init+0x2f2>
     c6a:	00 3a       	cpi	r16, 0xA0	; 160
     c6c:	84 e0       	ldi	r24, 0x04	; 4
     c6e:	18 07       	cpc	r17, r24
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TWI);
     c70:	21 f4       	brne	.+8      	; 0xc7a <UART_computer_init+0x238>
     c72:	60 e4       	ldi	r22, 0x40	; 64
     c74:	85 e0       	ldi	r24, 0x05	; 5
     c76:	c6 d1       	rcall	.+908    	; 0x1004 <sysclk_enable_module>
     c78:	5d c0       	rjmp	.+186    	; 0xd34 <UART_computer_init+0x2f2>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     c7a:	00 93 0e 21 	sts	0x210E, r16	; 0x80210e <stdio_base>
     c7e:	10 93 0f 21 	sts	0x210F, r17	; 0x80210f <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     c82:	8f e1       	ldi	r24, 0x1F	; 31
     c84:	95 e0       	ldi	r25, 0x05	; 5
     c86:	80 93 0c 21 	sts	0x210C, r24	; 0x80210c <ptr_put>
     c8a:	90 93 0d 21 	sts	0x210D, r25	; 0x80210d <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     c8e:	87 e1       	ldi	r24, 0x17	; 23
     c90:	95 e0       	ldi	r25, 0x05	; 5
     c92:	80 93 08 21 	sts	0x2108, r24	; 0x802108 <ptr_get>
     c96:	90 93 09 21 	sts	0x2109, r25	; 0x802109 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     c9a:	e6 e0       	ldi	r30, 0x06	; 6
     c9c:	f0 e2       	ldi	r31, 0x20	; 32
     c9e:	84 81       	ldd	r24, Z+4	; 0x04
	usart_rs232_options.paritytype   = options->paritytype;
     ca0:	8d 83       	std	Y+5, r24	; 0x05
     ca2:	85 81       	ldd	r24, Z+5	; 0x05
	usart_rs232_options.stopbits     = options->stopbits;
     ca4:	8e 83       	std	Y+6, r24	; 0x06
     ca6:	86 81       	ldd	r24, Z+6	; 0x06
	usart_rs232_options.baudrate     = options->baudrate;
     ca8:	8f 83       	std	Y+7, r24	; 0x07
     caa:	80 81       	ld	r24, Z
     cac:	91 81       	ldd	r25, Z+1	; 0x01
     cae:	a2 81       	ldd	r26, Z+2	; 0x02
     cb0:	b3 81       	ldd	r27, Z+3	; 0x03
     cb2:	89 83       	std	Y+1, r24	; 0x01
     cb4:	9a 83       	std	Y+2, r25	; 0x02

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
     cb6:	ab 83       	std	Y+3, r26	; 0x03
     cb8:	bc 83       	std	Y+4, r27	; 0x04
     cba:	68 01       	movw	r12, r16
     cbc:	00 3a       	cpi	r16, 0xA0	; 160
     cbe:	28 e0       	ldi	r18, 0x08	; 8
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART0_bm);
     cc0:	12 07       	cpc	r17, r18
     cc2:	51 f4       	brne	.+20     	; 0xcd8 <UART_computer_init+0x296>
     cc4:	60 e1       	ldi	r22, 0x10	; 16
     cc6:	83 e0       	ldi	r24, 0x03	; 3
     cc8:	9d d1       	rcall	.+826    	; 0x1004 <sysclk_enable_module>
     cca:	0f 2e       	mov	r0, r31
     ccc:	f0 ea       	ldi	r31, 0xA0	; 160
     cce:	cf 2e       	mov	r12, r31
     cd0:	f8 e0       	ldi	r31, 0x08	; 8
	}
#endif
#ifdef USARTC1
	if((uint16_t)usart == (uint16_t)&USARTC1) {
     cd2:	df 2e       	mov	r13, r31
     cd4:	f0 2d       	mov	r31, r0
     cd6:	12 c0       	rjmp	.+36     	; 0xcfc <UART_computer_init+0x2ba>
     cd8:	80 eb       	ldi	r24, 0xB0	; 176
     cda:	c8 16       	cp	r12, r24
		sysclk_enable_module(SYSCLK_PORT_C,PR_USART1_bm);
     cdc:	88 e0       	ldi	r24, 0x08	; 8
     cde:	d8 06       	cpc	r13, r24
     ce0:	21 f4       	brne	.+8      	; 0xcea <UART_computer_init+0x2a8>
     ce2:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTD0
	if((uint16_t)usart == (uint16_t)&USARTD0) {
     ce4:	83 e0       	ldi	r24, 0x03	; 3
     ce6:	8e d1       	rcall	.+796    	; 0x1004 <sysclk_enable_module>
     ce8:	12 c0       	rjmp	.+36     	; 0xd0e <UART_computer_init+0x2cc>
     cea:	20 ea       	ldi	r18, 0xA0	; 160
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART0_bm);
     cec:	c2 16       	cp	r12, r18
     cee:	29 e0       	ldi	r18, 0x09	; 9
     cf0:	d2 06       	cpc	r13, r18
     cf2:	21 f4       	brne	.+8      	; 0xcfc <UART_computer_init+0x2ba>
	}
#endif
#ifdef USARTD1
	if((uint16_t)usart == (uint16_t)&USARTD1) {
     cf4:	60 e1       	ldi	r22, 0x10	; 16
     cf6:	84 e0       	ldi	r24, 0x04	; 4
     cf8:	85 d1       	rcall	.+778    	; 0x1004 <sysclk_enable_module>
     cfa:	11 c0       	rjmp	.+34     	; 0xd1e <UART_computer_init+0x2dc>
     cfc:	80 eb       	ldi	r24, 0xB0	; 176
		sysclk_enable_module(SYSCLK_PORT_D,PR_USART1_bm);
     cfe:	c8 16       	cp	r12, r24
     d00:	89 e0       	ldi	r24, 0x09	; 9
     d02:	d8 06       	cpc	r13, r24
     d04:	21 f4       	brne	.+8      	; 0xd0e <UART_computer_init+0x2cc>
     d06:	60 e2       	ldi	r22, 0x20	; 32
	}
#endif
#ifdef USARTE0
	if((uint16_t)usart == (uint16_t)&USARTE0) {
     d08:	84 e0       	ldi	r24, 0x04	; 4
     d0a:	7c d1       	rcall	.+760    	; 0x1004 <sysclk_enable_module>
     d0c:	08 c0       	rjmp	.+16     	; 0xd1e <UART_computer_init+0x2dc>
     d0e:	20 ea       	ldi	r18, 0xA0	; 160
     d10:	c2 16       	cp	r12, r18
		sysclk_enable_module(SYSCLK_PORT_E,PR_USART0_bm);
     d12:	2a e0       	ldi	r18, 0x0A	; 10
     d14:	d2 06       	cpc	r13, r18
     d16:	19 f4       	brne	.+6      	; 0xd1e <UART_computer_init+0x2dc>
     d18:	60 e1       	ldi	r22, 0x10	; 16
#ifdef USARTF1
	if((uint16_t)usart == (uint16_t)&USARTF1) {
		sysclk_enable_module(SYSCLK_PORT_F,PR_USART1_bm);
	}
#endif
	if (usart_init_rs232(usart, &usart_rs232_options)) {
     d1a:	85 e0       	ldi	r24, 0x05	; 5
     d1c:	73 d1       	rcall	.+742    	; 0x1004 <sysclk_enable_module>
     d1e:	be 01       	movw	r22, r28
     d20:	6f 5f       	subi	r22, 0xFF	; 255
     d22:	7f 4f       	sbci	r23, 0xFF	; 255
     d24:	c8 01       	movw	r24, r16
# endif

# if defined(__GNUC__)
#  if (XMEGA || MEGA_RF)
	// For AVR GCC libc print redirection uses fdevopen.
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
     d26:	7a dc       	rcall	.-1804   	; 0x61c <usart_init_rs232>
     d28:	6c e1       	ldi	r22, 0x1C	; 28
     d2a:	71 e0       	ldi	r23, 0x01	; 1
     d2c:	85 e9       	ldi	r24, 0x95	; 149
     d2e:	97 e0       	ldi	r25, 0x07	; 7
     d30:	8d d6       	rcall	.+3354   	; 0x1a4c <fdevopen>
	gpio_configure_pin(tx_pin, IOPORT_DIR_OUTPUT);
	gpio_configure_pin(rx_pin, IOPORT_DIR_INPUT);
	sysclk_enable_peripheral_clock(comms_usart); 
	
	stdio_serial_init(comms_usart, &options);
     d32:	22 c0       	rjmp	.+68     	; 0xd78 <UART_computer_init+0x336>
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
     d34:	00 93 0e 21 	sts	0x210E, r16	; 0x80210e <stdio_base>
     d38:	10 93 0f 21 	sts	0x210F, r17	; 0x80210f <stdio_base+0x1>
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
     d3c:	8f e1       	ldi	r24, 0x1F	; 31
     d3e:	95 e0       	ldi	r25, 0x05	; 5
     d40:	80 93 0c 21 	sts	0x210C, r24	; 0x80210c <ptr_put>
     d44:	90 93 0d 21 	sts	0x210D, r25	; 0x80210d <ptr_put+0x1>
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
     d48:	87 e1       	ldi	r24, 0x17	; 23
     d4a:	95 e0       	ldi	r25, 0x05	; 5
     d4c:	80 93 08 21 	sts	0x2108, r24	; 0x802108 <ptr_get>
     d50:	90 93 09 21 	sts	0x2109, r25	; 0x802109 <ptr_get+0x1>
static inline bool usart_serial_init(usart_if usart, const
		usart_serial_options_t *options)
{
	// USART options.
	usart_rs232_options_t usart_rs232_options;
	usart_rs232_options.charlength   = options->charlength;
     d54:	e6 e0       	ldi	r30, 0x06	; 6
     d56:	f0 e2       	ldi	r31, 0x20	; 32
     d58:	84 81       	ldd	r24, Z+4	; 0x04
     d5a:	8d 83       	std	Y+5, r24	; 0x05
	usart_rs232_options.paritytype   = options->paritytype;
     d5c:	85 81       	ldd	r24, Z+5	; 0x05
     d5e:	8e 83       	std	Y+6, r24	; 0x06
	usart_rs232_options.stopbits     = options->stopbits;
     d60:	86 81       	ldd	r24, Z+6	; 0x06
     d62:	8f 83       	std	Y+7, r24	; 0x07
	usart_rs232_options.baudrate     = options->baudrate;
     d64:	80 81       	ld	r24, Z
     d66:	91 81       	ldd	r25, Z+1	; 0x01
     d68:	a2 81       	ldd	r26, Z+2	; 0x02
     d6a:	b3 81       	ldd	r27, Z+3	; 0x03
     d6c:	89 83       	std	Y+1, r24	; 0x01
     d6e:	9a 83       	std	Y+2, r25	; 0x02
     d70:	ab 83       	std	Y+3, r26	; 0x03
     d72:	bc 83       	std	Y+4, r27	; 0x04

#ifdef USARTC0
	if((uint16_t)usart == (uint16_t)&USARTC0) {
     d74:	68 01       	movw	r12, r16
     d76:	b0 cf       	rjmp	.-160    	; 0xcd8 <UART_computer_init+0x296>
     d78:	27 96       	adiw	r28, 0x07	; 7
     d7a:	cd bf       	out	0x3d, r28	; 61
     d7c:	de bf       	out	0x3e, r29	; 62
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	1f 91       	pop	r17
     d84:	0f 91       	pop	r16
     d86:	ff 90       	pop	r15
     d88:	df 90       	pop	r13
     d8a:	cf 90       	pop	r12
     d8c:	08 95       	ret

00000d8e <rbu8_write>:
	for (i = 0; i < 255; i++)
	{
		if (data[i] == '\0')
			break;
	}
	rbu8_write(buffer, data, i);
     d8e:	cf 93       	push	r28
     d90:	df 93       	push	r29
     d92:	fc 01       	movw	r30, r24
     d94:	41 15       	cp	r20, r1
     d96:	51 05       	cpc	r21, r1
     d98:	81 f1       	breq	.+96     	; 0xdfa <rbu8_write+0x6c>
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	db 01       	movw	r26, r22
     da2:	a8 0f       	add	r26, r24
     da4:	b9 1f       	adc	r27, r25
     da6:	3c 91       	ld	r19, X
     da8:	a6 81       	ldd	r26, Z+6	; 0x06
     daa:	b7 81       	ldd	r27, Z+7	; 0x07
     dac:	82 81       	ldd	r24, Z+2	; 0x02
     dae:	93 81       	ldd	r25, Z+3	; 0x03
     db0:	a8 0f       	add	r26, r24
     db2:	b9 1f       	adc	r27, r25
     db4:	3c 93       	st	X, r19
     db6:	82 81       	ldd	r24, Z+2	; 0x02
     db8:	93 81       	ldd	r25, Z+3	; 0x03
     dba:	01 96       	adiw	r24, 0x01	; 1
     dbc:	82 83       	std	Z+2, r24	; 0x02
     dbe:	93 83       	std	Z+3, r25	; 0x03
     dc0:	a0 81       	ld	r26, Z
     dc2:	b1 81       	ldd	r27, Z+1	; 0x01
     dc4:	8a 17       	cp	r24, r26
     dc6:	9b 07       	cpc	r25, r27
     dc8:	11 f4       	brne	.+4      	; 0xdce <rbu8_write+0x40>
     dca:	12 82       	std	Z+2, r1	; 0x02
     dcc:	13 82       	std	Z+3, r1	; 0x03
     dce:	82 81       	ldd	r24, Z+2	; 0x02
     dd0:	93 81       	ldd	r25, Z+3	; 0x03
     dd2:	c4 81       	ldd	r28, Z+4	; 0x04
     dd4:	d5 81       	ldd	r29, Z+5	; 0x05
     dd6:	8c 17       	cp	r24, r28
     dd8:	9d 07       	cpc	r25, r29
     dda:	49 f4       	brne	.+18     	; 0xdee <rbu8_write+0x60>
     ddc:	01 96       	adiw	r24, 0x01	; 1
     dde:	a8 17       	cp	r26, r24
     de0:	b9 07       	cpc	r27, r25
     de2:	19 f0       	breq	.+6      	; 0xdea <rbu8_write+0x5c>
     de4:	84 83       	std	Z+4, r24	; 0x04
     de6:	95 83       	std	Z+5, r25	; 0x05
     de8:	02 c0       	rjmp	.+4      	; 0xdee <rbu8_write+0x60>
     dea:	14 82       	std	Z+4, r1	; 0x04
     dec:	15 82       	std	Z+5, r1	; 0x05
     dee:	2f 5f       	subi	r18, 0xFF	; 255
     df0:	82 2f       	mov	r24, r18
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	84 17       	cp	r24, r20
     df6:	95 07       	cpc	r25, r21
     df8:	98 f2       	brcs	.-90     	; 0xda0 <rbu8_write+0x12>
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	08 95       	ret

00000e00 <rbu8_init>:
void rbu8_init(RingBufferu8_t* buffer, uint8_t* backing_array, uint16_t backing_array_length)
/*	Call to reset the head and tail variables of a RingBuffer. 
	backing_array is the array that the ring buffer actually stores its data in
	backing_array_length is kind of exactly what it says it is
*/
{
     e00:	fc 01       	movw	r30, r24
	buffer->head = 0; //Beginning of array
     e02:	12 82       	std	Z+2, r1	; 0x02
     e04:	13 82       	std	Z+3, r1	; 0x03
	buffer->tail = 0; //End of array
     e06:	14 82       	std	Z+4, r1	; 0x04
     e08:	15 82       	std	Z+5, r1	; 0x05
	buffer->buffer = backing_array;
     e0a:	66 83       	std	Z+6, r22	; 0x06
     e0c:	77 83       	std	Z+7, r23	; 0x07
	buffer->array_length = backing_array_length;
     e0e:	40 83       	st	Z, r20
     e10:	51 83       	std	Z+1, r21	; 0x01
     e12:	08 95       	ret

00000e14 <rbu8_length>:
uint16_t rbu8_length(RingBufferu8_t* buffer)
/*	Returns the number of bytes of data currently stored in the RingBuffer pointed to by its argument
	The return value will always be greater than or equal to 0
	And less than or equal to buffer->array_length
*/
{
     e14:	fc 01       	movw	r30, r24
	if (buffer->head >= buffer->tail)
     e16:	82 81       	ldd	r24, Z+2	; 0x02
     e18:	93 81       	ldd	r25, Z+3	; 0x03
     e1a:	44 81       	ldd	r20, Z+4	; 0x04
     e1c:	55 81       	ldd	r21, Z+5	; 0x05
     e1e:	84 17       	cp	r24, r20
     e20:	95 07       	cpc	r25, r21
     e22:	18 f0       	brcs	.+6      	; 0xe2a <rbu8_length+0x16>
	//We are not currently wrapped around the end of the buffer, so we are using the space between the head and tail
	{
		return buffer->head - buffer->tail;
     e24:	84 1b       	sub	r24, r20
     e26:	95 0b       	sbc	r25, r21
     e28:	08 95       	ret
	}
	else
	//We have wrapped around the end of the buffer, so subtract the unused space between the head and tail
	{
		return buffer->array_length - (buffer->tail - buffer->head);
     e2a:	20 81       	ld	r18, Z
     e2c:	31 81       	ldd	r19, Z+1	; 0x01
     e2e:	82 0f       	add	r24, r18
     e30:	93 1f       	adc	r25, r19
     e32:	84 1b       	sub	r24, r20
     e34:	95 0b       	sbc	r25, r21
	}
}
     e36:	08 95       	ret

00000e38 <rbu8_read>:
	length - number of bytes to be read
	Return values
	* 0 - success
	* 1 - the buffer doesn't have length bytes of data in it, but dest now has everything that was in there, null-terminated
*/
{
     e38:	8f 92       	push	r8
     e3a:	9f 92       	push	r9
     e3c:	af 92       	push	r10
     e3e:	bf 92       	push	r11
     e40:	cf 92       	push	r12
     e42:	df 92       	push	r13
     e44:	ef 92       	push	r14
     e46:	ff 92       	push	r15
     e48:	0f 93       	push	r16
     e4a:	1f 93       	push	r17
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	8c 01       	movw	r16, r24
     e52:	6a 01       	movw	r12, r20
	uint16_t index = buffer->tail;
     e54:	dc 01       	movw	r26, r24
     e56:	14 96       	adiw	r26, 0x04	; 4
     e58:	cd 91       	ld	r28, X+
     e5a:	dc 91       	ld	r29, X
     e5c:	15 97       	sbiw	r26, 0x05	; 5
     e5e:	e6 2e       	mov	r14, r22
     e60:	f7 2e       	mov	r15, r23
	uint16_t i = 0;
	for (i = 0; i < min(rbu8_length(buffer), length); i++)
     e62:	a1 2c       	mov	r10, r1
     e64:	b1 2c       	mov	r11, r1
     e66:	84 2e       	mov	r8, r20
     e68:	9d 2c       	mov	r9, r13
     e6a:	18 c0       	rjmp	.+48     	; 0xe9c <rbu8_read+0x64>
	{

		dest[i] = buffer->buffer[index];
     e6c:	d8 01       	movw	r26, r16
     e6e:	16 96       	adiw	r26, 0x06	; 6
     e70:	ed 91       	ld	r30, X+
     e72:	fc 91       	ld	r31, X
     e74:	17 97       	sbiw	r26, 0x07	; 7
     e76:	ec 0f       	add	r30, r28
     e78:	fd 1f       	adc	r31, r29
     e7a:	80 81       	ld	r24, Z
     e7c:	f7 01       	movw	r30, r14
     e7e:	81 93       	st	Z+, r24
     e80:	7f 01       	movw	r14, r30
		if (index == buffer->array_length - 1) //Reset if we've hit the end
     e82:	8d 91       	ld	r24, X+
     e84:	9c 91       	ld	r25, X
     e86:	01 97       	sbiw	r24, 0x01	; 1
     e88:	c8 17       	cp	r28, r24
     e8a:	d9 07       	cpc	r29, r25
     e8c:	11 f0       	breq	.+4      	; 0xe92 <rbu8_read+0x5a>
		{
			index = 0;
		}
		else
		{
			index++;
     e8e:	21 96       	adiw	r28, 0x01	; 1
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <rbu8_read+0x5e>
	{

		dest[i] = buffer->buffer[index];
		if (index == buffer->array_length - 1) //Reset if we've hit the end
		{
			index = 0;
     e92:	c0 e0       	ldi	r28, 0x00	; 0
     e94:	d0 e0       	ldi	r29, 0x00	; 0
	* 1 - the buffer doesn't have length bytes of data in it, but dest now has everything that was in there, null-terminated
*/
{
	uint16_t index = buffer->tail;
	uint16_t i = 0;
	for (i = 0; i < min(rbu8_length(buffer), length); i++)
     e96:	ff ef       	ldi	r31, 0xFF	; 255
     e98:	af 1a       	sub	r10, r31
     e9a:	bf 0a       	sbc	r11, r31
     e9c:	c8 01       	movw	r24, r16
     e9e:	ba df       	rcall	.-140    	; 0xe14 <rbu8_length>
     ea0:	9c 01       	movw	r18, r24
     ea2:	c8 16       	cp	r12, r24
     ea4:	d9 06       	cpc	r13, r25
     ea6:	10 f4       	brcc	.+4      	; 0xeac <rbu8_read+0x74>
     ea8:	28 2d       	mov	r18, r8
     eaa:	39 2d       	mov	r19, r9
     eac:	a2 16       	cp	r10, r18
     eae:	b3 06       	cpc	r11, r19
     eb0:	e8 f2       	brcs	.-70     	; 0xe6c <rbu8_read+0x34>
     eb2:	21 e0       	ldi	r18, 0x01	; 1
     eb4:	8c 15       	cp	r24, r12
     eb6:	9d 05       	cpc	r25, r13
     eb8:	08 f0       	brcs	.+2      	; 0xebc <rbu8_read+0x84>
     eba:	20 e0       	ldi	r18, 0x00	; 0
	}
	if (length > rbu8_length(buffer))
		return 1;
	else
		return 0;
}
     ebc:	82 2f       	mov	r24, r18
     ebe:	df 91       	pop	r29
     ec0:	cf 91       	pop	r28
     ec2:	1f 91       	pop	r17
     ec4:	0f 91       	pop	r16
     ec6:	ff 90       	pop	r15
     ec8:	ef 90       	pop	r14
     eca:	df 90       	pop	r13
     ecc:	cf 90       	pop	r12
     ece:	bf 90       	pop	r11
     ed0:	af 90       	pop	r10
     ed2:	9f 90       	pop	r9
     ed4:	8f 90       	pop	r8
     ed6:	08 95       	ret

00000ed8 <rbu8_delete_oldest>:

void rbu8_delete_oldest(RingBufferu8_t* buffer, uint16_t length)
/*	Deletes data from the ring buffer
	All it really has to do is move buffer->tail up length bytes or until one byte below buffer->head, whichever is lower
*/
{
     ed8:	0f 93       	push	r16
     eda:	1f 93       	push	r17
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	ec 01       	movw	r28, r24
     ee2:	8b 01       	movw	r16, r22
	uint16_t move_distance = min(length, rbu8_length(buffer));
     ee4:	97 df       	rcall	.-210    	; 0xe14 <rbu8_length>
     ee6:	9c 01       	movw	r18, r24
     ee8:	08 17       	cp	r16, r24
     eea:	19 07       	cpc	r17, r25
     eec:	08 f4       	brcc	.+2      	; 0xef0 <rbu8_delete_oldest+0x18>
     eee:	98 01       	movw	r18, r16
	if (move_distance >= rbu8_length(buffer))
     ef0:	28 17       	cp	r18, r24
     ef2:	39 07       	cpc	r19, r25
     ef4:	60 f0       	brcs	.+24     	; 0xf0e <rbu8_delete_oldest+0x36>
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
     ef6:	8c 81       	ldd	r24, Y+4	; 0x04
     ef8:	9d 81       	ldd	r25, Y+5	; 0x05
     efa:	82 0f       	add	r24, r18
     efc:	93 1f       	adc	r25, r19
     efe:	68 81       	ld	r22, Y
     f00:	79 81       	ldd	r23, Y+1	; 0x01
     f02:	47 d5       	rcall	.+2702   	; 0x1992 <__udivmodhi4>
     f04:	8c 83       	std	Y+4, r24	; 0x04
     f06:	9d 83       	std	Y+5, r25	; 0x05
		buffer->head = buffer->tail;
     f08:	8a 83       	std	Y+2, r24	; 0x02
     f0a:	9b 83       	std	Y+3, r25	; 0x03
     f0c:	09 c0       	rjmp	.+18     	; 0xf20 <rbu8_delete_oldest+0x48>
	}
	else
	{
		buffer->tail = (buffer->tail + move_distance) % buffer->array_length; //Modulus is so that we don't point to above the buffer's location
     f0e:	8c 81       	ldd	r24, Y+4	; 0x04
     f10:	9d 81       	ldd	r25, Y+5	; 0x05
     f12:	82 0f       	add	r24, r18
     f14:	93 1f       	adc	r25, r19
     f16:	68 81       	ld	r22, Y
     f18:	79 81       	ldd	r23, Y+1	; 0x01
     f1a:	3b d5       	rcall	.+2678   	; 0x1992 <__udivmodhi4>
     f1c:	8c 83       	std	Y+4, r24	; 0x04
     f1e:	9d 83       	std	Y+5, r25	; 0x05
	}
}
     f20:	df 91       	pop	r29
     f22:	cf 91       	pop	r28
     f24:	1f 91       	pop	r17
     f26:	0f 91       	pop	r16
     f28:	08 95       	ret

00000f2a <_write>:
#elif (defined(__GNUC__) && (XMEGA || MEGA))

int _write (char c, int *f);

int _write (char c, int *f)
{
     f2a:	68 2f       	mov	r22, r24
	if (ptr_put(stdio_base, c) < 0) {
     f2c:	80 91 0e 21 	lds	r24, 0x210E	; 0x80210e <stdio_base>
     f30:	90 91 0f 21 	lds	r25, 0x210F	; 0x80210f <stdio_base+0x1>
     f34:	e0 91 0c 21 	lds	r30, 0x210C	; 0x80210c <ptr_put>
     f38:	f0 91 0d 21 	lds	r31, 0x210D	; 0x80210d <ptr_put+0x1>
     f3c:	09 95       	icall
     f3e:	99 23       	and	r25, r25
     f40:	1c f0       	brlt	.+6      	; 0xf48 <_write+0x1e>
		return -1;
	}
	return 1;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	08 95       	ret
int _write (char c, int *f);

int _write (char c, int *f)
{
	if (ptr_put(stdio_base, c) < 0) {
		return -1;
     f48:	8f ef       	ldi	r24, 0xFF	; 255
     f4a:	9f ef       	ldi	r25, 0xFF	; 255
	}
	return 1;
}
     f4c:	08 95       	ret

00000f4e <ioport_configure_port_pin>:
#include "ioport_compat.h"

#if defined(IOPORT_XMEGA_COMPAT)
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	fc 01       	movw	r30, r24
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     f54:	20 e0       	ldi	r18, 0x00	; 0
     f56:	30 e0       	ldi	r19, 0x00	; 0
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
		if (pin_mask & (1 << pin)) {
     f58:	c6 2f       	mov	r28, r22
     f5a:	d0 e0       	ldi	r29, 0x00	; 0
     f5c:	de 01       	movw	r26, r28
     f5e:	02 2e       	mov	r0, r18
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <ioport_configure_port_pin+0x18>
     f62:	b5 95       	asr	r27
     f64:	a7 95       	ror	r26
     f66:	0a 94       	dec	r0
     f68:	e2 f7       	brpl	.-8      	; 0xf62 <ioport_configure_port_pin+0x14>
     f6a:	a0 fd       	sbrc	r26, 0
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
     f6c:	50 8b       	std	Z+16, r21	; 0x10
     f6e:	2f 5f       	subi	r18, 0xFF	; 255
     f70:	3f 4f       	sbci	r19, 0xFF	; 255
     f72:	31 96       	adiw	r30, 0x01	; 1
void ioport_configure_port_pin(void *port, pin_mask_t pin_mask,
		port_pin_flags_t flags)
{
	uint8_t pin;

	for (pin = 0; pin < 8; pin++) {
     f74:	28 30       	cpi	r18, 0x08	; 8
     f76:	31 05       	cpc	r19, r1
     f78:	89 f7       	brne	.-30     	; 0xf5c <ioport_configure_port_pin+0xe>
		if (pin_mask & (1 << pin)) {
			*((uint8_t *)port + PORT_PIN0CTRL + pin) = flags >> 8;
		}
	}
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
     f7a:	40 ff       	sbrs	r20, 0
     f7c:	0a c0       	rjmp	.+20     	; 0xf92 <ioport_configure_port_pin+0x44>
		if (flags & IOPORT_INIT_HIGH) {
     f7e:	41 ff       	sbrs	r20, 1
     f80:	03 c0       	rjmp	.+6      	; 0xf88 <ioport_configure_port_pin+0x3a>
			*((uint8_t *)port + PORT_OUTSET) = pin_mask;
     f82:	fc 01       	movw	r30, r24
     f84:	65 83       	std	Z+5, r22	; 0x05
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <ioport_configure_port_pin+0x3e>
		} else {
			*((uint8_t *)port + PORT_OUTCLR) = pin_mask;
     f88:	fc 01       	movw	r30, r24
     f8a:	66 83       	std	Z+6, r22	; 0x06
		}

		*((uint8_t *)port + PORT_DIRSET) = pin_mask;
     f8c:	fc 01       	movw	r30, r24
     f8e:	61 83       	std	Z+1, r22	; 0x01
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <ioport_configure_port_pin+0x48>
	} else {
		*((uint8_t *)port + PORT_DIRCLR) = pin_mask;
     f92:	fc 01       	movw	r30, r24
     f94:	62 83       	std	Z+2, r22	; 0x02
	}
}
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	08 95       	ret

00000f9c <sysclk_init>:
#  include <nvm.h>
#endif


void sysclk_init(void)
{
     f9c:	cf 93       	push	r28
     f9e:	df 93       	push	r29
     fa0:	00 d0       	rcall	.+0      	; 0xfa2 <sysclk_init+0x6>
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
#endif
	bool need_rc2mhz = false;

	/* Turn off all peripheral clocks that can be turned off. */
	for (i = 0; i <= SYSCLK_PORT_F; i++) {
		*(reg++) = 0xff;
     fa6:	8f ef       	ldi	r24, 0xFF	; 255
     fa8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x700070>
     fac:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x700071>
     fb0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x700072>
     fb4:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x700073>
     fb8:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x700074>
     fbc:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <__TEXT_REGION_LENGTH__+0x700075>
     fc0:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <__TEXT_REGION_LENGTH__+0x700076>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     fc4:	8f b7       	in	r24, 0x3f	; 63
     fc6:	8a 83       	std	Y+2, r24	; 0x02
	cpu_irq_disable();
     fc8:	f8 94       	cli
	return flags;
     fca:	9a 81       	ldd	r25, Y+2	; 0x02
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL |= id;
     fcc:	e0 e5       	ldi	r30, 0x50	; 80
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	82 60       	ori	r24, 0x02	; 2
     fd4:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     fd6:	9f bf       	out	0x3f, r25	; 63

static inline bool osc_is_ready(uint8_t id)
{
	Assert(id != OSC_ID_USBSOF);

	return OSC.STATUS & id;
     fd8:	81 81       	ldd	r24, Z+1	; 0x01
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
     fda:	81 ff       	sbrs	r24, 1
     fdc:	fd cf       	rjmp	.-6      	; 0xfd8 <sysclk_init+0x3c>
		default:
			//unhandled_case(CONFIG_SYSCLK_SOURCE);
			return;
		}

		ccp_write_io((uint8_t *)&CLK.CTRL, CONFIG_SYSCLK_SOURCE);
     fde:	61 e0       	ldi	r22, 0x01	; 1
     fe0:	80 e4       	ldi	r24, 0x40	; 64
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	25 d0       	rcall	.+74     	; 0x1030 <ccp_write_io>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
     fe6:	8f b7       	in	r24, 0x3f	; 63
     fe8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
     fea:	f8 94       	cli
	return flags;
     fec:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags;

	Assert(id != OSC_ID_USBSOF);

	flags = cpu_irq_save();
	OSC.CTRL &= ~id;
     fee:	e0 e5       	ldi	r30, 0x50	; 80
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	80 81       	ld	r24, Z
     ff4:	8e 7f       	andi	r24, 0xFE	; 254
     ff6:	80 83       	st	Z, r24
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     ff8:	9f bf       	out	0x3f, r25	; 63
	}

#ifdef CONFIG_RTC_SOURCE
	sysclk_rtcsrc_enable(CONFIG_RTC_SOURCE);
#endif
}
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	08 95       	ret

00001004 <sysclk_enable_module>:

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	1f 92       	push	r1
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    100e:	9f b7       	in	r25, 0x3f	; 63
    1010:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1012:	f8 94       	cli
	return flags;
    1014:	99 81       	ldd	r25, Y+1	; 0x01
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
    1016:	e8 2f       	mov	r30, r24
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	e0 59       	subi	r30, 0x90	; 144
    101c:	ff 4f       	sbci	r31, 0xFF	; 255
    101e:	60 95       	com	r22
    1020:	80 81       	ld	r24, Z
    1022:	68 23       	and	r22, r24
    1024:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1026:	9f bf       	out	0x3f, r25	; 63

	cpu_irq_restore(flags);
}
    1028:	0f 90       	pop	r0
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	08 95       	ret

00001030 <ccp_write_io>:

	PUBLIC_FUNCTION(ccp_write_io)

#if defined(__GNUC__)

	out     RAMPZ, r1               // Reset bits 23:16 of Z
    1030:	1b be       	out	0x3b, r1	; 59
	movw    r30, r24                // Load addr into Z
    1032:	fc 01       	movw	r30, r24
	ldi     r18, CCP_IOREG          // Load magic CCP value
    1034:	28 ed       	ldi	r18, 0xD8	; 216
	out     CCP, r18                // Start CCP handshake
    1036:	24 bf       	out	0x34, r18	; 52
	st      Z, r22                  // Write value to I/O register
    1038:	60 83       	st	Z, r22
	ret                             // Return to caller
    103a:	08 95       	ret

0000103c <__portable_avr_delay_cycles>:
{
	
}

void buzzer_setup(void)
{
    103c:	04 c0       	rjmp	.+8      	; 0x1046 <__portable_avr_delay_cycles+0xa>
    103e:	61 50       	subi	r22, 0x01	; 1
    1040:	71 09       	sbc	r23, r1
    1042:	81 09       	sbc	r24, r1
    1044:	91 09       	sbc	r25, r1
    1046:	61 15       	cp	r22, r1
    1048:	71 05       	cpc	r23, r1
    104a:	81 05       	cpc	r24, r1
    104c:	91 05       	cpc	r25, r1
    104e:	b9 f7       	brne	.-18     	; 0x103e <__portable_avr_delay_cycles+0x2>
    1050:	08 95       	ret

00001052 <__vector_77>:
    1052:	1f 92       	push	r1
    1054:	0f 92       	push	r0
    1056:	0f b6       	in	r0, 0x3f	; 63
    1058:	0f 92       	push	r0
    105a:	11 24       	eor	r1, r1
    105c:	8f 93       	push	r24
    105e:	9f 93       	push	r25
    1060:	af 93       	push	r26
    1062:	bf 93       	push	r27
    1064:	80 91 04 21 	lds	r24, 0x2104	; 0x802104 <__data_end>
    1068:	90 91 05 21 	lds	r25, 0x2105	; 0x802105 <__data_end+0x1>
    106c:	a0 91 06 21 	lds	r26, 0x2106	; 0x802106 <__data_end+0x2>
    1070:	b0 91 07 21 	lds	r27, 0x2107	; 0x802107 <__data_end+0x3>
    1074:	01 96       	adiw	r24, 0x01	; 1
    1076:	a1 1d       	adc	r26, r1
    1078:	b1 1d       	adc	r27, r1
    107a:	80 93 04 21 	sts	0x2104, r24	; 0x802104 <__data_end>
    107e:	90 93 05 21 	sts	0x2105, r25	; 0x802105 <__data_end+0x1>
    1082:	a0 93 06 21 	sts	0x2106, r26	; 0x802106 <__data_end+0x2>
    1086:	b0 93 07 21 	sts	0x2107, r27	; 0x802107 <__data_end+0x3>
    108a:	bf 91       	pop	r27
    108c:	af 91       	pop	r26
    108e:	9f 91       	pop	r25
    1090:	8f 91       	pop	r24
    1092:	0f 90       	pop	r0
    1094:	0f be       	out	0x3f, r0	; 63
    1096:	0f 90       	pop	r0
    1098:	1f 90       	pop	r1
    109a:	18 95       	reti

0000109c <__vector_47>:
    109c:	1f 92       	push	r1
    109e:	0f 92       	push	r0
    10a0:	0f b6       	in	r0, 0x3f	; 63
    10a2:	0f 92       	push	r0
    10a4:	11 24       	eor	r1, r1
    10a6:	2f 93       	push	r18
    10a8:	3f 93       	push	r19
    10aa:	4f 93       	push	r20
    10ac:	5f 93       	push	r21
    10ae:	6f 93       	push	r22
    10b0:	7f 93       	push	r23
    10b2:	8f 93       	push	r24
    10b4:	9f 93       	push	r25
    10b6:	af 93       	push	r26
    10b8:	bf 93       	push	r27
    10ba:	ef 93       	push	r30
    10bc:	ff 93       	push	r31
    10be:	80 91 10 21 	lds	r24, 0x2110	; 0x802110 <isr_buzzer_duty>
    10c2:	81 11       	cpse	r24, r1
    10c4:	13 c0       	rjmp	.+38     	; 0x10ec <__vector_47+0x50>
    10c6:	60 91 04 21 	lds	r22, 0x2104	; 0x802104 <__data_end>
    10ca:	70 91 05 21 	lds	r23, 0x2105	; 0x802105 <__data_end+0x1>
    10ce:	80 91 06 21 	lds	r24, 0x2106	; 0x802106 <__data_end+0x2>
    10d2:	90 91 07 21 	lds	r25, 0x2107	; 0x802107 <__data_end+0x3>
    10d6:	2f e0       	ldi	r18, 0x0F	; 15
    10d8:	30 e0       	ldi	r19, 0x00	; 0
    10da:	40 e0       	ldi	r20, 0x00	; 0
    10dc:	50 e0       	ldi	r21, 0x00	; 0
    10de:	6d d4       	rcall	.+2266   	; 0x19ba <__udivmodsi4>
    10e0:	6e 30       	cpi	r22, 0x0E	; 14
    10e2:	71 05       	cpc	r23, r1
    10e4:	81 05       	cpc	r24, r1
    10e6:	91 05       	cpc	r25, r1
    10e8:	68 f4       	brcc	.+26     	; 0x1104 <__vector_47+0x68>
    10ea:	06 c0       	rjmp	.+12     	; 0x10f8 <__vector_47+0x5c>
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	41 f4       	brne	.+16     	; 0x1100 <__vector_47+0x64>
    10f0:	80 91 04 21 	lds	r24, 0x2104	; 0x802104 <__data_end>
    10f4:	80 fd       	sbrc	r24, 0
    10f6:	06 c0       	rjmp	.+12     	; 0x1104 <__vector_47+0x68>
    10f8:	80 e1       	ldi	r24, 0x10	; 16
    10fa:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
    10fe:	09 c0       	rjmp	.+18     	; 0x1112 <__vector_47+0x76>
    1100:	82 30       	cpi	r24, 0x02	; 2
    1102:	20 f4       	brcc	.+8      	; 0x110c <__vector_47+0x70>
    1104:	80 e1       	ldi	r24, 0x10	; 16
    1106:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <__TEXT_REGION_LENGTH__+0x700667>
    110a:	03 c0       	rjmp	.+6      	; 0x1112 <__vector_47+0x76>
    110c:	80 e1       	ldi	r24, 0x10	; 16
    110e:	80 93 67 06 	sts	0x0667, r24	; 0x800667 <__TEXT_REGION_LENGTH__+0x700667>
    1112:	ff 91       	pop	r31
    1114:	ef 91       	pop	r30
    1116:	bf 91       	pop	r27
    1118:	af 91       	pop	r26
    111a:	9f 91       	pop	r25
    111c:	8f 91       	pop	r24
    111e:	7f 91       	pop	r23
    1120:	6f 91       	pop	r22
    1122:	5f 91       	pop	r21
    1124:	4f 91       	pop	r20
    1126:	3f 91       	pop	r19
    1128:	2f 91       	pop	r18
    112a:	0f 90       	pop	r0
    112c:	0f be       	out	0x3f, r0	; 63
    112e:	0f 90       	pop	r0
    1130:	1f 90       	pop	r1
    1132:	18 95       	reti

00001134 <__vector_25>:
    1134:	1f 92       	push	r1
    1136:	0f 92       	push	r0
    1138:	0f b6       	in	r0, 0x3f	; 63
    113a:	0f 92       	push	r0
    113c:	11 24       	eor	r1, r1
    113e:	2f 93       	push	r18
    1140:	3f 93       	push	r19
    1142:	4f 93       	push	r20
    1144:	5f 93       	push	r21
    1146:	6f 93       	push	r22
    1148:	7f 93       	push	r23
    114a:	8f 93       	push	r24
    114c:	9f 93       	push	r25
    114e:	af 93       	push	r26
    1150:	bf 93       	push	r27
    1152:	ef 93       	push	r30
    1154:	ff 93       	push	r31
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	1f 92       	push	r1
    115c:	cd b7       	in	r28, 0x3d	; 61
    115e:	de b7       	in	r29, 0x3e	; 62
    1160:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    1164:	89 83       	std	Y+1, r24	; 0x01
    1166:	41 e0       	ldi	r20, 0x01	; 1
    1168:	50 e0       	ldi	r21, 0x00	; 0
    116a:	be 01       	movw	r22, r28
    116c:	6f 5f       	subi	r22, 0xFF	; 255
    116e:	7f 4f       	sbci	r23, 0xFF	; 255
    1170:	81 e1       	ldi	r24, 0x11	; 17
    1172:	91 e2       	ldi	r25, 0x21	; 33
    1174:	0c de       	rcall	.-1000   	; 0xd8e <rbu8_write>
    1176:	0f 90       	pop	r0
    1178:	df 91       	pop	r29
    117a:	cf 91       	pop	r28
    117c:	ff 91       	pop	r31
    117e:	ef 91       	pop	r30
    1180:	bf 91       	pop	r27
    1182:	af 91       	pop	r26
    1184:	9f 91       	pop	r25
    1186:	8f 91       	pop	r24
    1188:	7f 91       	pop	r23
    118a:	6f 91       	pop	r22
    118c:	5f 91       	pop	r21
    118e:	4f 91       	pop	r20
    1190:	3f 91       	pop	r19
    1192:	2f 91       	pop	r18
    1194:	0f 90       	pop	r0
    1196:	0f be       	out	0x3f, r0	; 63
    1198:	0f 90       	pop	r0
    119a:	1f 90       	pop	r1
    119c:	18 95       	reti

0000119e <config_LEDs_and_buzzer>:
    119e:	0f 93       	push	r16
    11a0:	1f 93       	push	r17
    11a2:	81 30       	cpi	r24, 0x01	; 1
    11a4:	79 f4       	brne	.+30     	; 0x11c4 <config_LEDs_and_buzzer+0x26>
    11a6:	00 e0       	ldi	r16, 0x00	; 0
    11a8:	10 e0       	ldi	r17, 0x00	; 0
    11aa:	20 e0       	ldi	r18, 0x00	; 0
    11ac:	3f e3       	ldi	r19, 0x3F	; 63
    11ae:	40 e0       	ldi	r20, 0x00	; 0
    11b0:	50 e0       	ldi	r21, 0x00	; 0
    11b2:	60 ea       	ldi	r22, 0xA0	; 160
    11b4:	70 e4       	ldi	r23, 0x40	; 64
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	98 e0       	ldi	r25, 0x08	; 8
    11ba:	f8 db       	rcall	.-2064   	; 0x9ac <TC_config>
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	80 93 10 21 	sts	0x2110, r24	; 0x802110 <isr_buzzer_duty>
    11c2:	0d c0       	rjmp	.+26     	; 0x11de <config_LEDs_and_buzzer+0x40>
    11c4:	00 e0       	ldi	r16, 0x00	; 0
    11c6:	10 e0       	ldi	r17, 0x00	; 0
    11c8:	20 e0       	ldi	r18, 0x00	; 0
    11ca:	3f e3       	ldi	r19, 0x3F	; 63
    11cc:	40 e0       	ldi	r20, 0x00	; 0
    11ce:	50 e0       	ldi	r21, 0x00	; 0
    11d0:	60 e8       	ldi	r22, 0x80	; 128
    11d2:	7f e3       	ldi	r23, 0x3F	; 63
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	98 e0       	ldi	r25, 0x08	; 8
    11d8:	e9 db       	rcall	.-2094   	; 0x9ac <TC_config>
    11da:	10 92 10 21 	sts	0x2110, r1	; 0x802110 <isr_buzzer_duty>
    11de:	1f 91       	pop	r17
    11e0:	0f 91       	pop	r16
    11e2:	08 95       	ret

000011e4 <input_buff_setup>:
    11e4:	40 e0       	ldi	r20, 0x00	; 0
    11e6:	52 e0       	ldi	r21, 0x02	; 2
    11e8:	69 e1       	ldi	r22, 0x19	; 25
    11ea:	71 e2       	ldi	r23, 0x21	; 33
    11ec:	81 e1       	ldi	r24, 0x11	; 17
    11ee:	91 e2       	ldi	r25, 0x21	; 33
    11f0:	07 ce       	rjmp	.-1010   	; 0xe00 <rbu8_init>
    11f2:	08 95       	ret

000011f4 <pin_setup>:
	
}

void pin_setup(void)
{
    11f4:	0f 93       	push	r16
    11f6:	1f 93       	push	r17
    11f8:	cf 93       	push	r28
    11fa:	41 e0       	ldi	r20, 0x01	; 1
    11fc:	50 e0       	ldi	r21, 0x00	; 0
    11fe:	60 e2       	ldi	r22, 0x20	; 32
    1200:	80 e4       	ldi	r24, 0x40	; 64
    1202:	96 e0       	ldi	r25, 0x06	; 6
    1204:	a4 de       	rcall	.-696    	; 0xf4e <ioport_configure_port_pin>
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1206:	00 e4       	ldi	r16, 0x40	; 64
    1208:	16 e0       	ldi	r17, 0x06	; 6
    120a:	80 e2       	ldi	r24, 0x20	; 32
    120c:	f8 01       	movw	r30, r16
    120e:	86 83       	std	Z+6, r24	; 0x06
    1210:	41 e0       	ldi	r20, 0x01	; 1
    1212:	50 e0       	ldi	r21, 0x00	; 0
    1214:	61 e0       	ldi	r22, 0x01	; 1
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	96 e0       	ldi	r25, 0x06	; 6
    121a:	99 de       	rcall	.-718    	; 0xf4e <ioport_configure_port_pin>
    121c:	c1 e0       	ldi	r28, 0x01	; 1
    121e:	c0 93 06 06 	sts	0x0606, r28	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
    1222:	41 e0       	ldi	r20, 0x01	; 1
    1224:	50 e0       	ldi	r21, 0x00	; 0
    1226:	61 e0       	ldi	r22, 0x01	; 1
    1228:	80 e4       	ldi	r24, 0x40	; 64
    122a:	96 e0       	ldi	r25, 0x06	; 6
    122c:	90 de       	rcall	.-736    	; 0xf4e <ioport_configure_port_pin>
    122e:	f8 01       	movw	r30, r16
    1230:	c6 83       	std	Z+6, r28	; 0x06
    1232:	41 e0       	ldi	r20, 0x01	; 1
    1234:	50 e0       	ldi	r21, 0x00	; 0
    1236:	61 e0       	ldi	r22, 0x01	; 1
    1238:	80 e8       	ldi	r24, 0x80	; 128
    123a:	96 e0       	ldi	r25, 0x06	; 6
    123c:	88 de       	rcall	.-752    	; 0xf4e <ioport_configure_port_pin>
    123e:	00 e8       	ldi	r16, 0x80	; 128
    1240:	16 e0       	ldi	r17, 0x06	; 6
    1242:	f8 01       	movw	r30, r16
    1244:	c6 83       	std	Z+6, r28	; 0x06
    1246:	41 e0       	ldi	r20, 0x01	; 1
    1248:	50 e0       	ldi	r21, 0x00	; 0
    124a:	62 e0       	ldi	r22, 0x02	; 2
    124c:	80 e8       	ldi	r24, 0x80	; 128
    124e:	96 e0       	ldi	r25, 0x06	; 6
    1250:	7e de       	rcall	.-772    	; 0xf4e <ioport_configure_port_pin>
    1252:	82 e0       	ldi	r24, 0x02	; 2
    1254:	f8 01       	movw	r30, r16
    1256:	86 83       	std	Z+6, r24	; 0x06
    1258:	41 e0       	ldi	r20, 0x01	; 1
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	60 e1       	ldi	r22, 0x10	; 16
    125e:	80 e6       	ldi	r24, 0x60	; 96
    1260:	96 e0       	ldi	r25, 0x06	; 6
    1262:	75 de       	rcall	.-790    	; 0xf4e <ioport_configure_port_pin>
    1264:	80 e1       	ldi	r24, 0x10	; 16
    1266:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
	gpio_configure_pin(EMATCH_BACKUP_PIN, IOPORT_DIR_OUTPUT);
	gpio_set_pin_low(EMATCH_BACKUP_PIN);
	
	gpio_configure_pin(BUZZER_CTRL_PIN, IOPORT_DIR_OUTPUT);
	gpio_set_pin_low(BUZZER_CTRL_PIN);
}
    126a:	cf 91       	pop	r28
    126c:	1f 91       	pop	r17
    126e:	0f 91       	pop	r16
    1270:	08 95       	ret

00001272 <getnextcmd>:

devicecommand getnextcmd(void)
{
    1272:	0f 93       	push	r16
    1274:	1f 93       	push	r17
    1276:	cf 93       	push	r28
    1278:	df 93       	push	r29
    127a:	cd b7       	in	r28, 0x3d	; 61
    127c:	de b7       	in	r29, 0x3e	; 62
    127e:	c5 54       	subi	r28, 0x45	; 69
    1280:	d1 09       	sbc	r29, r1
    1282:	cd bf       	out	0x3d, r28	; 61
    1284:	de bf       	out	0x3e, r29	; 62
	uint8_t buffer[TWICE_LONGEST_VALID_CMD + 1] = {0};
    1286:	8e 01       	movw	r16, r28
    1288:	0f 5f       	subi	r16, 0xFF	; 255
    128a:	1f 4f       	sbci	r17, 0xFF	; 255
    128c:	85 e4       	ldi	r24, 0x45	; 69
    128e:	f8 01       	movw	r30, r16
    1290:	11 92       	st	Z+, r1
    1292:	8a 95       	dec	r24
    1294:	e9 f7       	brne	.-6      	; 0x1290 <getnextcmd+0x1e>
	rbu8_read(&xbee_input_buff, buffer, TWICE_LONGEST_VALID_CMD);
    1296:	44 e4       	ldi	r20, 0x44	; 68
    1298:	50 e0       	ldi	r21, 0x00	; 0
    129a:	b8 01       	movw	r22, r16
    129c:	81 e1       	ldi	r24, 0x11	; 17
    129e:	91 e2       	ldi	r25, 0x21	; 33
    12a0:	cb dd       	rcall	.-1130   	; 0xe38 <rbu8_read>
	char* cmd_start = (uint8_t*)strstr((const char*)buffer, CMD_UNIFORM_PRECURSOR); //Find when first possible command begins
    12a2:	6d e0       	ldi	r22, 0x0D	; 13
    12a4:	70 e2       	ldi	r23, 0x20	; 32
    12a6:	c8 01       	movw	r24, r16
    12a8:	b7 d3       	rcall	.+1902   	; 0x1a18 <strstr>
    12aa:	8c 01       	movw	r16, r24
	/*if (strlen(buffer) > 0)
	{
		printf("Parsing buffer length %i, parsing [%s]\n", strlen(buffer), buffer);
		printf("Coming up: %s\n", cmd_start);
	}*/
	if (cmd_start == NULL) //No command starting within this buffer, scrap it all
    12ac:	00 97       	sbiw	r24, 0x00	; 0
    12ae:	79 f4       	brne	.+30     	; 0x12ce <getnextcmd+0x5c>
	{
		rbu8_delete_oldest(&xbee_input_buff, strlen((const char*)buffer));
    12b0:	de 01       	movw	r26, r28
    12b2:	11 96       	adiw	r26, 0x01	; 1
    12b4:	fd 01       	movw	r30, r26
    12b6:	01 90       	ld	r0, Z+
    12b8:	00 20       	and	r0, r0
    12ba:	e9 f7       	brne	.-6      	; 0x12b6 <getnextcmd+0x44>
    12bc:	31 97       	sbiw	r30, 0x01	; 1
    12be:	bf 01       	movw	r22, r30
    12c0:	6a 1b       	sub	r22, r26
    12c2:	7b 0b       	sbc	r23, r27
    12c4:	81 e1       	ldi	r24, 0x11	; 17
    12c6:	91 e2       	ldi	r25, 0x21	; 33
    12c8:	07 de       	rcall	.-1010   	; 0xed8 <rbu8_delete_oldest>
		return CMD_INVALID;
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	84 c0       	rjmp	.+264    	; 0x13d6 <getnextcmd+0x164>
		if (cmd_start[i] != STR_CMD_GET_VERSION[i])
		{
			printf("Match failed! i = %u, val1 = %c, val2 = %c\n", i, cmd_start[i], STR_CMD_GET_VERSION[i]);
		}
	}*/
	if (memcmp(cmd_start, STR_CMD_GET_VERSION, min(strlen(STR_CMD_GET_VERSION), strlen(cmd_start))) == 0)
    12ce:	fc 01       	movw	r30, r24
    12d0:	01 90       	ld	r0, Z+
    12d2:	00 20       	and	r0, r0
    12d4:	e9 f7       	brne	.-6      	; 0x12d0 <getnextcmd+0x5e>
    12d6:	31 97       	sbiw	r30, 0x01	; 1
    12d8:	af 01       	movw	r20, r30
    12da:	48 1b       	sub	r20, r24
    12dc:	59 0b       	sbc	r21, r25
    12de:	41 32       	cpi	r20, 0x21	; 33
    12e0:	51 05       	cpc	r21, r1
    12e2:	10 f0       	brcs	.+4      	; 0x12e8 <getnextcmd+0x76>
    12e4:	40 e2       	ldi	r20, 0x20	; 32
    12e6:	50 e0       	ldi	r21, 0x00	; 0
    12e8:	65 e1       	ldi	r22, 0x15	; 21
    12ea:	70 e2       	ldi	r23, 0x20	; 32
    12ec:	c8 01       	movw	r24, r16
    12ee:	87 d3       	rcall	.+1806   	; 0x19fe <memcmp>
    12f0:	89 2b       	or	r24, r25
    12f2:	51 f4       	brne	.+20     	; 0x1308 <getnextcmd+0x96>
	{
		rbu8_delete_oldest(&xbee_input_buff, (uint16_t)cmd_start - (uint16_t)buffer + strlen(STR_CMD_GET_VERSION)); //Delete everything through the end of the CMD
    12f4:	b8 01       	movw	r22, r16
    12f6:	6c 1b       	sub	r22, r28
    12f8:	7d 0b       	sbc	r23, r29
    12fa:	61 5e       	subi	r22, 0xE1	; 225
    12fc:	7f 4f       	sbci	r23, 0xFF	; 255
    12fe:	81 e1       	ldi	r24, 0x11	; 17
    1300:	91 e2       	ldi	r25, 0x21	; 33
    1302:	ea dd       	rcall	.-1068   	; 0xed8 <rbu8_delete_oldest>
		return CMD_GET_VERSION;
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	67 c0       	rjmp	.+206    	; 0x13d6 <getnextcmd+0x164>
	}
	else if (memcmp(cmd_start, STR_CMD_ARM, strlen(STR_CMD_ARM)) == 0)
    1308:	4e e1       	ldi	r20, 0x1E	; 30
    130a:	50 e0       	ldi	r21, 0x00	; 0
    130c:	66 e3       	ldi	r22, 0x36	; 54
    130e:	70 e2       	ldi	r23, 0x20	; 32
    1310:	c8 01       	movw	r24, r16
    1312:	75 d3       	rcall	.+1770   	; 0x19fe <memcmp>
    1314:	89 2b       	or	r24, r25
    1316:	51 f4       	brne	.+20     	; 0x132c <getnextcmd+0xba>
	{
		rbu8_delete_oldest(&xbee_input_buff, (uint16_t)cmd_start - (uint16_t)buffer + strlen(STR_CMD_ARM)); //Delete everything through the end of the CMD
    1318:	b8 01       	movw	r22, r16
    131a:	6c 1b       	sub	r22, r28
    131c:	7d 0b       	sbc	r23, r29
    131e:	63 5e       	subi	r22, 0xE3	; 227
    1320:	7f 4f       	sbci	r23, 0xFF	; 255
    1322:	81 e1       	ldi	r24, 0x11	; 17
    1324:	91 e2       	ldi	r25, 0x21	; 33
    1326:	d8 dd       	rcall	.-1104   	; 0xed8 <rbu8_delete_oldest>
		return CMD_ARM;
    1328:	82 e0       	ldi	r24, 0x02	; 2
	}
	else if (memcmp(cmd_start, STR_CMD_DISARM, strlen(STR_CMD_DISARM)) == 0)
    132a:	55 c0       	rjmp	.+170    	; 0x13d6 <getnextcmd+0x164>
    132c:	41 e2       	ldi	r20, 0x21	; 33
    132e:	50 e0       	ldi	r21, 0x00	; 0
    1330:	65 e5       	ldi	r22, 0x55	; 85
    1332:	70 e2       	ldi	r23, 0x20	; 32
    1334:	c8 01       	movw	r24, r16
    1336:	63 d3       	rcall	.+1734   	; 0x19fe <memcmp>
    1338:	89 2b       	or	r24, r25
	{
		rbu8_delete_oldest(&xbee_input_buff, (uint16_t)cmd_start - (uint16_t)buffer + strlen(STR_CMD_DISARM)); //Delete everything through the end of the CMD
    133a:	51 f4       	brne	.+20     	; 0x1350 <getnextcmd+0xde>
    133c:	b8 01       	movw	r22, r16
    133e:	6c 1b       	sub	r22, r28
    1340:	7d 0b       	sbc	r23, r29
    1342:	60 5e       	subi	r22, 0xE0	; 224
    1344:	7f 4f       	sbci	r23, 0xFF	; 255
    1346:	81 e1       	ldi	r24, 0x11	; 17
    1348:	91 e2       	ldi	r25, 0x21	; 33
		return CMD_DISARM;
    134a:	c6 dd       	rcall	.-1140   	; 0xed8 <rbu8_delete_oldest>
    134c:	83 e0       	ldi	r24, 0x03	; 3
	}
	else if (memcmp(cmd_start, STR_CMD_FIRE_PRIMARY, strlen(STR_CMD_FIRE_PRIMARY)) == 0)
    134e:	43 c0       	rjmp	.+134    	; 0x13d6 <getnextcmd+0x164>
    1350:	4e e1       	ldi	r20, 0x1E	; 30
    1352:	50 e0       	ldi	r21, 0x00	; 0
    1354:	67 e7       	ldi	r22, 0x77	; 119
    1356:	70 e2       	ldi	r23, 0x20	; 32
    1358:	c8 01       	movw	r24, r16
    135a:	51 d3       	rcall	.+1698   	; 0x19fe <memcmp>
    135c:	89 2b       	or	r24, r25
	{
		rbu8_delete_oldest(&xbee_input_buff, (uint16_t)cmd_start - (uint16_t)buffer + strlen(STR_CMD_FIRE_PRIMARY)); //Delete everything through the end of the CMD
    135e:	51 f4       	brne	.+20     	; 0x1374 <getnextcmd+0x102>
    1360:	b8 01       	movw	r22, r16
    1362:	6c 1b       	sub	r22, r28
    1364:	7d 0b       	sbc	r23, r29
    1366:	63 5e       	subi	r22, 0xE3	; 227
    1368:	7f 4f       	sbci	r23, 0xFF	; 255
    136a:	81 e1       	ldi	r24, 0x11	; 17
    136c:	91 e2       	ldi	r25, 0x21	; 33
		return CMD_FIRE_PRIMARY;
    136e:	b4 dd       	rcall	.-1176   	; 0xed8 <rbu8_delete_oldest>
    1370:	84 e0       	ldi	r24, 0x04	; 4
	}
	else if (memcmp(cmd_start, STR_CMD_FIRE_BACKUP, strlen(STR_CMD_FIRE_BACKUP)) == 0)
    1372:	31 c0       	rjmp	.+98     	; 0x13d6 <getnextcmd+0x164>
    1374:	4d e1       	ldi	r20, 0x1D	; 29
    1376:	50 e0       	ldi	r21, 0x00	; 0
    1378:	66 e9       	ldi	r22, 0x96	; 150
    137a:	70 e2       	ldi	r23, 0x20	; 32
    137c:	c8 01       	movw	r24, r16
    137e:	3f d3       	rcall	.+1662   	; 0x19fe <memcmp>
    1380:	89 2b       	or	r24, r25
	{
		rbu8_delete_oldest(&xbee_input_buff, (uint16_t)cmd_start - (uint16_t)buffer + strlen(STR_CMD_FIRE_BACKUP)); //Delete everything through the end of the CMD
    1382:	51 f4       	brne	.+20     	; 0x1398 <getnextcmd+0x126>
    1384:	b8 01       	movw	r22, r16
    1386:	6c 1b       	sub	r22, r28
    1388:	7d 0b       	sbc	r23, r29
    138a:	64 5e       	subi	r22, 0xE4	; 228
    138c:	7f 4f       	sbci	r23, 0xFF	; 255
    138e:	81 e1       	ldi	r24, 0x11	; 17
    1390:	91 e2       	ldi	r25, 0x21	; 33
		return CMD_FIRE_BACKUP;
    1392:	a2 dd       	rcall	.-1212   	; 0xed8 <rbu8_delete_oldest>
    1394:	85 e0       	ldi	r24, 0x05	; 5
	}
	else //Not a real command
	{
		printf("Not a real command\n");
    1396:	1f c0       	rjmp	.+62     	; 0x13d6 <getnextcmd+0x164>
    1398:	84 eb       	ldi	r24, 0xB4	; 180
    139a:	90 e2       	ldi	r25, 0x20	; 32
    139c:	b4 d3       	rcall	.+1896   	; 0x1b06 <puts>
		if (strlen((const char*)buffer) - ((uint16_t)cmd_start - (uint16_t)buffer) > LONGEST_VALID_CMD) //There's a lot of stuff that isn't a good command
    139e:	de 01       	movw	r26, r28
    13a0:	11 96       	adiw	r26, 0x01	; 1
    13a2:	fd 01       	movw	r30, r26
    13a4:	01 90       	ld	r0, Z+
    13a6:	00 20       	and	r0, r0
    13a8:	e9 f7       	brne	.-6      	; 0x13a4 <getnextcmd+0x132>
    13aa:	31 97       	sbiw	r30, 0x01	; 1
    13ac:	e0 1b       	sub	r30, r16
    13ae:	f1 0b       	sbc	r31, r17
    13b0:	b3 97       	sbiw	r30, 0x23	; 35
		{
			rbu8_delete_oldest(&xbee_input_buff, (uint16_t)cmd_start - (uint16_t)buffer + 1);
    13b2:	50 f0       	brcs	.+20     	; 0x13c8 <getnextcmd+0x156>
    13b4:	b8 01       	movw	r22, r16
    13b6:	6a 1b       	sub	r22, r26
    13b8:	7b 0b       	sbc	r23, r27
    13ba:	6f 5f       	subi	r22, 0xFF	; 255
    13bc:	7f 4f       	sbci	r23, 0xFF	; 255
    13be:	81 e1       	ldi	r24, 0x11	; 17
    13c0:	91 e2       	ldi	r25, 0x21	; 33
		}
		else
		{
			rbu8_delete_oldest(&xbee_input_buff, (uint16_t)cmd_start - (uint16_t)buffer); //Might become a valid command once more comes in
		}
		return CMD_INVALID;
    13c2:	8a dd       	rcall	.-1260   	; 0xed8 <rbu8_delete_oldest>
    13c4:	80 e0       	ldi	r24, 0x00	; 0
		{
			rbu8_delete_oldest(&xbee_input_buff, (uint16_t)cmd_start - (uint16_t)buffer + 1);
		}
		else
		{
			rbu8_delete_oldest(&xbee_input_buff, (uint16_t)cmd_start - (uint16_t)buffer); //Might become a valid command once more comes in
    13c6:	07 c0       	rjmp	.+14     	; 0x13d6 <getnextcmd+0x164>
    13c8:	b8 01       	movw	r22, r16
    13ca:	6a 1b       	sub	r22, r26
    13cc:	7b 0b       	sbc	r23, r27
    13ce:	81 e1       	ldi	r24, 0x11	; 17
    13d0:	91 e2       	ldi	r25, 0x21	; 33
    13d2:	82 dd       	rcall	.-1276   	; 0xed8 <rbu8_delete_oldest>
		}
		return CMD_INVALID;
    13d4:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    13d6:	cb 5b       	subi	r28, 0xBB	; 187
    13d8:	df 4f       	sbci	r29, 0xFF	; 255
    13da:	cd bf       	out	0x3d, r28	; 61
    13dc:	de bf       	out	0x3e, r29	; 62
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	08 95       	ret

000013e8 <firing_autosequence>:

void firing_autosequence(port_pin_t ematch_pin)
{
    13e8:	af 92       	push	r10
    13ea:	bf 92       	push	r11
    13ec:	cf 92       	push	r12
    13ee:	df 92       	push	r13
    13f0:	ef 92       	push	r14
    13f2:	ff 92       	push	r15
    13f4:	0f 93       	push	r16
    13f6:	1f 93       	push	r17
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
    13fc:	18 2f       	mov	r17, r24
	//TODO: set buzzer duty cycle to 100%
	isr_buzzer_duty = BUZZER_CONTINUOUS;
    13fe:	82 e0       	ldi	r24, 0x02	; 2
    1400:	80 93 10 21 	sts	0x2110, r24	; 0x802110 <isr_buzzer_duty>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1404:	0f 2e       	mov	r0, r31
    1406:	f0 e4       	ldi	r31, 0x40	; 64
    1408:	ef 2e       	mov	r14, r31
    140a:	f6 e0       	ldi	r31, 0x06	; 6
    140c:	ff 2e       	mov	r15, r31
    140e:	f0 2d       	mov	r31, r0
    1410:	68 94       	set
    1412:	bb 24       	eor	r11, r11
    1414:	b5 f8       	bld	r11, 5
    1416:	f7 01       	movw	r30, r14
    1418:	b5 82       	std	Z+5, r11	; 0x05
	set_12V_powered(true);
	delay_s(7); //Charge capacitor bank
    141a:	68 e5       	ldi	r22, 0x58	; 88
    141c:	79 ea       	ldi	r23, 0xA9	; 169
    141e:	89 e3       	ldi	r24, 0x39	; 57
    1420:	92 e0       	ldi	r25, 0x02	; 2
    1422:	0c de       	rcall	.-1000   	; 0x103c <__portable_avr_delay_cycles>
    1424:	0f 2e       	mov	r0, r31
    1426:	c1 2c       	mov	r12, r1
    1428:	f6 e0       	ldi	r31, 0x06	; 6
    142a:	df 2e       	mov	r13, r31
    142c:	f0 2d       	mov	r31, r0
    142e:	aa 24       	eor	r10, r10
    1430:	a3 94       	inc	r10
    1432:	f6 01       	movw	r30, r12
    1434:	a5 82       	std	Z+5, r10	; 0x05
	retract_solenoid();
	delay_ms(500); //Provide time for solenoid to physically retract
    1436:	6b ea       	ldi	r22, 0xAB	; 171
    1438:	70 eb       	ldi	r23, 0xB0	; 176
    143a:	88 e2       	ldi	r24, 0x28	; 40
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	fe dd       	rcall	.-1028   	; 0x103c <__portable_avr_delay_cycles>
	return pin >> 3;
}

__always_inline static PORT_t *arch_ioport_port_to_base(ioport_port_t port)
{
	return (PORT_t *)((uintptr_t)IOPORT_BASE_ADDRESS +
    1440:	c1 2f       	mov	r28, r17
    1442:	c6 95       	lsr	r28
    1444:	c6 95       	lsr	r28
    1446:	c6 95       	lsr	r28
    1448:	f0 e2       	ldi	r31, 0x20	; 32
    144a:	cf 9f       	mul	r28, r31
    144c:	e0 01       	movw	r28, r0
    144e:	11 24       	eor	r1, r1
    1450:	da 5f       	subi	r29, 0xFA	; 250
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(
		ioport_pin_t pin)
{
	return 1U << (pin & 0x07);
    1452:	81 2f       	mov	r24, r17
    1454:	87 70       	andi	r24, 0x07	; 7
    1456:	01 e0       	ldi	r16, 0x01	; 1
    1458:	10 e0       	ldi	r17, 0x00	; 0
    145a:	02 c0       	rjmp	.+4      	; 0x1460 <firing_autosequence+0x78>
    145c:	00 0f       	add	r16, r16
    145e:	11 1f       	adc	r17, r17
    1460:	8a 95       	dec	r24
    1462:	e2 f7       	brpl	.-8      	; 0x145c <firing_autosequence+0x74>
		bool level)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->OUTSET = arch_ioport_pin_to_mask(pin);
    1464:	0d 83       	std	Y+5, r16	; 0x05
	ioport_set_pin_high(ematch_pin); //Fire E-match
	delay_ms(3000); //Allow time for E-match to fire
    1466:	61 e0       	ldi	r22, 0x01	; 1
    1468:	74 e2       	ldi	r23, 0x24	; 36
    146a:	84 ef       	ldi	r24, 0xF4	; 244
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	e6 dd       	rcall	.-1076   	; 0x103c <__portable_avr_delay_cycles>
	} else {
		base->OUTCLR = arch_ioport_pin_to_mask(pin);
    1470:	0e 83       	std	Y+6, r16	; 0x06
    1472:	f6 01       	movw	r30, r12
    1474:	a6 82       	std	Z+6, r10	; 0x06
    1476:	f7 01       	movw	r30, r14
    1478:	b6 82       	std	Z+6, r11	; 0x06
	ioport_set_pin_low(ematch_pin); //Stop firing
	extend_solenoid(); //De-energize
	set_12V_powered(false); //Stop charging capacitor bank
}
    147a:	df 91       	pop	r29
    147c:	cf 91       	pop	r28
    147e:	1f 91       	pop	r17
    1480:	0f 91       	pop	r16
    1482:	ff 90       	pop	r15
    1484:	ef 90       	pop	r14
    1486:	df 90       	pop	r13
    1488:	cf 90       	pop	r12
    148a:	bf 90       	pop	r11
    148c:	af 90       	pop	r10
    148e:	08 95       	ret

00001490 <main>:
	rbu8_write(&xbee_input_buff, &temp, 1U);
}

int main (void)
{
	sysclk_init();
    1490:	85 dd       	rcall	.-1270   	; 0xf9c <sysclk_init>
	pin_setup();
    1492:	b0 de       	rcall	.-672    	; 0x11f4 <pin_setup>
    1494:	22 e1       	ldi	r18, 0x12	; 18
	LED_setup();
	buzzer_setup();
	UART_computer_init(&COMMS_USART, &PORTC, USART_TX_PIN, USART_RX_PIN);
    1496:	43 e1       	ldi	r20, 0x13	; 19
    1498:	60 e4       	ldi	r22, 0x40	; 64
    149a:	76 e0       	ldi	r23, 0x06	; 6
    149c:	80 ea       	ldi	r24, 0xA0	; 160
    149e:	98 e0       	ldi	r25, 0x08	; 8
    14a0:	d0 da       	rcall	.-2656   	; 0xa42 <UART_computer_init>
    14a2:	c2 e0       	ldi	r28, 0x02	; 2
	isr_buzzer_duty = BUZZER_CONTINUOUS;
    14a4:	c0 93 10 21 	sts	0x2110, r28	; 0x802110 <isr_buzzer_duty>
    14a8:	20 e0       	ldi	r18, 0x00	; 0

	devicestate state = STATE_DISARMED;
	devicecommand currentcmd = CMD_INVALID;
	
	//Enable interrupts for serial receive and buzzer control
	TC0_setup(&BUZZER_INTERRUPT_TC, BUZZER_INTERRUPT_SYSCLK_PORT, 0b0000, false);
    14aa:	40 e0       	ldi	r20, 0x00	; 0
    14ac:	65 e0       	ldi	r22, 0x05	; 5
    14ae:	80 e0       	ldi	r24, 0x00	; 0
    14b0:	9a e0       	ldi	r25, 0x0A	; 10
    14b2:	9d d9       	rcall	.-3270   	; 0x7ee <TC0_setup>
    14b4:	00 e0       	ldi	r16, 0x00	; 0
	TC_config(&BUZZER_INTERRUPT_TC, 2000.0f, 0.5f);
    14b6:	10 e0       	ldi	r17, 0x00	; 0
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	3f e3       	ldi	r19, 0x3F	; 63
    14bc:	40 e0       	ldi	r20, 0x00	; 0
    14be:	50 e0       	ldi	r21, 0x00	; 0
    14c0:	6a ef       	ldi	r22, 0xFA	; 250
    14c2:	74 e4       	ldi	r23, 0x44	; 68
    14c4:	80 e0       	ldi	r24, 0x00	; 0
    14c6:	9a e0       	ldi	r25, 0x0A	; 10
    14c8:	71 da       	rcall	.-2846   	; 0x9ac <TC_config>
    14ca:	c0 93 06 0a 	sts	0x0A06, r28	; 0x800a06 <__TEXT_REGION_LENGTH__+0x700a06>
	BUZZER_INTERRUPT_TC.INTCTRLA = TC_OVFINTLVL_MED_gc; //Enable buzzer TC interrupt, medium-level
    14ce:	20 e0       	ldi	r18, 0x00	; 0
	
	TC0_setup(&CLOCK_INTERRUPT_TC, CLOCK_INTERRUPT_SYSCLK_PORT, 0b0000, false);
    14d0:	40 e0       	ldi	r20, 0x00	; 0
    14d2:	64 e0       	ldi	r22, 0x04	; 4
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	99 e0       	ldi	r25, 0x09	; 9
    14d8:	8a d9       	rcall	.-3308   	; 0x7ee <TC0_setup>
    14da:	00 e0       	ldi	r16, 0x00	; 0
	TC_config(&CLOCK_INTERRUPT_TC, 10.0f, 0.5f);
    14dc:	10 e0       	ldi	r17, 0x00	; 0
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	3f e3       	ldi	r19, 0x3F	; 63
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	60 e2       	ldi	r22, 0x20	; 32
    14e8:	71 e4       	ldi	r23, 0x41	; 65
    14ea:	80 e0       	ldi	r24, 0x00	; 0
    14ec:	99 e0       	ldi	r25, 0x09	; 9
    14ee:	5e da       	rcall	.-2884   	; 0x9ac <TC_config>
	CLOCK_INTERRUPT_TC.INTCTRLA = TC_OVFINTLVL_HI_gc; //Enable buzzer TC interrupt, high-level
    14f0:	83 e0       	ldi	r24, 0x03	; 3
    14f2:	80 93 06 09 	sts	0x0906, r24	; 0x800906 <__TEXT_REGION_LENGTH__+0x700906>
	
	//Enable USART RX interrupt (clock and whatnot already enabled by uart_computer_init)
	input_buff_setup();
    14f6:	76 de       	rcall	.-788    	; 0x11e4 <input_buff_setup>
    14f8:	e0 ea       	ldi	r30, 0xA0	; 160
	COMMS_USART.CTRLA |= (USART_INT_LVL_LO << 4); //Set USART RX interrupt to low-level
    14fa:	f8 e0       	ldi	r31, 0x08	; 8
    14fc:	83 81       	ldd	r24, Z+3	; 0x03
    14fe:	80 61       	ori	r24, 0x10	; 16
    1500:	83 83       	std	Z+3, r24	; 0x03
    1502:	e0 ea       	ldi	r30, 0xA0	; 160
	PMIC.CTRL |= PMIC_HILVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_LOLVLEN_bm; //All interrupt levels enabled
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	82 81       	ldd	r24, Z+2	; 0x02
    1508:	87 60       	ori	r24, 0x07	; 7
    150a:	82 83       	std	Z+2, r24	; 0x02
	sei(); //Interrupts on
    150c:	78 94       	sei
	
	TC0_setup(&LED_1_TC, SYSCLK_PORT_C, 0b0001, true);
    150e:	21 e0       	ldi	r18, 0x01	; 1
    1510:	41 e0       	ldi	r20, 0x01	; 1
    1512:	63 e0       	ldi	r22, 0x03	; 3
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	98 e0       	ldi	r25, 0x08	; 8
	TC0_setup(&LED_2_TC, SYSCLK_PORT_D, 0b0001, true);
    1518:	6a d9       	rcall	.-3372   	; 0x7ee <TC0_setup>
    151a:	21 e0       	ldi	r18, 0x01	; 1
    151c:	41 e0       	ldi	r20, 0x01	; 1
    151e:	64 e0       	ldi	r22, 0x04	; 4
    1520:	80 e0       	ldi	r24, 0x00	; 0
    1522:	99 e0       	ldi	r25, 0x09	; 9
    1524:	64 d9       	rcall	.-3384   	; 0x7ee <TC0_setup>
	config_LEDs_and_buzzer(state);
    1526:	80 e0       	ldi	r24, 0x00	; 0
    1528:	3a de       	rcall	.-908    	; 0x119e <config_LEDs_and_buzzer>
    152a:	c0 e0       	ldi	r28, 0x00	; 0
	LED_setup();
	buzzer_setup();
	UART_computer_init(&COMMS_USART, &PORTC, USART_TX_PIN, USART_RX_PIN);
	isr_buzzer_duty = BUZZER_CONTINUOUS;

	devicestate state = STATE_DISARMED;
    152c:	0f 2e       	mov	r0, r31
		currentcmd = getnextcmd();
		
		//This command is valid in any state
		if (currentcmd == CMD_GET_VERSION)
		{
			printf("%s V%i.%i.%i - %s\n", DEVICE_NAME, VERSION_MAJOR, VERSION_MINOR, VERSION_PATCH, INFO_STATUS);
    152e:	f7 ec       	ldi	r31, 0xC7	; 199
    1530:	cf 2e       	mov	r12, r31
    1532:	f0 e2       	ldi	r31, 0x20	; 32
    1534:	df 2e       	mov	r13, r31
    1536:	f0 2d       	mov	r31, r0
    1538:	0f 2e       	mov	r0, r31
    153a:	f7 ed       	ldi	r31, 0xD7	; 215
    153c:	ef 2e       	mov	r14, r31
    153e:	f0 e2       	ldi	r31, 0x20	; 32
    1540:	ff 2e       	mov	r15, r31
    1542:	f0 2d       	mov	r31, r0
    1544:	01 ef       	ldi	r16, 0xF1	; 241
	config_LEDs_and_buzzer(state);
	
	while (1)
	{
		//printf("Running main loop\n");
		delay_ms(100);
    1546:	10 e2       	ldi	r17, 0x20	; 32
    1548:	66 e5       	ldi	r22, 0x56	; 86
    154a:	73 e2       	ldi	r23, 0x23	; 35
    154c:	88 e0       	ldi	r24, 0x08	; 8
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	75 dd       	rcall	.-1302   	; 0x103c <__portable_avr_delay_cycles>
		currentcmd = getnextcmd();
    1552:	8f de       	rcall	.-738    	; 0x1272 <getnextcmd>
    1554:	81 30       	cpi	r24, 0x01	; 1
		
		//This command is valid in any state
		if (currentcmd == CMD_GET_VERSION)
    1556:	99 f4       	brne	.+38     	; 0x157e <main+0xee>
		{
			printf("%s V%i.%i.%i - %s\n", DEVICE_NAME, VERSION_MAJOR, VERSION_MINOR, VERSION_PATCH, INFO_STATUS);
    1558:	df 92       	push	r13
    155a:	cf 92       	push	r12
    155c:	1f 92       	push	r1
    155e:	1f 92       	push	r1
    1560:	1f 92       	push	r1
    1562:	1f 92       	push	r1
    1564:	1f 92       	push	r1
    1566:	8f 93       	push	r24
    1568:	ff 92       	push	r15
    156a:	ef 92       	push	r14
    156c:	1f 93       	push	r17
    156e:	0f 93       	push	r16
    1570:	b7 d2       	rcall	.+1390   	; 0x1ae0 <printf>
    1572:	8d b7       	in	r24, 0x3d	; 61
    1574:	9e b7       	in	r25, 0x3e	; 62
    1576:	0c 96       	adiw	r24, 0x0c	; 12
    1578:	8d bf       	out	0x3d, r24	; 61
    157a:	9e bf       	out	0x3e, r25	; 62
    157c:	e5 cf       	rjmp	.-54     	; 0x1548 <main+0xb8>
		}
		else if (state == STATE_DISARMED)
    157e:	c1 11       	cpse	r28, r1
    1580:	06 c0       	rjmp	.+12     	; 0x158e <main+0xfe>
		{
			//Valid commands: arm
			if (currentcmd == CMD_ARM)
    1582:	82 30       	cpi	r24, 0x02	; 2
    1584:	09 f7       	brne	.-62     	; 0x1548 <main+0xb8>
			{
				set_buzzer_freq(BUZZER_ARMED_FREQ);
				state = STATE_ARMED;
				config_LEDs_and_buzzer(state);
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	0a de       	rcall	.-1004   	; 0x119e <config_LEDs_and_buzzer>
		{
			//Valid commands: arm
			if (currentcmd == CMD_ARM)
			{
				set_buzzer_freq(BUZZER_ARMED_FREQ);
				state = STATE_ARMED;
    158a:	c1 e0       	ldi	r28, 0x01	; 1
				config_LEDs_and_buzzer(state);
			}
			//No other commands are valid, perform no processing on them
		}
		else if (state == STATE_ARMED)
    158c:	dd cf       	rjmp	.-70     	; 0x1548 <main+0xb8>
    158e:	c1 30       	cpi	r28, 0x01	; 1
		{
			//Valid commands: disarm, fire primary, fire backup
			if (currentcmd == CMD_DISARM)
    1590:	d9 f6       	brne	.-74     	; 0x1548 <main+0xb8>
    1592:	83 30       	cpi	r24, 0x03	; 3
			{
				state = STATE_DISARMED;
				config_LEDs_and_buzzer(state);
    1594:	21 f4       	brne	.+8      	; 0x159e <main+0x10e>
    1596:	80 e0       	ldi	r24, 0x00	; 0
		else if (state == STATE_ARMED)
		{
			//Valid commands: disarm, fire primary, fire backup
			if (currentcmd == CMD_DISARM)
			{
				state = STATE_DISARMED;
    1598:	02 de       	rcall	.-1020   	; 0x119e <config_LEDs_and_buzzer>
    159a:	c0 e0       	ldi	r28, 0x00	; 0
				config_LEDs_and_buzzer(state);
				set_buzzer_freq(BUZZER_DISARMED_FREQ);
			}
			else if (currentcmd == CMD_FIRE_PRIMARY)
    159c:	d5 cf       	rjmp	.-86     	; 0x1548 <main+0xb8>
    159e:	84 30       	cpi	r24, 0x04	; 4
			{
				firing_autosequence(EMATCH_PRIMARY_PIN);
    15a0:	31 f4       	brne	.+12     	; 0x15ae <main+0x11e>
    15a2:	80 e2       	ldi	r24, 0x20	; 32
    15a4:	21 df       	rcall	.-446    	; 0x13e8 <firing_autosequence>
				state = STATE_DISARMED;
				config_LEDs_and_buzzer(state);
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	fa dd       	rcall	.-1036   	; 0x119e <config_LEDs_and_buzzer>
    15aa:	c0 e0       	ldi	r28, 0x00	; 0
				set_buzzer_freq(BUZZER_DISARMED_FREQ);
			}
			else if (currentcmd == CMD_FIRE_PRIMARY)
			{
				firing_autosequence(EMATCH_PRIMARY_PIN);
				state = STATE_DISARMED;
    15ac:	cd cf       	rjmp	.-102    	; 0x1548 <main+0xb8>
    15ae:	85 30       	cpi	r24, 0x05	; 5
				config_LEDs_and_buzzer(state);
				set_buzzer_freq(BUZZER_DISARMED_FREQ);
			}
			else if (currentcmd == CMD_FIRE_BACKUP)
    15b0:	59 f6       	brne	.-106    	; 0x1548 <main+0xb8>
    15b2:	81 e2       	ldi	r24, 0x21	; 33
			{
				firing_autosequence(EMATCH_BACKUP_PIN);
    15b4:	19 df       	rcall	.-462    	; 0x13e8 <firing_autosequence>
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	f2 dd       	rcall	.-1052   	; 0x119e <config_LEDs_and_buzzer>
				state = STATE_DISARMED;
				config_LEDs_and_buzzer(state);
    15ba:	c0 e0       	ldi	r28, 0x00	; 0
    15bc:	c5 cf       	rjmp	.-118    	; 0x1548 <main+0xb8>

000015be <__subsf3>:
    15be:	50 58       	subi	r21, 0x80	; 128

000015c0 <__addsf3>:
				set_buzzer_freq(BUZZER_DISARMED_FREQ);
			}
			else if (currentcmd == CMD_FIRE_BACKUP)
			{
				firing_autosequence(EMATCH_BACKUP_PIN);
				state = STATE_DISARMED;
    15c0:	bb 27       	eor	r27, r27
    15c2:	aa 27       	eor	r26, r26
    15c4:	0e d0       	rcall	.+28     	; 0x15e2 <__addsf3x>
    15c6:	48 c1       	rjmp	.+656    	; 0x1858 <__fp_round>
    15c8:	39 d1       	rcall	.+626    	; 0x183c <__fp_pscA>
    15ca:	30 f0       	brcs	.+12     	; 0x15d8 <__addsf3+0x18>
    15cc:	3e d1       	rcall	.+636    	; 0x184a <__fp_pscB>
    15ce:	20 f0       	brcs	.+8      	; 0x15d8 <__addsf3+0x18>
    15d0:	31 f4       	brne	.+12     	; 0x15de <__addsf3+0x1e>
    15d2:	9f 3f       	cpi	r25, 0xFF	; 255
    15d4:	11 f4       	brne	.+4      	; 0x15da <__addsf3+0x1a>
    15d6:	1e f4       	brtc	.+6      	; 0x15de <__addsf3+0x1e>
    15d8:	2e c1       	rjmp	.+604    	; 0x1836 <__fp_nan>
    15da:	0e f4       	brtc	.+2      	; 0x15de <__addsf3+0x1e>
    15dc:	e0 95       	com	r30
    15de:	e7 fb       	bst	r30, 7
    15e0:	24 c1       	rjmp	.+584    	; 0x182a <__fp_inf>

000015e2 <__addsf3x>:
    15e2:	e9 2f       	mov	r30, r25
    15e4:	4a d1       	rcall	.+660    	; 0x187a <__fp_split3>
    15e6:	80 f3       	brcs	.-32     	; 0x15c8 <__addsf3+0x8>
    15e8:	ba 17       	cp	r27, r26
    15ea:	62 07       	cpc	r22, r18
    15ec:	73 07       	cpc	r23, r19
    15ee:	84 07       	cpc	r24, r20
    15f0:	95 07       	cpc	r25, r21
    15f2:	18 f0       	brcs	.+6      	; 0x15fa <__addsf3x+0x18>
    15f4:	71 f4       	brne	.+28     	; 0x1612 <__addsf3x+0x30>
    15f6:	9e f5       	brtc	.+102    	; 0x165e <__addsf3x+0x7c>
    15f8:	62 c1       	rjmp	.+708    	; 0x18be <__fp_zero>
    15fa:	0e f4       	brtc	.+2      	; 0x15fe <__addsf3x+0x1c>
    15fc:	e0 95       	com	r30
    15fe:	0b 2e       	mov	r0, r27
    1600:	ba 2f       	mov	r27, r26
    1602:	a0 2d       	mov	r26, r0
    1604:	0b 01       	movw	r0, r22
    1606:	b9 01       	movw	r22, r18
    1608:	90 01       	movw	r18, r0
    160a:	0c 01       	movw	r0, r24
    160c:	ca 01       	movw	r24, r20
    160e:	a0 01       	movw	r20, r0
    1610:	11 24       	eor	r1, r1
    1612:	ff 27       	eor	r31, r31
    1614:	59 1b       	sub	r21, r25
    1616:	99 f0       	breq	.+38     	; 0x163e <__addsf3x+0x5c>
    1618:	59 3f       	cpi	r21, 0xF9	; 249
    161a:	50 f4       	brcc	.+20     	; 0x1630 <__addsf3x+0x4e>
    161c:	50 3e       	cpi	r21, 0xE0	; 224
    161e:	68 f1       	brcs	.+90     	; 0x167a <__addsf3x+0x98>
    1620:	1a 16       	cp	r1, r26
    1622:	f0 40       	sbci	r31, 0x00	; 0
    1624:	a2 2f       	mov	r26, r18
    1626:	23 2f       	mov	r18, r19
    1628:	34 2f       	mov	r19, r20
    162a:	44 27       	eor	r20, r20
    162c:	58 5f       	subi	r21, 0xF8	; 248
    162e:	f3 cf       	rjmp	.-26     	; 0x1616 <__addsf3x+0x34>
    1630:	46 95       	lsr	r20
    1632:	37 95       	ror	r19
    1634:	27 95       	ror	r18
    1636:	a7 95       	ror	r26
    1638:	f0 40       	sbci	r31, 0x00	; 0
    163a:	53 95       	inc	r21
    163c:	c9 f7       	brne	.-14     	; 0x1630 <__addsf3x+0x4e>
    163e:	7e f4       	brtc	.+30     	; 0x165e <__addsf3x+0x7c>
    1640:	1f 16       	cp	r1, r31
    1642:	ba 0b       	sbc	r27, r26
    1644:	62 0b       	sbc	r22, r18
    1646:	73 0b       	sbc	r23, r19
    1648:	84 0b       	sbc	r24, r20
    164a:	ba f0       	brmi	.+46     	; 0x167a <__addsf3x+0x98>
    164c:	91 50       	subi	r25, 0x01	; 1
    164e:	a1 f0       	breq	.+40     	; 0x1678 <__addsf3x+0x96>
    1650:	ff 0f       	add	r31, r31
    1652:	bb 1f       	adc	r27, r27
    1654:	66 1f       	adc	r22, r22
    1656:	77 1f       	adc	r23, r23
    1658:	88 1f       	adc	r24, r24
    165a:	c2 f7       	brpl	.-16     	; 0x164c <__addsf3x+0x6a>
    165c:	0e c0       	rjmp	.+28     	; 0x167a <__addsf3x+0x98>
    165e:	ba 0f       	add	r27, r26
    1660:	62 1f       	adc	r22, r18
    1662:	73 1f       	adc	r23, r19
    1664:	84 1f       	adc	r24, r20
    1666:	48 f4       	brcc	.+18     	; 0x167a <__addsf3x+0x98>
    1668:	87 95       	ror	r24
    166a:	77 95       	ror	r23
    166c:	67 95       	ror	r22
    166e:	b7 95       	ror	r27
    1670:	f7 95       	ror	r31
    1672:	9e 3f       	cpi	r25, 0xFE	; 254
    1674:	08 f0       	brcs	.+2      	; 0x1678 <__addsf3x+0x96>
    1676:	b3 cf       	rjmp	.-154    	; 0x15de <__addsf3+0x1e>
    1678:	93 95       	inc	r25
    167a:	88 0f       	add	r24, r24
    167c:	08 f0       	brcs	.+2      	; 0x1680 <__addsf3x+0x9e>
    167e:	99 27       	eor	r25, r25
    1680:	ee 0f       	add	r30, r30
    1682:	97 95       	ror	r25
    1684:	87 95       	ror	r24
    1686:	08 95       	ret

00001688 <__divsf3>:
    1688:	0c d0       	rcall	.+24     	; 0x16a2 <__divsf3x>
    168a:	e6 c0       	rjmp	.+460    	; 0x1858 <__fp_round>
    168c:	de d0       	rcall	.+444    	; 0x184a <__fp_pscB>
    168e:	40 f0       	brcs	.+16     	; 0x16a0 <__divsf3+0x18>
    1690:	d5 d0       	rcall	.+426    	; 0x183c <__fp_pscA>
    1692:	30 f0       	brcs	.+12     	; 0x16a0 <__divsf3+0x18>
    1694:	21 f4       	brne	.+8      	; 0x169e <__divsf3+0x16>
    1696:	5f 3f       	cpi	r21, 0xFF	; 255
    1698:	19 f0       	breq	.+6      	; 0x16a0 <__divsf3+0x18>
    169a:	c7 c0       	rjmp	.+398    	; 0x182a <__fp_inf>
    169c:	51 11       	cpse	r21, r1
    169e:	10 c1       	rjmp	.+544    	; 0x18c0 <__fp_szero>
    16a0:	ca c0       	rjmp	.+404    	; 0x1836 <__fp_nan>

000016a2 <__divsf3x>:
    16a2:	eb d0       	rcall	.+470    	; 0x187a <__fp_split3>
    16a4:	98 f3       	brcs	.-26     	; 0x168c <__divsf3+0x4>

000016a6 <__divsf3_pse>:
    16a6:	99 23       	and	r25, r25
    16a8:	c9 f3       	breq	.-14     	; 0x169c <__divsf3+0x14>
    16aa:	55 23       	and	r21, r21
    16ac:	b1 f3       	breq	.-20     	; 0x169a <__divsf3+0x12>
    16ae:	95 1b       	sub	r25, r21
    16b0:	55 0b       	sbc	r21, r21
    16b2:	bb 27       	eor	r27, r27
    16b4:	aa 27       	eor	r26, r26
    16b6:	62 17       	cp	r22, r18
    16b8:	73 07       	cpc	r23, r19
    16ba:	84 07       	cpc	r24, r20
    16bc:	38 f0       	brcs	.+14     	; 0x16cc <__divsf3_pse+0x26>
    16be:	9f 5f       	subi	r25, 0xFF	; 255
    16c0:	5f 4f       	sbci	r21, 0xFF	; 255
    16c2:	22 0f       	add	r18, r18
    16c4:	33 1f       	adc	r19, r19
    16c6:	44 1f       	adc	r20, r20
    16c8:	aa 1f       	adc	r26, r26
    16ca:	a9 f3       	breq	.-22     	; 0x16b6 <__divsf3_pse+0x10>
    16cc:	33 d0       	rcall	.+102    	; 0x1734 <__divsf3_pse+0x8e>
    16ce:	0e 2e       	mov	r0, r30
    16d0:	3a f0       	brmi	.+14     	; 0x16e0 <__divsf3_pse+0x3a>
    16d2:	e0 e8       	ldi	r30, 0x80	; 128
    16d4:	30 d0       	rcall	.+96     	; 0x1736 <__divsf3_pse+0x90>
    16d6:	91 50       	subi	r25, 0x01	; 1
    16d8:	50 40       	sbci	r21, 0x00	; 0
    16da:	e6 95       	lsr	r30
    16dc:	00 1c       	adc	r0, r0
    16de:	ca f7       	brpl	.-14     	; 0x16d2 <__divsf3_pse+0x2c>
    16e0:	29 d0       	rcall	.+82     	; 0x1734 <__divsf3_pse+0x8e>
    16e2:	fe 2f       	mov	r31, r30
    16e4:	27 d0       	rcall	.+78     	; 0x1734 <__divsf3_pse+0x8e>
    16e6:	66 0f       	add	r22, r22
    16e8:	77 1f       	adc	r23, r23
    16ea:	88 1f       	adc	r24, r24
    16ec:	bb 1f       	adc	r27, r27
    16ee:	26 17       	cp	r18, r22
    16f0:	37 07       	cpc	r19, r23
    16f2:	48 07       	cpc	r20, r24
    16f4:	ab 07       	cpc	r26, r27
    16f6:	b0 e8       	ldi	r27, 0x80	; 128
    16f8:	09 f0       	breq	.+2      	; 0x16fc <__divsf3_pse+0x56>
    16fa:	bb 0b       	sbc	r27, r27
    16fc:	80 2d       	mov	r24, r0
    16fe:	bf 01       	movw	r22, r30
    1700:	ff 27       	eor	r31, r31
    1702:	93 58       	subi	r25, 0x83	; 131
    1704:	5f 4f       	sbci	r21, 0xFF	; 255
    1706:	2a f0       	brmi	.+10     	; 0x1712 <__divsf3_pse+0x6c>
    1708:	9e 3f       	cpi	r25, 0xFE	; 254
    170a:	51 05       	cpc	r21, r1
    170c:	68 f0       	brcs	.+26     	; 0x1728 <__divsf3_pse+0x82>
    170e:	8d c0       	rjmp	.+282    	; 0x182a <__fp_inf>
    1710:	d7 c0       	rjmp	.+430    	; 0x18c0 <__fp_szero>
    1712:	5f 3f       	cpi	r21, 0xFF	; 255
    1714:	ec f3       	brlt	.-6      	; 0x1710 <__divsf3_pse+0x6a>
    1716:	98 3e       	cpi	r25, 0xE8	; 232
    1718:	dc f3       	brlt	.-10     	; 0x1710 <__divsf3_pse+0x6a>
    171a:	86 95       	lsr	r24
    171c:	77 95       	ror	r23
    171e:	67 95       	ror	r22
    1720:	b7 95       	ror	r27
    1722:	f7 95       	ror	r31
    1724:	9f 5f       	subi	r25, 0xFF	; 255
    1726:	c9 f7       	brne	.-14     	; 0x171a <__divsf3_pse+0x74>
    1728:	88 0f       	add	r24, r24
    172a:	91 1d       	adc	r25, r1
    172c:	96 95       	lsr	r25
    172e:	87 95       	ror	r24
    1730:	97 f9       	bld	r25, 7
    1732:	08 95       	ret
    1734:	e1 e0       	ldi	r30, 0x01	; 1
    1736:	66 0f       	add	r22, r22
    1738:	77 1f       	adc	r23, r23
    173a:	88 1f       	adc	r24, r24
    173c:	bb 1f       	adc	r27, r27
    173e:	62 17       	cp	r22, r18
    1740:	73 07       	cpc	r23, r19
    1742:	84 07       	cpc	r24, r20
    1744:	ba 07       	cpc	r27, r26
    1746:	20 f0       	brcs	.+8      	; 0x1750 <__divsf3_pse+0xaa>
    1748:	62 1b       	sub	r22, r18
    174a:	73 0b       	sbc	r23, r19
    174c:	84 0b       	sbc	r24, r20
    174e:	ba 0b       	sbc	r27, r26
    1750:	ee 1f       	adc	r30, r30
    1752:	88 f7       	brcc	.-30     	; 0x1736 <__divsf3_pse+0x90>
    1754:	e0 95       	com	r30
    1756:	08 95       	ret

00001758 <__fixunssfsi>:
    1758:	98 d0       	rcall	.+304    	; 0x188a <__fp_splitA>
    175a:	88 f0       	brcs	.+34     	; 0x177e <__fixunssfsi+0x26>
    175c:	9f 57       	subi	r25, 0x7F	; 127
    175e:	90 f0       	brcs	.+36     	; 0x1784 <__fixunssfsi+0x2c>
    1760:	b9 2f       	mov	r27, r25
    1762:	99 27       	eor	r25, r25
    1764:	b7 51       	subi	r27, 0x17	; 23
    1766:	a0 f0       	brcs	.+40     	; 0x1790 <__fixunssfsi+0x38>
    1768:	d1 f0       	breq	.+52     	; 0x179e <__fixunssfsi+0x46>
    176a:	66 0f       	add	r22, r22
    176c:	77 1f       	adc	r23, r23
    176e:	88 1f       	adc	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	1a f0       	brmi	.+6      	; 0x177a <__fixunssfsi+0x22>
    1774:	ba 95       	dec	r27
    1776:	c9 f7       	brne	.-14     	; 0x176a <__fixunssfsi+0x12>
    1778:	12 c0       	rjmp	.+36     	; 0x179e <__fixunssfsi+0x46>
    177a:	b1 30       	cpi	r27, 0x01	; 1
    177c:	81 f0       	breq	.+32     	; 0x179e <__fixunssfsi+0x46>
    177e:	9f d0       	rcall	.+318    	; 0x18be <__fp_zero>
    1780:	b1 e0       	ldi	r27, 0x01	; 1
    1782:	08 95       	ret
    1784:	9c c0       	rjmp	.+312    	; 0x18be <__fp_zero>
    1786:	67 2f       	mov	r22, r23
    1788:	78 2f       	mov	r23, r24
    178a:	88 27       	eor	r24, r24
    178c:	b8 5f       	subi	r27, 0xF8	; 248
    178e:	39 f0       	breq	.+14     	; 0x179e <__fixunssfsi+0x46>
    1790:	b9 3f       	cpi	r27, 0xF9	; 249
    1792:	cc f3       	brlt	.-14     	; 0x1786 <__fixunssfsi+0x2e>
    1794:	86 95       	lsr	r24
    1796:	77 95       	ror	r23
    1798:	67 95       	ror	r22
    179a:	b3 95       	inc	r27
    179c:	d9 f7       	brne	.-10     	; 0x1794 <__fixunssfsi+0x3c>
    179e:	3e f4       	brtc	.+14     	; 0x17ae <__fixunssfsi+0x56>
    17a0:	90 95       	com	r25
    17a2:	80 95       	com	r24
    17a4:	70 95       	com	r23
    17a6:	61 95       	neg	r22
    17a8:	7f 4f       	sbci	r23, 0xFF	; 255
    17aa:	8f 4f       	sbci	r24, 0xFF	; 255
    17ac:	9f 4f       	sbci	r25, 0xFF	; 255
    17ae:	08 95       	ret

000017b0 <__floatunsisf>:
    17b0:	e8 94       	clt
    17b2:	09 c0       	rjmp	.+18     	; 0x17c6 <__floatsisf+0x12>

000017b4 <__floatsisf>:
    17b4:	97 fb       	bst	r25, 7
    17b6:	3e f4       	brtc	.+14     	; 0x17c6 <__floatsisf+0x12>
    17b8:	90 95       	com	r25
    17ba:	80 95       	com	r24
    17bc:	70 95       	com	r23
    17be:	61 95       	neg	r22
    17c0:	7f 4f       	sbci	r23, 0xFF	; 255
    17c2:	8f 4f       	sbci	r24, 0xFF	; 255
    17c4:	9f 4f       	sbci	r25, 0xFF	; 255
    17c6:	99 23       	and	r25, r25
    17c8:	a9 f0       	breq	.+42     	; 0x17f4 <__floatsisf+0x40>
    17ca:	f9 2f       	mov	r31, r25
    17cc:	96 e9       	ldi	r25, 0x96	; 150
    17ce:	bb 27       	eor	r27, r27
    17d0:	93 95       	inc	r25
    17d2:	f6 95       	lsr	r31
    17d4:	87 95       	ror	r24
    17d6:	77 95       	ror	r23
    17d8:	67 95       	ror	r22
    17da:	b7 95       	ror	r27
    17dc:	f1 11       	cpse	r31, r1
    17de:	f8 cf       	rjmp	.-16     	; 0x17d0 <__floatsisf+0x1c>
    17e0:	fa f4       	brpl	.+62     	; 0x1820 <__floatsisf+0x6c>
    17e2:	bb 0f       	add	r27, r27
    17e4:	11 f4       	brne	.+4      	; 0x17ea <__floatsisf+0x36>
    17e6:	60 ff       	sbrs	r22, 0
    17e8:	1b c0       	rjmp	.+54     	; 0x1820 <__floatsisf+0x6c>
    17ea:	6f 5f       	subi	r22, 0xFF	; 255
    17ec:	7f 4f       	sbci	r23, 0xFF	; 255
    17ee:	8f 4f       	sbci	r24, 0xFF	; 255
    17f0:	9f 4f       	sbci	r25, 0xFF	; 255
    17f2:	16 c0       	rjmp	.+44     	; 0x1820 <__floatsisf+0x6c>
    17f4:	88 23       	and	r24, r24
    17f6:	11 f0       	breq	.+4      	; 0x17fc <__floatsisf+0x48>
    17f8:	96 e9       	ldi	r25, 0x96	; 150
    17fa:	11 c0       	rjmp	.+34     	; 0x181e <__floatsisf+0x6a>
    17fc:	77 23       	and	r23, r23
    17fe:	21 f0       	breq	.+8      	; 0x1808 <__floatsisf+0x54>
    1800:	9e e8       	ldi	r25, 0x8E	; 142
    1802:	87 2f       	mov	r24, r23
    1804:	76 2f       	mov	r23, r22
    1806:	05 c0       	rjmp	.+10     	; 0x1812 <__floatsisf+0x5e>
    1808:	66 23       	and	r22, r22
    180a:	71 f0       	breq	.+28     	; 0x1828 <__floatsisf+0x74>
    180c:	96 e8       	ldi	r25, 0x86	; 134
    180e:	86 2f       	mov	r24, r22
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	60 e0       	ldi	r22, 0x00	; 0
    1814:	2a f0       	brmi	.+10     	; 0x1820 <__floatsisf+0x6c>
    1816:	9a 95       	dec	r25
    1818:	66 0f       	add	r22, r22
    181a:	77 1f       	adc	r23, r23
    181c:	88 1f       	adc	r24, r24
    181e:	da f7       	brpl	.-10     	; 0x1816 <__floatsisf+0x62>
    1820:	88 0f       	add	r24, r24
    1822:	96 95       	lsr	r25
    1824:	87 95       	ror	r24
    1826:	97 f9       	bld	r25, 7
    1828:	08 95       	ret

0000182a <__fp_inf>:
    182a:	97 f9       	bld	r25, 7
    182c:	9f 67       	ori	r25, 0x7F	; 127
    182e:	80 e8       	ldi	r24, 0x80	; 128
    1830:	70 e0       	ldi	r23, 0x00	; 0
    1832:	60 e0       	ldi	r22, 0x00	; 0
    1834:	08 95       	ret

00001836 <__fp_nan>:
    1836:	9f ef       	ldi	r25, 0xFF	; 255
    1838:	80 ec       	ldi	r24, 0xC0	; 192
    183a:	08 95       	ret

0000183c <__fp_pscA>:
    183c:	00 24       	eor	r0, r0
    183e:	0a 94       	dec	r0
    1840:	16 16       	cp	r1, r22
    1842:	17 06       	cpc	r1, r23
    1844:	18 06       	cpc	r1, r24
    1846:	09 06       	cpc	r0, r25
    1848:	08 95       	ret

0000184a <__fp_pscB>:
    184a:	00 24       	eor	r0, r0
    184c:	0a 94       	dec	r0
    184e:	12 16       	cp	r1, r18
    1850:	13 06       	cpc	r1, r19
    1852:	14 06       	cpc	r1, r20
    1854:	05 06       	cpc	r0, r21
    1856:	08 95       	ret

00001858 <__fp_round>:
    1858:	09 2e       	mov	r0, r25
    185a:	03 94       	inc	r0
    185c:	00 0c       	add	r0, r0
    185e:	11 f4       	brne	.+4      	; 0x1864 <__fp_round+0xc>
    1860:	88 23       	and	r24, r24
    1862:	52 f0       	brmi	.+20     	; 0x1878 <__fp_round+0x20>
    1864:	bb 0f       	add	r27, r27
    1866:	40 f4       	brcc	.+16     	; 0x1878 <__fp_round+0x20>
    1868:	bf 2b       	or	r27, r31
    186a:	11 f4       	brne	.+4      	; 0x1870 <__fp_round+0x18>
    186c:	60 ff       	sbrs	r22, 0
    186e:	04 c0       	rjmp	.+8      	; 0x1878 <__fp_round+0x20>
    1870:	6f 5f       	subi	r22, 0xFF	; 255
    1872:	7f 4f       	sbci	r23, 0xFF	; 255
    1874:	8f 4f       	sbci	r24, 0xFF	; 255
    1876:	9f 4f       	sbci	r25, 0xFF	; 255
    1878:	08 95       	ret

0000187a <__fp_split3>:
    187a:	57 fd       	sbrc	r21, 7
    187c:	90 58       	subi	r25, 0x80	; 128
    187e:	44 0f       	add	r20, r20
    1880:	55 1f       	adc	r21, r21
    1882:	59 f0       	breq	.+22     	; 0x189a <__fp_splitA+0x10>
    1884:	5f 3f       	cpi	r21, 0xFF	; 255
    1886:	71 f0       	breq	.+28     	; 0x18a4 <__fp_splitA+0x1a>
    1888:	47 95       	ror	r20

0000188a <__fp_splitA>:
    188a:	88 0f       	add	r24, r24
    188c:	97 fb       	bst	r25, 7
    188e:	99 1f       	adc	r25, r25
    1890:	61 f0       	breq	.+24     	; 0x18aa <__fp_splitA+0x20>
    1892:	9f 3f       	cpi	r25, 0xFF	; 255
    1894:	79 f0       	breq	.+30     	; 0x18b4 <__fp_splitA+0x2a>
    1896:	87 95       	ror	r24
    1898:	08 95       	ret
    189a:	12 16       	cp	r1, r18
    189c:	13 06       	cpc	r1, r19
    189e:	14 06       	cpc	r1, r20
    18a0:	55 1f       	adc	r21, r21
    18a2:	f2 cf       	rjmp	.-28     	; 0x1888 <__fp_split3+0xe>
    18a4:	46 95       	lsr	r20
    18a6:	f1 df       	rcall	.-30     	; 0x188a <__fp_splitA>
    18a8:	08 c0       	rjmp	.+16     	; 0x18ba <__fp_splitA+0x30>
    18aa:	16 16       	cp	r1, r22
    18ac:	17 06       	cpc	r1, r23
    18ae:	18 06       	cpc	r1, r24
    18b0:	99 1f       	adc	r25, r25
    18b2:	f1 cf       	rjmp	.-30     	; 0x1896 <__fp_splitA+0xc>
    18b4:	86 95       	lsr	r24
    18b6:	71 05       	cpc	r23, r1
    18b8:	61 05       	cpc	r22, r1
    18ba:	08 94       	sec
    18bc:	08 95       	ret

000018be <__fp_zero>:
    18be:	e8 94       	clt

000018c0 <__fp_szero>:
    18c0:	bb 27       	eor	r27, r27
    18c2:	66 27       	eor	r22, r22
    18c4:	77 27       	eor	r23, r23
    18c6:	cb 01       	movw	r24, r22
    18c8:	97 f9       	bld	r25, 7
    18ca:	08 95       	ret

000018cc <__mulsf3>:
    18cc:	0b d0       	rcall	.+22     	; 0x18e4 <__mulsf3x>
    18ce:	c4 cf       	rjmp	.-120    	; 0x1858 <__fp_round>
    18d0:	b5 df       	rcall	.-150    	; 0x183c <__fp_pscA>
    18d2:	28 f0       	brcs	.+10     	; 0x18de <__mulsf3+0x12>
    18d4:	ba df       	rcall	.-140    	; 0x184a <__fp_pscB>
    18d6:	18 f0       	brcs	.+6      	; 0x18de <__mulsf3+0x12>
    18d8:	95 23       	and	r25, r21
    18da:	09 f0       	breq	.+2      	; 0x18de <__mulsf3+0x12>
    18dc:	a6 cf       	rjmp	.-180    	; 0x182a <__fp_inf>
    18de:	ab cf       	rjmp	.-170    	; 0x1836 <__fp_nan>
    18e0:	11 24       	eor	r1, r1
    18e2:	ee cf       	rjmp	.-36     	; 0x18c0 <__fp_szero>

000018e4 <__mulsf3x>:
    18e4:	ca df       	rcall	.-108    	; 0x187a <__fp_split3>
    18e6:	a0 f3       	brcs	.-24     	; 0x18d0 <__mulsf3+0x4>

000018e8 <__mulsf3_pse>:
    18e8:	95 9f       	mul	r25, r21
    18ea:	d1 f3       	breq	.-12     	; 0x18e0 <__mulsf3+0x14>
    18ec:	95 0f       	add	r25, r21
    18ee:	50 e0       	ldi	r21, 0x00	; 0
    18f0:	55 1f       	adc	r21, r21
    18f2:	62 9f       	mul	r22, r18
    18f4:	f0 01       	movw	r30, r0
    18f6:	72 9f       	mul	r23, r18
    18f8:	bb 27       	eor	r27, r27
    18fa:	f0 0d       	add	r31, r0
    18fc:	b1 1d       	adc	r27, r1
    18fe:	63 9f       	mul	r22, r19
    1900:	aa 27       	eor	r26, r26
    1902:	f0 0d       	add	r31, r0
    1904:	b1 1d       	adc	r27, r1
    1906:	aa 1f       	adc	r26, r26
    1908:	64 9f       	mul	r22, r20
    190a:	66 27       	eor	r22, r22
    190c:	b0 0d       	add	r27, r0
    190e:	a1 1d       	adc	r26, r1
    1910:	66 1f       	adc	r22, r22
    1912:	82 9f       	mul	r24, r18
    1914:	22 27       	eor	r18, r18
    1916:	b0 0d       	add	r27, r0
    1918:	a1 1d       	adc	r26, r1
    191a:	62 1f       	adc	r22, r18
    191c:	73 9f       	mul	r23, r19
    191e:	b0 0d       	add	r27, r0
    1920:	a1 1d       	adc	r26, r1
    1922:	62 1f       	adc	r22, r18
    1924:	83 9f       	mul	r24, r19
    1926:	a0 0d       	add	r26, r0
    1928:	61 1d       	adc	r22, r1
    192a:	22 1f       	adc	r18, r18
    192c:	74 9f       	mul	r23, r20
    192e:	33 27       	eor	r19, r19
    1930:	a0 0d       	add	r26, r0
    1932:	61 1d       	adc	r22, r1
    1934:	23 1f       	adc	r18, r19
    1936:	84 9f       	mul	r24, r20
    1938:	60 0d       	add	r22, r0
    193a:	21 1d       	adc	r18, r1
    193c:	82 2f       	mov	r24, r18
    193e:	76 2f       	mov	r23, r22
    1940:	6a 2f       	mov	r22, r26
    1942:	11 24       	eor	r1, r1
    1944:	9f 57       	subi	r25, 0x7F	; 127
    1946:	50 40       	sbci	r21, 0x00	; 0
    1948:	8a f0       	brmi	.+34     	; 0x196c <__mulsf3_pse+0x84>
    194a:	e1 f0       	breq	.+56     	; 0x1984 <__mulsf3_pse+0x9c>
    194c:	88 23       	and	r24, r24
    194e:	4a f0       	brmi	.+18     	; 0x1962 <__mulsf3_pse+0x7a>
    1950:	ee 0f       	add	r30, r30
    1952:	ff 1f       	adc	r31, r31
    1954:	bb 1f       	adc	r27, r27
    1956:	66 1f       	adc	r22, r22
    1958:	77 1f       	adc	r23, r23
    195a:	88 1f       	adc	r24, r24
    195c:	91 50       	subi	r25, 0x01	; 1
    195e:	50 40       	sbci	r21, 0x00	; 0
    1960:	a9 f7       	brne	.-22     	; 0x194c <__mulsf3_pse+0x64>
    1962:	9e 3f       	cpi	r25, 0xFE	; 254
    1964:	51 05       	cpc	r21, r1
    1966:	70 f0       	brcs	.+28     	; 0x1984 <__mulsf3_pse+0x9c>
    1968:	60 cf       	rjmp	.-320    	; 0x182a <__fp_inf>
    196a:	aa cf       	rjmp	.-172    	; 0x18c0 <__fp_szero>
    196c:	5f 3f       	cpi	r21, 0xFF	; 255
    196e:	ec f3       	brlt	.-6      	; 0x196a <__mulsf3_pse+0x82>
    1970:	98 3e       	cpi	r25, 0xE8	; 232
    1972:	dc f3       	brlt	.-10     	; 0x196a <__mulsf3_pse+0x82>
    1974:	86 95       	lsr	r24
    1976:	77 95       	ror	r23
    1978:	67 95       	ror	r22
    197a:	b7 95       	ror	r27
    197c:	f7 95       	ror	r31
    197e:	e7 95       	ror	r30
    1980:	9f 5f       	subi	r25, 0xFF	; 255
    1982:	c1 f7       	brne	.-16     	; 0x1974 <__mulsf3_pse+0x8c>
    1984:	fe 2b       	or	r31, r30
    1986:	88 0f       	add	r24, r24
    1988:	91 1d       	adc	r25, r1
    198a:	96 95       	lsr	r25
    198c:	87 95       	ror	r24
    198e:	97 f9       	bld	r25, 7
    1990:	08 95       	ret

00001992 <__udivmodhi4>:
    1992:	aa 1b       	sub	r26, r26
    1994:	bb 1b       	sub	r27, r27
    1996:	51 e1       	ldi	r21, 0x11	; 17
    1998:	07 c0       	rjmp	.+14     	; 0x19a8 <__udivmodhi4_ep>

0000199a <__udivmodhi4_loop>:
    199a:	aa 1f       	adc	r26, r26
    199c:	bb 1f       	adc	r27, r27
    199e:	a6 17       	cp	r26, r22
    19a0:	b7 07       	cpc	r27, r23
    19a2:	10 f0       	brcs	.+4      	; 0x19a8 <__udivmodhi4_ep>
    19a4:	a6 1b       	sub	r26, r22
    19a6:	b7 0b       	sbc	r27, r23

000019a8 <__udivmodhi4_ep>:
    19a8:	88 1f       	adc	r24, r24
    19aa:	99 1f       	adc	r25, r25
    19ac:	5a 95       	dec	r21
    19ae:	a9 f7       	brne	.-22     	; 0x199a <__udivmodhi4_loop>
    19b0:	80 95       	com	r24
    19b2:	90 95       	com	r25
    19b4:	bc 01       	movw	r22, r24
    19b6:	cd 01       	movw	r24, r26
    19b8:	08 95       	ret

000019ba <__udivmodsi4>:
    19ba:	a1 e2       	ldi	r26, 0x21	; 33
    19bc:	1a 2e       	mov	r1, r26
    19be:	aa 1b       	sub	r26, r26
    19c0:	bb 1b       	sub	r27, r27
    19c2:	fd 01       	movw	r30, r26
    19c4:	0d c0       	rjmp	.+26     	; 0x19e0 <__udivmodsi4_ep>

000019c6 <__udivmodsi4_loop>:
    19c6:	aa 1f       	adc	r26, r26
    19c8:	bb 1f       	adc	r27, r27
    19ca:	ee 1f       	adc	r30, r30
    19cc:	ff 1f       	adc	r31, r31
    19ce:	a2 17       	cp	r26, r18
    19d0:	b3 07       	cpc	r27, r19
    19d2:	e4 07       	cpc	r30, r20
    19d4:	f5 07       	cpc	r31, r21
    19d6:	20 f0       	brcs	.+8      	; 0x19e0 <__udivmodsi4_ep>
    19d8:	a2 1b       	sub	r26, r18
    19da:	b3 0b       	sbc	r27, r19
    19dc:	e4 0b       	sbc	r30, r20
    19de:	f5 0b       	sbc	r31, r21

000019e0 <__udivmodsi4_ep>:
    19e0:	66 1f       	adc	r22, r22
    19e2:	77 1f       	adc	r23, r23
    19e4:	88 1f       	adc	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	1a 94       	dec	r1
    19ea:	69 f7       	brne	.-38     	; 0x19c6 <__udivmodsi4_loop>
    19ec:	60 95       	com	r22
    19ee:	70 95       	com	r23
    19f0:	80 95       	com	r24
    19f2:	90 95       	com	r25
    19f4:	9b 01       	movw	r18, r22
    19f6:	ac 01       	movw	r20, r24
    19f8:	bd 01       	movw	r22, r26
    19fa:	cf 01       	movw	r24, r30
    19fc:	08 95       	ret

000019fe <memcmp>:
    19fe:	fb 01       	movw	r30, r22
    1a00:	dc 01       	movw	r26, r24
    1a02:	04 c0       	rjmp	.+8      	; 0x1a0c <memcmp+0xe>
    1a04:	8d 91       	ld	r24, X+
    1a06:	01 90       	ld	r0, Z+
    1a08:	80 19       	sub	r24, r0
    1a0a:	21 f4       	brne	.+8      	; 0x1a14 <memcmp+0x16>
    1a0c:	41 50       	subi	r20, 0x01	; 1
    1a0e:	50 40       	sbci	r21, 0x00	; 0
    1a10:	c8 f7       	brcc	.-14     	; 0x1a04 <memcmp+0x6>
    1a12:	88 1b       	sub	r24, r24
    1a14:	99 0b       	sbc	r25, r25
    1a16:	08 95       	ret

00001a18 <strstr>:
    1a18:	fb 01       	movw	r30, r22
    1a1a:	51 91       	ld	r21, Z+
    1a1c:	55 23       	and	r21, r21
    1a1e:	a9 f0       	breq	.+42     	; 0x1a4a <strstr+0x32>
    1a20:	bf 01       	movw	r22, r30
    1a22:	dc 01       	movw	r26, r24
    1a24:	4d 91       	ld	r20, X+
    1a26:	45 17       	cp	r20, r21
    1a28:	41 11       	cpse	r20, r1
    1a2a:	e1 f7       	brne	.-8      	; 0x1a24 <strstr+0xc>
    1a2c:	59 f4       	brne	.+22     	; 0x1a44 <strstr+0x2c>
    1a2e:	cd 01       	movw	r24, r26
    1a30:	01 90       	ld	r0, Z+
    1a32:	00 20       	and	r0, r0
    1a34:	49 f0       	breq	.+18     	; 0x1a48 <strstr+0x30>
    1a36:	4d 91       	ld	r20, X+
    1a38:	40 15       	cp	r20, r0
    1a3a:	41 11       	cpse	r20, r1
    1a3c:	c9 f3       	breq	.-14     	; 0x1a30 <strstr+0x18>
    1a3e:	fb 01       	movw	r30, r22
    1a40:	41 11       	cpse	r20, r1
    1a42:	ef cf       	rjmp	.-34     	; 0x1a22 <strstr+0xa>
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	08 95       	ret

00001a4c <fdevopen>:
    1a4c:	0f 93       	push	r16
    1a4e:	1f 93       	push	r17
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	31 f4       	brne	.+12     	; 0x1a64 <fdevopen+0x18>
    1a58:	61 15       	cp	r22, r1
    1a5a:	71 05       	cpc	r23, r1
    1a5c:	19 f4       	brne	.+6      	; 0x1a64 <fdevopen+0x18>
    1a5e:	80 e0       	ldi	r24, 0x00	; 0
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	39 c0       	rjmp	.+114    	; 0x1ad6 <fdevopen+0x8a>
    1a64:	8b 01       	movw	r16, r22
    1a66:	ec 01       	movw	r28, r24
    1a68:	6e e0       	ldi	r22, 0x0E	; 14
    1a6a:	70 e0       	ldi	r23, 0x00	; 0
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	4c d2       	rcall	.+1176   	; 0x1f0a <calloc>
    1a72:	fc 01       	movw	r30, r24
    1a74:	89 2b       	or	r24, r25
    1a76:	99 f3       	breq	.-26     	; 0x1a5e <fdevopen+0x12>
    1a78:	80 e8       	ldi	r24, 0x80	; 128
    1a7a:	83 83       	std	Z+3, r24	; 0x03
    1a7c:	01 15       	cp	r16, r1
    1a7e:	11 05       	cpc	r17, r1
    1a80:	71 f0       	breq	.+28     	; 0x1a9e <fdevopen+0x52>
    1a82:	02 87       	std	Z+10, r16	; 0x0a
    1a84:	13 87       	std	Z+11, r17	; 0x0b
    1a86:	81 e8       	ldi	r24, 0x81	; 129
    1a88:	83 83       	std	Z+3, r24	; 0x03
    1a8a:	80 91 19 23 	lds	r24, 0x2319	; 0x802319 <__iob>
    1a8e:	90 91 1a 23 	lds	r25, 0x231A	; 0x80231a <__iob+0x1>
    1a92:	89 2b       	or	r24, r25
    1a94:	21 f4       	brne	.+8      	; 0x1a9e <fdevopen+0x52>
    1a96:	e0 93 19 23 	sts	0x2319, r30	; 0x802319 <__iob>
    1a9a:	f0 93 1a 23 	sts	0x231A, r31	; 0x80231a <__iob+0x1>
    1a9e:	20 97       	sbiw	r28, 0x00	; 0
    1aa0:	c9 f0       	breq	.+50     	; 0x1ad4 <fdevopen+0x88>
    1aa2:	c0 87       	std	Z+8, r28	; 0x08
    1aa4:	d1 87       	std	Z+9, r29	; 0x09
    1aa6:	83 81       	ldd	r24, Z+3	; 0x03
    1aa8:	82 60       	ori	r24, 0x02	; 2
    1aaa:	83 83       	std	Z+3, r24	; 0x03
    1aac:	80 91 1b 23 	lds	r24, 0x231B	; 0x80231b <__iob+0x2>
    1ab0:	90 91 1c 23 	lds	r25, 0x231C	; 0x80231c <__iob+0x3>
    1ab4:	89 2b       	or	r24, r25
    1ab6:	71 f4       	brne	.+28     	; 0x1ad4 <fdevopen+0x88>
    1ab8:	e0 93 1b 23 	sts	0x231B, r30	; 0x80231b <__iob+0x2>
    1abc:	f0 93 1c 23 	sts	0x231C, r31	; 0x80231c <__iob+0x3>
    1ac0:	80 91 1d 23 	lds	r24, 0x231D	; 0x80231d <__iob+0x4>
    1ac4:	90 91 1e 23 	lds	r25, 0x231E	; 0x80231e <__iob+0x5>
    1ac8:	89 2b       	or	r24, r25
    1aca:	21 f4       	brne	.+8      	; 0x1ad4 <fdevopen+0x88>
    1acc:	e0 93 1d 23 	sts	0x231D, r30	; 0x80231d <__iob+0x4>
    1ad0:	f0 93 1e 23 	sts	0x231E, r31	; 0x80231e <__iob+0x5>
    1ad4:	cf 01       	movw	r24, r30
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	1f 91       	pop	r17
    1adc:	0f 91       	pop	r16
    1ade:	08 95       	ret

00001ae0 <printf>:
    1ae0:	a0 e0       	ldi	r26, 0x00	; 0
    1ae2:	b0 e0       	ldi	r27, 0x00	; 0
    1ae4:	e5 e7       	ldi	r30, 0x75	; 117
    1ae6:	fd e0       	ldi	r31, 0x0D	; 13
    1ae8:	12 c4       	rjmp	.+2084   	; 0x230e <__prologue_saves__+0x20>
    1aea:	ae 01       	movw	r20, r28
    1aec:	4b 5f       	subi	r20, 0xFB	; 251
    1aee:	5f 4f       	sbci	r21, 0xFF	; 255
    1af0:	fa 01       	movw	r30, r20
    1af2:	61 91       	ld	r22, Z+
    1af4:	71 91       	ld	r23, Z+
    1af6:	af 01       	movw	r20, r30
    1af8:	80 91 1b 23 	lds	r24, 0x231B	; 0x80231b <__iob+0x2>
    1afc:	90 91 1c 23 	lds	r25, 0x231C	; 0x80231c <__iob+0x3>
    1b00:	32 d0       	rcall	.+100    	; 0x1b66 <vfprintf>
    1b02:	e2 e0       	ldi	r30, 0x02	; 2
    1b04:	1d c4       	rjmp	.+2106   	; 0x2340 <__epilogue_restores__+0x20>

00001b06 <puts>:
    1b06:	0f 93       	push	r16
    1b08:	1f 93       	push	r17
    1b0a:	cf 93       	push	r28
    1b0c:	df 93       	push	r29
    1b0e:	e0 91 1b 23 	lds	r30, 0x231B	; 0x80231b <__iob+0x2>
    1b12:	f0 91 1c 23 	lds	r31, 0x231C	; 0x80231c <__iob+0x3>
    1b16:	23 81       	ldd	r18, Z+3	; 0x03
    1b18:	21 ff       	sbrs	r18, 1
    1b1a:	1b c0       	rjmp	.+54     	; 0x1b52 <puts+0x4c>
    1b1c:	8c 01       	movw	r16, r24
    1b1e:	d0 e0       	ldi	r29, 0x00	; 0
    1b20:	c0 e0       	ldi	r28, 0x00	; 0
    1b22:	f8 01       	movw	r30, r16
    1b24:	81 91       	ld	r24, Z+
    1b26:	8f 01       	movw	r16, r30
    1b28:	60 91 1b 23 	lds	r22, 0x231B	; 0x80231b <__iob+0x2>
    1b2c:	70 91 1c 23 	lds	r23, 0x231C	; 0x80231c <__iob+0x3>
    1b30:	db 01       	movw	r26, r22
    1b32:	18 96       	adiw	r26, 0x08	; 8
    1b34:	ed 91       	ld	r30, X+
    1b36:	fc 91       	ld	r31, X
    1b38:	19 97       	sbiw	r26, 0x09	; 9
    1b3a:	88 23       	and	r24, r24
    1b3c:	31 f0       	breq	.+12     	; 0x1b4a <puts+0x44>
    1b3e:	09 95       	icall
    1b40:	89 2b       	or	r24, r25
    1b42:	79 f3       	breq	.-34     	; 0x1b22 <puts+0x1c>
    1b44:	df ef       	ldi	r29, 0xFF	; 255
    1b46:	cf ef       	ldi	r28, 0xFF	; 255
    1b48:	ec cf       	rjmp	.-40     	; 0x1b22 <puts+0x1c>
    1b4a:	8a e0       	ldi	r24, 0x0A	; 10
    1b4c:	09 95       	icall
    1b4e:	89 2b       	or	r24, r25
    1b50:	19 f0       	breq	.+6      	; 0x1b58 <puts+0x52>
    1b52:	8f ef       	ldi	r24, 0xFF	; 255
    1b54:	9f ef       	ldi	r25, 0xFF	; 255
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <puts+0x56>
    1b58:	8d 2f       	mov	r24, r29
    1b5a:	9c 2f       	mov	r25, r28
    1b5c:	df 91       	pop	r29
    1b5e:	cf 91       	pop	r28
    1b60:	1f 91       	pop	r17
    1b62:	0f 91       	pop	r16
    1b64:	08 95       	ret

00001b66 <vfprintf>:
    1b66:	ab e0       	ldi	r26, 0x0B	; 11
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	e8 eb       	ldi	r30, 0xB8	; 184
    1b6c:	fd e0       	ldi	r31, 0x0D	; 13
    1b6e:	bf c3       	rjmp	.+1918   	; 0x22ee <__prologue_saves__>
    1b70:	6c 01       	movw	r12, r24
    1b72:	7b 01       	movw	r14, r22
    1b74:	8a 01       	movw	r16, r20
    1b76:	fc 01       	movw	r30, r24
    1b78:	16 82       	std	Z+6, r1	; 0x06
    1b7a:	17 82       	std	Z+7, r1	; 0x07
    1b7c:	83 81       	ldd	r24, Z+3	; 0x03
    1b7e:	81 ff       	sbrs	r24, 1
    1b80:	bf c1       	rjmp	.+894    	; 0x1f00 <vfprintf+0x39a>
    1b82:	ce 01       	movw	r24, r28
    1b84:	01 96       	adiw	r24, 0x01	; 1
    1b86:	3c 01       	movw	r6, r24
    1b88:	f6 01       	movw	r30, r12
    1b8a:	93 81       	ldd	r25, Z+3	; 0x03
    1b8c:	f7 01       	movw	r30, r14
    1b8e:	93 fd       	sbrc	r25, 3
    1b90:	85 91       	lpm	r24, Z+
    1b92:	93 ff       	sbrs	r25, 3
    1b94:	81 91       	ld	r24, Z+
    1b96:	7f 01       	movw	r14, r30
    1b98:	88 23       	and	r24, r24
    1b9a:	09 f4       	brne	.+2      	; 0x1b9e <vfprintf+0x38>
    1b9c:	ad c1       	rjmp	.+858    	; 0x1ef8 <vfprintf+0x392>
    1b9e:	85 32       	cpi	r24, 0x25	; 37
    1ba0:	39 f4       	brne	.+14     	; 0x1bb0 <vfprintf+0x4a>
    1ba2:	93 fd       	sbrc	r25, 3
    1ba4:	85 91       	lpm	r24, Z+
    1ba6:	93 ff       	sbrs	r25, 3
    1ba8:	81 91       	ld	r24, Z+
    1baa:	7f 01       	movw	r14, r30
    1bac:	85 32       	cpi	r24, 0x25	; 37
    1bae:	21 f4       	brne	.+8      	; 0x1bb8 <vfprintf+0x52>
    1bb0:	b6 01       	movw	r22, r12
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	02 d3       	rcall	.+1540   	; 0x21ba <fputc>
    1bb6:	e8 cf       	rjmp	.-48     	; 0x1b88 <vfprintf+0x22>
    1bb8:	91 2c       	mov	r9, r1
    1bba:	21 2c       	mov	r2, r1
    1bbc:	31 2c       	mov	r3, r1
    1bbe:	ff e1       	ldi	r31, 0x1F	; 31
    1bc0:	f3 15       	cp	r31, r3
    1bc2:	d8 f0       	brcs	.+54     	; 0x1bfa <vfprintf+0x94>
    1bc4:	8b 32       	cpi	r24, 0x2B	; 43
    1bc6:	79 f0       	breq	.+30     	; 0x1be6 <vfprintf+0x80>
    1bc8:	38 f4       	brcc	.+14     	; 0x1bd8 <vfprintf+0x72>
    1bca:	80 32       	cpi	r24, 0x20	; 32
    1bcc:	79 f0       	breq	.+30     	; 0x1bec <vfprintf+0x86>
    1bce:	83 32       	cpi	r24, 0x23	; 35
    1bd0:	a1 f4       	brne	.+40     	; 0x1bfa <vfprintf+0x94>
    1bd2:	23 2d       	mov	r18, r3
    1bd4:	20 61       	ori	r18, 0x10	; 16
    1bd6:	1d c0       	rjmp	.+58     	; 0x1c12 <vfprintf+0xac>
    1bd8:	8d 32       	cpi	r24, 0x2D	; 45
    1bda:	61 f0       	breq	.+24     	; 0x1bf4 <vfprintf+0x8e>
    1bdc:	80 33       	cpi	r24, 0x30	; 48
    1bde:	69 f4       	brne	.+26     	; 0x1bfa <vfprintf+0x94>
    1be0:	23 2d       	mov	r18, r3
    1be2:	21 60       	ori	r18, 0x01	; 1
    1be4:	16 c0       	rjmp	.+44     	; 0x1c12 <vfprintf+0xac>
    1be6:	83 2d       	mov	r24, r3
    1be8:	82 60       	ori	r24, 0x02	; 2
    1bea:	38 2e       	mov	r3, r24
    1bec:	e3 2d       	mov	r30, r3
    1bee:	e4 60       	ori	r30, 0x04	; 4
    1bf0:	3e 2e       	mov	r3, r30
    1bf2:	2a c0       	rjmp	.+84     	; 0x1c48 <vfprintf+0xe2>
    1bf4:	f3 2d       	mov	r31, r3
    1bf6:	f8 60       	ori	r31, 0x08	; 8
    1bf8:	1d c0       	rjmp	.+58     	; 0x1c34 <vfprintf+0xce>
    1bfa:	37 fc       	sbrc	r3, 7
    1bfc:	2d c0       	rjmp	.+90     	; 0x1c58 <vfprintf+0xf2>
    1bfe:	20 ed       	ldi	r18, 0xD0	; 208
    1c00:	28 0f       	add	r18, r24
    1c02:	2a 30       	cpi	r18, 0x0A	; 10
    1c04:	40 f0       	brcs	.+16     	; 0x1c16 <vfprintf+0xb0>
    1c06:	8e 32       	cpi	r24, 0x2E	; 46
    1c08:	b9 f4       	brne	.+46     	; 0x1c38 <vfprintf+0xd2>
    1c0a:	36 fc       	sbrc	r3, 6
    1c0c:	75 c1       	rjmp	.+746    	; 0x1ef8 <vfprintf+0x392>
    1c0e:	23 2d       	mov	r18, r3
    1c10:	20 64       	ori	r18, 0x40	; 64
    1c12:	32 2e       	mov	r3, r18
    1c14:	19 c0       	rjmp	.+50     	; 0x1c48 <vfprintf+0xe2>
    1c16:	36 fe       	sbrs	r3, 6
    1c18:	06 c0       	rjmp	.+12     	; 0x1c26 <vfprintf+0xc0>
    1c1a:	8a e0       	ldi	r24, 0x0A	; 10
    1c1c:	98 9e       	mul	r9, r24
    1c1e:	20 0d       	add	r18, r0
    1c20:	11 24       	eor	r1, r1
    1c22:	92 2e       	mov	r9, r18
    1c24:	11 c0       	rjmp	.+34     	; 0x1c48 <vfprintf+0xe2>
    1c26:	ea e0       	ldi	r30, 0x0A	; 10
    1c28:	2e 9e       	mul	r2, r30
    1c2a:	20 0d       	add	r18, r0
    1c2c:	11 24       	eor	r1, r1
    1c2e:	22 2e       	mov	r2, r18
    1c30:	f3 2d       	mov	r31, r3
    1c32:	f0 62       	ori	r31, 0x20	; 32
    1c34:	3f 2e       	mov	r3, r31
    1c36:	08 c0       	rjmp	.+16     	; 0x1c48 <vfprintf+0xe2>
    1c38:	8c 36       	cpi	r24, 0x6C	; 108
    1c3a:	21 f4       	brne	.+8      	; 0x1c44 <vfprintf+0xde>
    1c3c:	83 2d       	mov	r24, r3
    1c3e:	80 68       	ori	r24, 0x80	; 128
    1c40:	38 2e       	mov	r3, r24
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <vfprintf+0xe2>
    1c44:	88 36       	cpi	r24, 0x68	; 104
    1c46:	41 f4       	brne	.+16     	; 0x1c58 <vfprintf+0xf2>
    1c48:	f7 01       	movw	r30, r14
    1c4a:	93 fd       	sbrc	r25, 3
    1c4c:	85 91       	lpm	r24, Z+
    1c4e:	93 ff       	sbrs	r25, 3
    1c50:	81 91       	ld	r24, Z+
    1c52:	7f 01       	movw	r14, r30
    1c54:	81 11       	cpse	r24, r1
    1c56:	b3 cf       	rjmp	.-154    	; 0x1bbe <vfprintf+0x58>
    1c58:	98 2f       	mov	r25, r24
    1c5a:	9f 7d       	andi	r25, 0xDF	; 223
    1c5c:	95 54       	subi	r25, 0x45	; 69
    1c5e:	93 30       	cpi	r25, 0x03	; 3
    1c60:	28 f4       	brcc	.+10     	; 0x1c6c <vfprintf+0x106>
    1c62:	0c 5f       	subi	r16, 0xFC	; 252
    1c64:	1f 4f       	sbci	r17, 0xFF	; 255
    1c66:	9f e3       	ldi	r25, 0x3F	; 63
    1c68:	99 83       	std	Y+1, r25	; 0x01
    1c6a:	0d c0       	rjmp	.+26     	; 0x1c86 <vfprintf+0x120>
    1c6c:	83 36       	cpi	r24, 0x63	; 99
    1c6e:	31 f0       	breq	.+12     	; 0x1c7c <vfprintf+0x116>
    1c70:	83 37       	cpi	r24, 0x73	; 115
    1c72:	71 f0       	breq	.+28     	; 0x1c90 <vfprintf+0x12a>
    1c74:	83 35       	cpi	r24, 0x53	; 83
    1c76:	09 f0       	breq	.+2      	; 0x1c7a <vfprintf+0x114>
    1c78:	55 c0       	rjmp	.+170    	; 0x1d24 <vfprintf+0x1be>
    1c7a:	20 c0       	rjmp	.+64     	; 0x1cbc <vfprintf+0x156>
    1c7c:	f8 01       	movw	r30, r16
    1c7e:	80 81       	ld	r24, Z
    1c80:	89 83       	std	Y+1, r24	; 0x01
    1c82:	0e 5f       	subi	r16, 0xFE	; 254
    1c84:	1f 4f       	sbci	r17, 0xFF	; 255
    1c86:	88 24       	eor	r8, r8
    1c88:	83 94       	inc	r8
    1c8a:	91 2c       	mov	r9, r1
    1c8c:	53 01       	movw	r10, r6
    1c8e:	12 c0       	rjmp	.+36     	; 0x1cb4 <vfprintf+0x14e>
    1c90:	28 01       	movw	r4, r16
    1c92:	f2 e0       	ldi	r31, 0x02	; 2
    1c94:	4f 0e       	add	r4, r31
    1c96:	51 1c       	adc	r5, r1
    1c98:	f8 01       	movw	r30, r16
    1c9a:	a0 80       	ld	r10, Z
    1c9c:	b1 80       	ldd	r11, Z+1	; 0x01
    1c9e:	36 fe       	sbrs	r3, 6
    1ca0:	03 c0       	rjmp	.+6      	; 0x1ca8 <vfprintf+0x142>
    1ca2:	69 2d       	mov	r22, r9
    1ca4:	70 e0       	ldi	r23, 0x00	; 0
    1ca6:	02 c0       	rjmp	.+4      	; 0x1cac <vfprintf+0x146>
    1ca8:	6f ef       	ldi	r22, 0xFF	; 255
    1caa:	7f ef       	ldi	r23, 0xFF	; 255
    1cac:	c5 01       	movw	r24, r10
    1cae:	7a d2       	rcall	.+1268   	; 0x21a4 <strnlen>
    1cb0:	4c 01       	movw	r8, r24
    1cb2:	82 01       	movw	r16, r4
    1cb4:	f3 2d       	mov	r31, r3
    1cb6:	ff 77       	andi	r31, 0x7F	; 127
    1cb8:	3f 2e       	mov	r3, r31
    1cba:	15 c0       	rjmp	.+42     	; 0x1ce6 <vfprintf+0x180>
    1cbc:	28 01       	movw	r4, r16
    1cbe:	22 e0       	ldi	r18, 0x02	; 2
    1cc0:	42 0e       	add	r4, r18
    1cc2:	51 1c       	adc	r5, r1
    1cc4:	f8 01       	movw	r30, r16
    1cc6:	a0 80       	ld	r10, Z
    1cc8:	b1 80       	ldd	r11, Z+1	; 0x01
    1cca:	36 fe       	sbrs	r3, 6
    1ccc:	03 c0       	rjmp	.+6      	; 0x1cd4 <vfprintf+0x16e>
    1cce:	69 2d       	mov	r22, r9
    1cd0:	70 e0       	ldi	r23, 0x00	; 0
    1cd2:	02 c0       	rjmp	.+4      	; 0x1cd8 <vfprintf+0x172>
    1cd4:	6f ef       	ldi	r22, 0xFF	; 255
    1cd6:	7f ef       	ldi	r23, 0xFF	; 255
    1cd8:	c5 01       	movw	r24, r10
    1cda:	52 d2       	rcall	.+1188   	; 0x2180 <strnlen_P>
    1cdc:	4c 01       	movw	r8, r24
    1cde:	f3 2d       	mov	r31, r3
    1ce0:	f0 68       	ori	r31, 0x80	; 128
    1ce2:	3f 2e       	mov	r3, r31
    1ce4:	82 01       	movw	r16, r4
    1ce6:	33 fc       	sbrc	r3, 3
    1ce8:	19 c0       	rjmp	.+50     	; 0x1d1c <vfprintf+0x1b6>
    1cea:	82 2d       	mov	r24, r2
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	88 16       	cp	r8, r24
    1cf0:	99 06       	cpc	r9, r25
    1cf2:	a0 f4       	brcc	.+40     	; 0x1d1c <vfprintf+0x1b6>
    1cf4:	b6 01       	movw	r22, r12
    1cf6:	80 e2       	ldi	r24, 0x20	; 32
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	5f d2       	rcall	.+1214   	; 0x21ba <fputc>
    1cfc:	2a 94       	dec	r2
    1cfe:	f5 cf       	rjmp	.-22     	; 0x1cea <vfprintf+0x184>
    1d00:	f5 01       	movw	r30, r10
    1d02:	37 fc       	sbrc	r3, 7
    1d04:	85 91       	lpm	r24, Z+
    1d06:	37 fe       	sbrs	r3, 7
    1d08:	81 91       	ld	r24, Z+
    1d0a:	5f 01       	movw	r10, r30
    1d0c:	b6 01       	movw	r22, r12
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	54 d2       	rcall	.+1192   	; 0x21ba <fputc>
    1d12:	21 10       	cpse	r2, r1
    1d14:	2a 94       	dec	r2
    1d16:	21 e0       	ldi	r18, 0x01	; 1
    1d18:	82 1a       	sub	r8, r18
    1d1a:	91 08       	sbc	r9, r1
    1d1c:	81 14       	cp	r8, r1
    1d1e:	91 04       	cpc	r9, r1
    1d20:	79 f7       	brne	.-34     	; 0x1d00 <vfprintf+0x19a>
    1d22:	e1 c0       	rjmp	.+450    	; 0x1ee6 <vfprintf+0x380>
    1d24:	84 36       	cpi	r24, 0x64	; 100
    1d26:	11 f0       	breq	.+4      	; 0x1d2c <vfprintf+0x1c6>
    1d28:	89 36       	cpi	r24, 0x69	; 105
    1d2a:	39 f5       	brne	.+78     	; 0x1d7a <vfprintf+0x214>
    1d2c:	f8 01       	movw	r30, r16
    1d2e:	37 fe       	sbrs	r3, 7
    1d30:	07 c0       	rjmp	.+14     	; 0x1d40 <vfprintf+0x1da>
    1d32:	60 81       	ld	r22, Z
    1d34:	71 81       	ldd	r23, Z+1	; 0x01
    1d36:	82 81       	ldd	r24, Z+2	; 0x02
    1d38:	93 81       	ldd	r25, Z+3	; 0x03
    1d3a:	0c 5f       	subi	r16, 0xFC	; 252
    1d3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1d3e:	08 c0       	rjmp	.+16     	; 0x1d50 <vfprintf+0x1ea>
    1d40:	60 81       	ld	r22, Z
    1d42:	71 81       	ldd	r23, Z+1	; 0x01
    1d44:	07 2e       	mov	r0, r23
    1d46:	00 0c       	add	r0, r0
    1d48:	88 0b       	sbc	r24, r24
    1d4a:	99 0b       	sbc	r25, r25
    1d4c:	0e 5f       	subi	r16, 0xFE	; 254
    1d4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d50:	f3 2d       	mov	r31, r3
    1d52:	ff 76       	andi	r31, 0x6F	; 111
    1d54:	3f 2e       	mov	r3, r31
    1d56:	97 ff       	sbrs	r25, 7
    1d58:	09 c0       	rjmp	.+18     	; 0x1d6c <vfprintf+0x206>
    1d5a:	90 95       	com	r25
    1d5c:	80 95       	com	r24
    1d5e:	70 95       	com	r23
    1d60:	61 95       	neg	r22
    1d62:	7f 4f       	sbci	r23, 0xFF	; 255
    1d64:	8f 4f       	sbci	r24, 0xFF	; 255
    1d66:	9f 4f       	sbci	r25, 0xFF	; 255
    1d68:	f0 68       	ori	r31, 0x80	; 128
    1d6a:	3f 2e       	mov	r3, r31
    1d6c:	2a e0       	ldi	r18, 0x0A	; 10
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	a3 01       	movw	r20, r6
    1d72:	5f d2       	rcall	.+1214   	; 0x2232 <__ultoa_invert>
    1d74:	88 2e       	mov	r8, r24
    1d76:	86 18       	sub	r8, r6
    1d78:	44 c0       	rjmp	.+136    	; 0x1e02 <vfprintf+0x29c>
    1d7a:	85 37       	cpi	r24, 0x75	; 117
    1d7c:	31 f4       	brne	.+12     	; 0x1d8a <vfprintf+0x224>
    1d7e:	23 2d       	mov	r18, r3
    1d80:	2f 7e       	andi	r18, 0xEF	; 239
    1d82:	b2 2e       	mov	r11, r18
    1d84:	2a e0       	ldi	r18, 0x0A	; 10
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	25 c0       	rjmp	.+74     	; 0x1dd4 <vfprintf+0x26e>
    1d8a:	93 2d       	mov	r25, r3
    1d8c:	99 7f       	andi	r25, 0xF9	; 249
    1d8e:	b9 2e       	mov	r11, r25
    1d90:	8f 36       	cpi	r24, 0x6F	; 111
    1d92:	c1 f0       	breq	.+48     	; 0x1dc4 <vfprintf+0x25e>
    1d94:	18 f4       	brcc	.+6      	; 0x1d9c <vfprintf+0x236>
    1d96:	88 35       	cpi	r24, 0x58	; 88
    1d98:	79 f0       	breq	.+30     	; 0x1db8 <vfprintf+0x252>
    1d9a:	ae c0       	rjmp	.+348    	; 0x1ef8 <vfprintf+0x392>
    1d9c:	80 37       	cpi	r24, 0x70	; 112
    1d9e:	19 f0       	breq	.+6      	; 0x1da6 <vfprintf+0x240>
    1da0:	88 37       	cpi	r24, 0x78	; 120
    1da2:	21 f0       	breq	.+8      	; 0x1dac <vfprintf+0x246>
    1da4:	a9 c0       	rjmp	.+338    	; 0x1ef8 <vfprintf+0x392>
    1da6:	e9 2f       	mov	r30, r25
    1da8:	e0 61       	ori	r30, 0x10	; 16
    1daa:	be 2e       	mov	r11, r30
    1dac:	b4 fe       	sbrs	r11, 4
    1dae:	0d c0       	rjmp	.+26     	; 0x1dca <vfprintf+0x264>
    1db0:	fb 2d       	mov	r31, r11
    1db2:	f4 60       	ori	r31, 0x04	; 4
    1db4:	bf 2e       	mov	r11, r31
    1db6:	09 c0       	rjmp	.+18     	; 0x1dca <vfprintf+0x264>
    1db8:	34 fe       	sbrs	r3, 4
    1dba:	0a c0       	rjmp	.+20     	; 0x1dd0 <vfprintf+0x26a>
    1dbc:	29 2f       	mov	r18, r25
    1dbe:	26 60       	ori	r18, 0x06	; 6
    1dc0:	b2 2e       	mov	r11, r18
    1dc2:	06 c0       	rjmp	.+12     	; 0x1dd0 <vfprintf+0x26a>
    1dc4:	28 e0       	ldi	r18, 0x08	; 8
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	05 c0       	rjmp	.+10     	; 0x1dd4 <vfprintf+0x26e>
    1dca:	20 e1       	ldi	r18, 0x10	; 16
    1dcc:	30 e0       	ldi	r19, 0x00	; 0
    1dce:	02 c0       	rjmp	.+4      	; 0x1dd4 <vfprintf+0x26e>
    1dd0:	20 e1       	ldi	r18, 0x10	; 16
    1dd2:	32 e0       	ldi	r19, 0x02	; 2
    1dd4:	f8 01       	movw	r30, r16
    1dd6:	b7 fe       	sbrs	r11, 7
    1dd8:	07 c0       	rjmp	.+14     	; 0x1de8 <vfprintf+0x282>
    1dda:	60 81       	ld	r22, Z
    1ddc:	71 81       	ldd	r23, Z+1	; 0x01
    1dde:	82 81       	ldd	r24, Z+2	; 0x02
    1de0:	93 81       	ldd	r25, Z+3	; 0x03
    1de2:	0c 5f       	subi	r16, 0xFC	; 252
    1de4:	1f 4f       	sbci	r17, 0xFF	; 255
    1de6:	06 c0       	rjmp	.+12     	; 0x1df4 <vfprintf+0x28e>
    1de8:	60 81       	ld	r22, Z
    1dea:	71 81       	ldd	r23, Z+1	; 0x01
    1dec:	80 e0       	ldi	r24, 0x00	; 0
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	0e 5f       	subi	r16, 0xFE	; 254
    1df2:	1f 4f       	sbci	r17, 0xFF	; 255
    1df4:	a3 01       	movw	r20, r6
    1df6:	1d d2       	rcall	.+1082   	; 0x2232 <__ultoa_invert>
    1df8:	88 2e       	mov	r8, r24
    1dfa:	86 18       	sub	r8, r6
    1dfc:	fb 2d       	mov	r31, r11
    1dfe:	ff 77       	andi	r31, 0x7F	; 127
    1e00:	3f 2e       	mov	r3, r31
    1e02:	36 fe       	sbrs	r3, 6
    1e04:	0d c0       	rjmp	.+26     	; 0x1e20 <vfprintf+0x2ba>
    1e06:	23 2d       	mov	r18, r3
    1e08:	2e 7f       	andi	r18, 0xFE	; 254
    1e0a:	a2 2e       	mov	r10, r18
    1e0c:	89 14       	cp	r8, r9
    1e0e:	58 f4       	brcc	.+22     	; 0x1e26 <vfprintf+0x2c0>
    1e10:	34 fe       	sbrs	r3, 4
    1e12:	0b c0       	rjmp	.+22     	; 0x1e2a <vfprintf+0x2c4>
    1e14:	32 fc       	sbrc	r3, 2
    1e16:	09 c0       	rjmp	.+18     	; 0x1e2a <vfprintf+0x2c4>
    1e18:	83 2d       	mov	r24, r3
    1e1a:	8e 7e       	andi	r24, 0xEE	; 238
    1e1c:	a8 2e       	mov	r10, r24
    1e1e:	05 c0       	rjmp	.+10     	; 0x1e2a <vfprintf+0x2c4>
    1e20:	b8 2c       	mov	r11, r8
    1e22:	a3 2c       	mov	r10, r3
    1e24:	03 c0       	rjmp	.+6      	; 0x1e2c <vfprintf+0x2c6>
    1e26:	b8 2c       	mov	r11, r8
    1e28:	01 c0       	rjmp	.+2      	; 0x1e2c <vfprintf+0x2c6>
    1e2a:	b9 2c       	mov	r11, r9
    1e2c:	a4 fe       	sbrs	r10, 4
    1e2e:	0f c0       	rjmp	.+30     	; 0x1e4e <vfprintf+0x2e8>
    1e30:	fe 01       	movw	r30, r28
    1e32:	e8 0d       	add	r30, r8
    1e34:	f1 1d       	adc	r31, r1
    1e36:	80 81       	ld	r24, Z
    1e38:	80 33       	cpi	r24, 0x30	; 48
    1e3a:	21 f4       	brne	.+8      	; 0x1e44 <vfprintf+0x2de>
    1e3c:	9a 2d       	mov	r25, r10
    1e3e:	99 7e       	andi	r25, 0xE9	; 233
    1e40:	a9 2e       	mov	r10, r25
    1e42:	09 c0       	rjmp	.+18     	; 0x1e56 <vfprintf+0x2f0>
    1e44:	a2 fe       	sbrs	r10, 2
    1e46:	06 c0       	rjmp	.+12     	; 0x1e54 <vfprintf+0x2ee>
    1e48:	b3 94       	inc	r11
    1e4a:	b3 94       	inc	r11
    1e4c:	04 c0       	rjmp	.+8      	; 0x1e56 <vfprintf+0x2f0>
    1e4e:	8a 2d       	mov	r24, r10
    1e50:	86 78       	andi	r24, 0x86	; 134
    1e52:	09 f0       	breq	.+2      	; 0x1e56 <vfprintf+0x2f0>
    1e54:	b3 94       	inc	r11
    1e56:	a3 fc       	sbrc	r10, 3
    1e58:	10 c0       	rjmp	.+32     	; 0x1e7a <vfprintf+0x314>
    1e5a:	a0 fe       	sbrs	r10, 0
    1e5c:	06 c0       	rjmp	.+12     	; 0x1e6a <vfprintf+0x304>
    1e5e:	b2 14       	cp	r11, r2
    1e60:	80 f4       	brcc	.+32     	; 0x1e82 <vfprintf+0x31c>
    1e62:	28 0c       	add	r2, r8
    1e64:	92 2c       	mov	r9, r2
    1e66:	9b 18       	sub	r9, r11
    1e68:	0d c0       	rjmp	.+26     	; 0x1e84 <vfprintf+0x31e>
    1e6a:	b2 14       	cp	r11, r2
    1e6c:	58 f4       	brcc	.+22     	; 0x1e84 <vfprintf+0x31e>
    1e6e:	b6 01       	movw	r22, r12
    1e70:	80 e2       	ldi	r24, 0x20	; 32
    1e72:	90 e0       	ldi	r25, 0x00	; 0
    1e74:	a2 d1       	rcall	.+836    	; 0x21ba <fputc>
    1e76:	b3 94       	inc	r11
    1e78:	f8 cf       	rjmp	.-16     	; 0x1e6a <vfprintf+0x304>
    1e7a:	b2 14       	cp	r11, r2
    1e7c:	18 f4       	brcc	.+6      	; 0x1e84 <vfprintf+0x31e>
    1e7e:	2b 18       	sub	r2, r11
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <vfprintf+0x320>
    1e82:	98 2c       	mov	r9, r8
    1e84:	21 2c       	mov	r2, r1
    1e86:	a4 fe       	sbrs	r10, 4
    1e88:	0f c0       	rjmp	.+30     	; 0x1ea8 <vfprintf+0x342>
    1e8a:	b6 01       	movw	r22, r12
    1e8c:	80 e3       	ldi	r24, 0x30	; 48
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	94 d1       	rcall	.+808    	; 0x21ba <fputc>
    1e92:	a2 fe       	sbrs	r10, 2
    1e94:	16 c0       	rjmp	.+44     	; 0x1ec2 <vfprintf+0x35c>
    1e96:	a1 fc       	sbrc	r10, 1
    1e98:	03 c0       	rjmp	.+6      	; 0x1ea0 <vfprintf+0x33a>
    1e9a:	88 e7       	ldi	r24, 0x78	; 120
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	02 c0       	rjmp	.+4      	; 0x1ea4 <vfprintf+0x33e>
    1ea0:	88 e5       	ldi	r24, 0x58	; 88
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	b6 01       	movw	r22, r12
    1ea6:	0c c0       	rjmp	.+24     	; 0x1ec0 <vfprintf+0x35a>
    1ea8:	8a 2d       	mov	r24, r10
    1eaa:	86 78       	andi	r24, 0x86	; 134
    1eac:	51 f0       	breq	.+20     	; 0x1ec2 <vfprintf+0x35c>
    1eae:	a1 fe       	sbrs	r10, 1
    1eb0:	02 c0       	rjmp	.+4      	; 0x1eb6 <vfprintf+0x350>
    1eb2:	8b e2       	ldi	r24, 0x2B	; 43
    1eb4:	01 c0       	rjmp	.+2      	; 0x1eb8 <vfprintf+0x352>
    1eb6:	80 e2       	ldi	r24, 0x20	; 32
    1eb8:	a7 fc       	sbrc	r10, 7
    1eba:	8d e2       	ldi	r24, 0x2D	; 45
    1ebc:	b6 01       	movw	r22, r12
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	7c d1       	rcall	.+760    	; 0x21ba <fputc>
    1ec2:	89 14       	cp	r8, r9
    1ec4:	30 f4       	brcc	.+12     	; 0x1ed2 <vfprintf+0x36c>
    1ec6:	b6 01       	movw	r22, r12
    1ec8:	80 e3       	ldi	r24, 0x30	; 48
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	76 d1       	rcall	.+748    	; 0x21ba <fputc>
    1ece:	9a 94       	dec	r9
    1ed0:	f8 cf       	rjmp	.-16     	; 0x1ec2 <vfprintf+0x35c>
    1ed2:	8a 94       	dec	r8
    1ed4:	f3 01       	movw	r30, r6
    1ed6:	e8 0d       	add	r30, r8
    1ed8:	f1 1d       	adc	r31, r1
    1eda:	80 81       	ld	r24, Z
    1edc:	b6 01       	movw	r22, r12
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	6c d1       	rcall	.+728    	; 0x21ba <fputc>
    1ee2:	81 10       	cpse	r8, r1
    1ee4:	f6 cf       	rjmp	.-20     	; 0x1ed2 <vfprintf+0x36c>
    1ee6:	22 20       	and	r2, r2
    1ee8:	09 f4       	brne	.+2      	; 0x1eec <vfprintf+0x386>
    1eea:	4e ce       	rjmp	.-868    	; 0x1b88 <vfprintf+0x22>
    1eec:	b6 01       	movw	r22, r12
    1eee:	80 e2       	ldi	r24, 0x20	; 32
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	63 d1       	rcall	.+710    	; 0x21ba <fputc>
    1ef4:	2a 94       	dec	r2
    1ef6:	f7 cf       	rjmp	.-18     	; 0x1ee6 <vfprintf+0x380>
    1ef8:	f6 01       	movw	r30, r12
    1efa:	86 81       	ldd	r24, Z+6	; 0x06
    1efc:	97 81       	ldd	r25, Z+7	; 0x07
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <vfprintf+0x39e>
    1f00:	8f ef       	ldi	r24, 0xFF	; 255
    1f02:	9f ef       	ldi	r25, 0xFF	; 255
    1f04:	2b 96       	adiw	r28, 0x0b	; 11
    1f06:	e2 e1       	ldi	r30, 0x12	; 18
    1f08:	0b c2       	rjmp	.+1046   	; 0x2320 <__epilogue_restores__>

00001f0a <calloc>:
    1f0a:	0f 93       	push	r16
    1f0c:	1f 93       	push	r17
    1f0e:	cf 93       	push	r28
    1f10:	df 93       	push	r29
    1f12:	86 9f       	mul	r24, r22
    1f14:	80 01       	movw	r16, r0
    1f16:	87 9f       	mul	r24, r23
    1f18:	10 0d       	add	r17, r0
    1f1a:	96 9f       	mul	r25, r22
    1f1c:	10 0d       	add	r17, r0
    1f1e:	11 24       	eor	r1, r1
    1f20:	c8 01       	movw	r24, r16
    1f22:	0d d0       	rcall	.+26     	; 0x1f3e <malloc>
    1f24:	ec 01       	movw	r28, r24
    1f26:	00 97       	sbiw	r24, 0x00	; 0
    1f28:	21 f0       	breq	.+8      	; 0x1f32 <calloc+0x28>
    1f2a:	a8 01       	movw	r20, r16
    1f2c:	60 e0       	ldi	r22, 0x00	; 0
    1f2e:	70 e0       	ldi	r23, 0x00	; 0
    1f30:	32 d1       	rcall	.+612    	; 0x2196 <memset>
    1f32:	ce 01       	movw	r24, r28
    1f34:	df 91       	pop	r29
    1f36:	cf 91       	pop	r28
    1f38:	1f 91       	pop	r17
    1f3a:	0f 91       	pop	r16
    1f3c:	08 95       	ret

00001f3e <malloc>:
    1f3e:	0f 93       	push	r16
    1f40:	1f 93       	push	r17
    1f42:	cf 93       	push	r28
    1f44:	df 93       	push	r29
    1f46:	82 30       	cpi	r24, 0x02	; 2
    1f48:	91 05       	cpc	r25, r1
    1f4a:	10 f4       	brcc	.+4      	; 0x1f50 <malloc+0x12>
    1f4c:	82 e0       	ldi	r24, 0x02	; 2
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	e0 91 21 23 	lds	r30, 0x2321	; 0x802321 <__flp>
    1f54:	f0 91 22 23 	lds	r31, 0x2322	; 0x802322 <__flp+0x1>
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	a0 e0       	ldi	r26, 0x00	; 0
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	30 97       	sbiw	r30, 0x00	; 0
    1f62:	19 f1       	breq	.+70     	; 0x1faa <malloc+0x6c>
    1f64:	40 81       	ld	r20, Z
    1f66:	51 81       	ldd	r21, Z+1	; 0x01
    1f68:	02 81       	ldd	r16, Z+2	; 0x02
    1f6a:	13 81       	ldd	r17, Z+3	; 0x03
    1f6c:	48 17       	cp	r20, r24
    1f6e:	59 07       	cpc	r21, r25
    1f70:	c8 f0       	brcs	.+50     	; 0x1fa4 <malloc+0x66>
    1f72:	84 17       	cp	r24, r20
    1f74:	95 07       	cpc	r25, r21
    1f76:	69 f4       	brne	.+26     	; 0x1f92 <malloc+0x54>
    1f78:	10 97       	sbiw	r26, 0x00	; 0
    1f7a:	31 f0       	breq	.+12     	; 0x1f88 <malloc+0x4a>
    1f7c:	12 96       	adiw	r26, 0x02	; 2
    1f7e:	0c 93       	st	X, r16
    1f80:	12 97       	sbiw	r26, 0x02	; 2
    1f82:	13 96       	adiw	r26, 0x03	; 3
    1f84:	1c 93       	st	X, r17
    1f86:	27 c0       	rjmp	.+78     	; 0x1fd6 <malloc+0x98>
    1f88:	00 93 21 23 	sts	0x2321, r16	; 0x802321 <__flp>
    1f8c:	10 93 22 23 	sts	0x2322, r17	; 0x802322 <__flp+0x1>
    1f90:	22 c0       	rjmp	.+68     	; 0x1fd6 <malloc+0x98>
    1f92:	21 15       	cp	r18, r1
    1f94:	31 05       	cpc	r19, r1
    1f96:	19 f0       	breq	.+6      	; 0x1f9e <malloc+0x60>
    1f98:	42 17       	cp	r20, r18
    1f9a:	53 07       	cpc	r21, r19
    1f9c:	18 f4       	brcc	.+6      	; 0x1fa4 <malloc+0x66>
    1f9e:	9a 01       	movw	r18, r20
    1fa0:	bd 01       	movw	r22, r26
    1fa2:	ef 01       	movw	r28, r30
    1fa4:	df 01       	movw	r26, r30
    1fa6:	f8 01       	movw	r30, r16
    1fa8:	db cf       	rjmp	.-74     	; 0x1f60 <malloc+0x22>
    1faa:	21 15       	cp	r18, r1
    1fac:	31 05       	cpc	r19, r1
    1fae:	f9 f0       	breq	.+62     	; 0x1fee <malloc+0xb0>
    1fb0:	28 1b       	sub	r18, r24
    1fb2:	39 0b       	sbc	r19, r25
    1fb4:	24 30       	cpi	r18, 0x04	; 4
    1fb6:	31 05       	cpc	r19, r1
    1fb8:	80 f4       	brcc	.+32     	; 0x1fda <malloc+0x9c>
    1fba:	8a 81       	ldd	r24, Y+2	; 0x02
    1fbc:	9b 81       	ldd	r25, Y+3	; 0x03
    1fbe:	61 15       	cp	r22, r1
    1fc0:	71 05       	cpc	r23, r1
    1fc2:	21 f0       	breq	.+8      	; 0x1fcc <malloc+0x8e>
    1fc4:	fb 01       	movw	r30, r22
    1fc6:	82 83       	std	Z+2, r24	; 0x02
    1fc8:	93 83       	std	Z+3, r25	; 0x03
    1fca:	04 c0       	rjmp	.+8      	; 0x1fd4 <malloc+0x96>
    1fcc:	80 93 21 23 	sts	0x2321, r24	; 0x802321 <__flp>
    1fd0:	90 93 22 23 	sts	0x2322, r25	; 0x802322 <__flp+0x1>
    1fd4:	fe 01       	movw	r30, r28
    1fd6:	32 96       	adiw	r30, 0x02	; 2
    1fd8:	44 c0       	rjmp	.+136    	; 0x2062 <malloc+0x124>
    1fda:	fe 01       	movw	r30, r28
    1fdc:	e2 0f       	add	r30, r18
    1fde:	f3 1f       	adc	r31, r19
    1fe0:	81 93       	st	Z+, r24
    1fe2:	91 93       	st	Z+, r25
    1fe4:	22 50       	subi	r18, 0x02	; 2
    1fe6:	31 09       	sbc	r19, r1
    1fe8:	28 83       	st	Y, r18
    1fea:	39 83       	std	Y+1, r19	; 0x01
    1fec:	3a c0       	rjmp	.+116    	; 0x2062 <malloc+0x124>
    1fee:	20 91 1f 23 	lds	r18, 0x231F	; 0x80231f <__brkval>
    1ff2:	30 91 20 23 	lds	r19, 0x2320	; 0x802320 <__brkval+0x1>
    1ff6:	23 2b       	or	r18, r19
    1ff8:	41 f4       	brne	.+16     	; 0x200a <malloc+0xcc>
    1ffa:	20 91 02 20 	lds	r18, 0x2002	; 0x802002 <__malloc_heap_start>
    1ffe:	30 91 03 20 	lds	r19, 0x2003	; 0x802003 <__malloc_heap_start+0x1>
    2002:	20 93 1f 23 	sts	0x231F, r18	; 0x80231f <__brkval>
    2006:	30 93 20 23 	sts	0x2320, r19	; 0x802320 <__brkval+0x1>
    200a:	20 91 00 20 	lds	r18, 0x2000	; 0x802000 <__data_start>
    200e:	30 91 01 20 	lds	r19, 0x2001	; 0x802001 <__data_start+0x1>
    2012:	21 15       	cp	r18, r1
    2014:	31 05       	cpc	r19, r1
    2016:	41 f4       	brne	.+16     	; 0x2028 <malloc+0xea>
    2018:	2d b7       	in	r18, 0x3d	; 61
    201a:	3e b7       	in	r19, 0x3e	; 62
    201c:	40 91 04 20 	lds	r20, 0x2004	; 0x802004 <__malloc_margin>
    2020:	50 91 05 20 	lds	r21, 0x2005	; 0x802005 <__malloc_margin+0x1>
    2024:	24 1b       	sub	r18, r20
    2026:	35 0b       	sbc	r19, r21
    2028:	e0 91 1f 23 	lds	r30, 0x231F	; 0x80231f <__brkval>
    202c:	f0 91 20 23 	lds	r31, 0x2320	; 0x802320 <__brkval+0x1>
    2030:	e2 17       	cp	r30, r18
    2032:	f3 07       	cpc	r31, r19
    2034:	a0 f4       	brcc	.+40     	; 0x205e <malloc+0x120>
    2036:	2e 1b       	sub	r18, r30
    2038:	3f 0b       	sbc	r19, r31
    203a:	28 17       	cp	r18, r24
    203c:	39 07       	cpc	r19, r25
    203e:	78 f0       	brcs	.+30     	; 0x205e <malloc+0x120>
    2040:	ac 01       	movw	r20, r24
    2042:	4e 5f       	subi	r20, 0xFE	; 254
    2044:	5f 4f       	sbci	r21, 0xFF	; 255
    2046:	24 17       	cp	r18, r20
    2048:	35 07       	cpc	r19, r21
    204a:	48 f0       	brcs	.+18     	; 0x205e <malloc+0x120>
    204c:	4e 0f       	add	r20, r30
    204e:	5f 1f       	adc	r21, r31
    2050:	40 93 1f 23 	sts	0x231F, r20	; 0x80231f <__brkval>
    2054:	50 93 20 23 	sts	0x2320, r21	; 0x802320 <__brkval+0x1>
    2058:	81 93       	st	Z+, r24
    205a:	91 93       	st	Z+, r25
    205c:	02 c0       	rjmp	.+4      	; 0x2062 <malloc+0x124>
    205e:	e0 e0       	ldi	r30, 0x00	; 0
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	cf 01       	movw	r24, r30
    2064:	df 91       	pop	r29
    2066:	cf 91       	pop	r28
    2068:	1f 91       	pop	r17
    206a:	0f 91       	pop	r16
    206c:	08 95       	ret

0000206e <free>:
    206e:	cf 93       	push	r28
    2070:	df 93       	push	r29
    2072:	00 97       	sbiw	r24, 0x00	; 0
    2074:	09 f4       	brne	.+2      	; 0x2078 <free+0xa>
    2076:	81 c0       	rjmp	.+258    	; 0x217a <free+0x10c>
    2078:	fc 01       	movw	r30, r24
    207a:	32 97       	sbiw	r30, 0x02	; 2
    207c:	12 82       	std	Z+2, r1	; 0x02
    207e:	13 82       	std	Z+3, r1	; 0x03
    2080:	a0 91 21 23 	lds	r26, 0x2321	; 0x802321 <__flp>
    2084:	b0 91 22 23 	lds	r27, 0x2322	; 0x802322 <__flp+0x1>
    2088:	10 97       	sbiw	r26, 0x00	; 0
    208a:	81 f4       	brne	.+32     	; 0x20ac <free+0x3e>
    208c:	20 81       	ld	r18, Z
    208e:	31 81       	ldd	r19, Z+1	; 0x01
    2090:	82 0f       	add	r24, r18
    2092:	93 1f       	adc	r25, r19
    2094:	20 91 1f 23 	lds	r18, 0x231F	; 0x80231f <__brkval>
    2098:	30 91 20 23 	lds	r19, 0x2320	; 0x802320 <__brkval+0x1>
    209c:	28 17       	cp	r18, r24
    209e:	39 07       	cpc	r19, r25
    20a0:	51 f5       	brne	.+84     	; 0x20f6 <free+0x88>
    20a2:	e0 93 1f 23 	sts	0x231F, r30	; 0x80231f <__brkval>
    20a6:	f0 93 20 23 	sts	0x2320, r31	; 0x802320 <__brkval+0x1>
    20aa:	67 c0       	rjmp	.+206    	; 0x217a <free+0x10c>
    20ac:	ed 01       	movw	r28, r26
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	ce 17       	cp	r28, r30
    20b4:	df 07       	cpc	r29, r31
    20b6:	40 f4       	brcc	.+16     	; 0x20c8 <free+0x5a>
    20b8:	4a 81       	ldd	r20, Y+2	; 0x02
    20ba:	5b 81       	ldd	r21, Y+3	; 0x03
    20bc:	9e 01       	movw	r18, r28
    20be:	41 15       	cp	r20, r1
    20c0:	51 05       	cpc	r21, r1
    20c2:	f1 f0       	breq	.+60     	; 0x2100 <free+0x92>
    20c4:	ea 01       	movw	r28, r20
    20c6:	f5 cf       	rjmp	.-22     	; 0x20b2 <free+0x44>
    20c8:	c2 83       	std	Z+2, r28	; 0x02
    20ca:	d3 83       	std	Z+3, r29	; 0x03
    20cc:	40 81       	ld	r20, Z
    20ce:	51 81       	ldd	r21, Z+1	; 0x01
    20d0:	84 0f       	add	r24, r20
    20d2:	95 1f       	adc	r25, r21
    20d4:	c8 17       	cp	r28, r24
    20d6:	d9 07       	cpc	r29, r25
    20d8:	59 f4       	brne	.+22     	; 0x20f0 <free+0x82>
    20da:	88 81       	ld	r24, Y
    20dc:	99 81       	ldd	r25, Y+1	; 0x01
    20de:	84 0f       	add	r24, r20
    20e0:	95 1f       	adc	r25, r21
    20e2:	02 96       	adiw	r24, 0x02	; 2
    20e4:	80 83       	st	Z, r24
    20e6:	91 83       	std	Z+1, r25	; 0x01
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	9b 81       	ldd	r25, Y+3	; 0x03
    20ec:	82 83       	std	Z+2, r24	; 0x02
    20ee:	93 83       	std	Z+3, r25	; 0x03
    20f0:	21 15       	cp	r18, r1
    20f2:	31 05       	cpc	r19, r1
    20f4:	29 f4       	brne	.+10     	; 0x2100 <free+0x92>
    20f6:	e0 93 21 23 	sts	0x2321, r30	; 0x802321 <__flp>
    20fa:	f0 93 22 23 	sts	0x2322, r31	; 0x802322 <__flp+0x1>
    20fe:	3d c0       	rjmp	.+122    	; 0x217a <free+0x10c>
    2100:	e9 01       	movw	r28, r18
    2102:	ea 83       	std	Y+2, r30	; 0x02
    2104:	fb 83       	std	Y+3, r31	; 0x03
    2106:	49 91       	ld	r20, Y+
    2108:	59 91       	ld	r21, Y+
    210a:	c4 0f       	add	r28, r20
    210c:	d5 1f       	adc	r29, r21
    210e:	ec 17       	cp	r30, r28
    2110:	fd 07       	cpc	r31, r29
    2112:	61 f4       	brne	.+24     	; 0x212c <free+0xbe>
    2114:	80 81       	ld	r24, Z
    2116:	91 81       	ldd	r25, Z+1	; 0x01
    2118:	84 0f       	add	r24, r20
    211a:	95 1f       	adc	r25, r21
    211c:	02 96       	adiw	r24, 0x02	; 2
    211e:	e9 01       	movw	r28, r18
    2120:	88 83       	st	Y, r24
    2122:	99 83       	std	Y+1, r25	; 0x01
    2124:	82 81       	ldd	r24, Z+2	; 0x02
    2126:	93 81       	ldd	r25, Z+3	; 0x03
    2128:	8a 83       	std	Y+2, r24	; 0x02
    212a:	9b 83       	std	Y+3, r25	; 0x03
    212c:	e0 e0       	ldi	r30, 0x00	; 0
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	12 96       	adiw	r26, 0x02	; 2
    2132:	8d 91       	ld	r24, X+
    2134:	9c 91       	ld	r25, X
    2136:	13 97       	sbiw	r26, 0x03	; 3
    2138:	00 97       	sbiw	r24, 0x00	; 0
    213a:	19 f0       	breq	.+6      	; 0x2142 <free+0xd4>
    213c:	fd 01       	movw	r30, r26
    213e:	dc 01       	movw	r26, r24
    2140:	f7 cf       	rjmp	.-18     	; 0x2130 <free+0xc2>
    2142:	8d 91       	ld	r24, X+
    2144:	9c 91       	ld	r25, X
    2146:	11 97       	sbiw	r26, 0x01	; 1
    2148:	9d 01       	movw	r18, r26
    214a:	2e 5f       	subi	r18, 0xFE	; 254
    214c:	3f 4f       	sbci	r19, 0xFF	; 255
    214e:	82 0f       	add	r24, r18
    2150:	93 1f       	adc	r25, r19
    2152:	20 91 1f 23 	lds	r18, 0x231F	; 0x80231f <__brkval>
    2156:	30 91 20 23 	lds	r19, 0x2320	; 0x802320 <__brkval+0x1>
    215a:	28 17       	cp	r18, r24
    215c:	39 07       	cpc	r19, r25
    215e:	69 f4       	brne	.+26     	; 0x217a <free+0x10c>
    2160:	30 97       	sbiw	r30, 0x00	; 0
    2162:	29 f4       	brne	.+10     	; 0x216e <free+0x100>
    2164:	10 92 21 23 	sts	0x2321, r1	; 0x802321 <__flp>
    2168:	10 92 22 23 	sts	0x2322, r1	; 0x802322 <__flp+0x1>
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <free+0x104>
    216e:	12 82       	std	Z+2, r1	; 0x02
    2170:	13 82       	std	Z+3, r1	; 0x03
    2172:	a0 93 1f 23 	sts	0x231F, r26	; 0x80231f <__brkval>
    2176:	b0 93 20 23 	sts	0x2320, r27	; 0x802320 <__brkval+0x1>
    217a:	df 91       	pop	r29
    217c:	cf 91       	pop	r28
    217e:	08 95       	ret

00002180 <strnlen_P>:
    2180:	fc 01       	movw	r30, r24
    2182:	05 90       	lpm	r0, Z+
    2184:	61 50       	subi	r22, 0x01	; 1
    2186:	70 40       	sbci	r23, 0x00	; 0
    2188:	01 10       	cpse	r0, r1
    218a:	d8 f7       	brcc	.-10     	; 0x2182 <strnlen_P+0x2>
    218c:	80 95       	com	r24
    218e:	90 95       	com	r25
    2190:	8e 0f       	add	r24, r30
    2192:	9f 1f       	adc	r25, r31
    2194:	08 95       	ret

00002196 <memset>:
    2196:	dc 01       	movw	r26, r24
    2198:	01 c0       	rjmp	.+2      	; 0x219c <memset+0x6>
    219a:	6d 93       	st	X+, r22
    219c:	41 50       	subi	r20, 0x01	; 1
    219e:	50 40       	sbci	r21, 0x00	; 0
    21a0:	e0 f7       	brcc	.-8      	; 0x219a <memset+0x4>
    21a2:	08 95       	ret

000021a4 <strnlen>:
    21a4:	fc 01       	movw	r30, r24
    21a6:	61 50       	subi	r22, 0x01	; 1
    21a8:	70 40       	sbci	r23, 0x00	; 0
    21aa:	01 90       	ld	r0, Z+
    21ac:	01 10       	cpse	r0, r1
    21ae:	d8 f7       	brcc	.-10     	; 0x21a6 <strnlen+0x2>
    21b0:	80 95       	com	r24
    21b2:	90 95       	com	r25
    21b4:	8e 0f       	add	r24, r30
    21b6:	9f 1f       	adc	r25, r31
    21b8:	08 95       	ret

000021ba <fputc>:
    21ba:	0f 93       	push	r16
    21bc:	1f 93       	push	r17
    21be:	cf 93       	push	r28
    21c0:	df 93       	push	r29
    21c2:	fb 01       	movw	r30, r22
    21c4:	23 81       	ldd	r18, Z+3	; 0x03
    21c6:	21 fd       	sbrc	r18, 1
    21c8:	03 c0       	rjmp	.+6      	; 0x21d0 <fputc+0x16>
    21ca:	8f ef       	ldi	r24, 0xFF	; 255
    21cc:	9f ef       	ldi	r25, 0xFF	; 255
    21ce:	2c c0       	rjmp	.+88     	; 0x2228 <fputc+0x6e>
    21d0:	22 ff       	sbrs	r18, 2
    21d2:	16 c0       	rjmp	.+44     	; 0x2200 <fputc+0x46>
    21d4:	46 81       	ldd	r20, Z+6	; 0x06
    21d6:	57 81       	ldd	r21, Z+7	; 0x07
    21d8:	24 81       	ldd	r18, Z+4	; 0x04
    21da:	35 81       	ldd	r19, Z+5	; 0x05
    21dc:	42 17       	cp	r20, r18
    21de:	53 07       	cpc	r21, r19
    21e0:	44 f4       	brge	.+16     	; 0x21f2 <fputc+0x38>
    21e2:	a0 81       	ld	r26, Z
    21e4:	b1 81       	ldd	r27, Z+1	; 0x01
    21e6:	9d 01       	movw	r18, r26
    21e8:	2f 5f       	subi	r18, 0xFF	; 255
    21ea:	3f 4f       	sbci	r19, 0xFF	; 255
    21ec:	20 83       	st	Z, r18
    21ee:	31 83       	std	Z+1, r19	; 0x01
    21f0:	8c 93       	st	X, r24
    21f2:	26 81       	ldd	r18, Z+6	; 0x06
    21f4:	37 81       	ldd	r19, Z+7	; 0x07
    21f6:	2f 5f       	subi	r18, 0xFF	; 255
    21f8:	3f 4f       	sbci	r19, 0xFF	; 255
    21fa:	26 83       	std	Z+6, r18	; 0x06
    21fc:	37 83       	std	Z+7, r19	; 0x07
    21fe:	14 c0       	rjmp	.+40     	; 0x2228 <fputc+0x6e>
    2200:	8b 01       	movw	r16, r22
    2202:	ec 01       	movw	r28, r24
    2204:	fb 01       	movw	r30, r22
    2206:	00 84       	ldd	r0, Z+8	; 0x08
    2208:	f1 85       	ldd	r31, Z+9	; 0x09
    220a:	e0 2d       	mov	r30, r0
    220c:	09 95       	icall
    220e:	89 2b       	or	r24, r25
    2210:	e1 f6       	brne	.-72     	; 0x21ca <fputc+0x10>
    2212:	d8 01       	movw	r26, r16
    2214:	16 96       	adiw	r26, 0x06	; 6
    2216:	8d 91       	ld	r24, X+
    2218:	9c 91       	ld	r25, X
    221a:	17 97       	sbiw	r26, 0x07	; 7
    221c:	01 96       	adiw	r24, 0x01	; 1
    221e:	16 96       	adiw	r26, 0x06	; 6
    2220:	8d 93       	st	X+, r24
    2222:	9c 93       	st	X, r25
    2224:	17 97       	sbiw	r26, 0x07	; 7
    2226:	ce 01       	movw	r24, r28
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	1f 91       	pop	r17
    222e:	0f 91       	pop	r16
    2230:	08 95       	ret

00002232 <__ultoa_invert>:
    2232:	fa 01       	movw	r30, r20
    2234:	aa 27       	eor	r26, r26
    2236:	28 30       	cpi	r18, 0x08	; 8
    2238:	51 f1       	breq	.+84     	; 0x228e <__ultoa_invert+0x5c>
    223a:	20 31       	cpi	r18, 0x10	; 16
    223c:	81 f1       	breq	.+96     	; 0x229e <__ultoa_invert+0x6c>
    223e:	e8 94       	clt
    2240:	6f 93       	push	r22
    2242:	6e 7f       	andi	r22, 0xFE	; 254
    2244:	6e 5f       	subi	r22, 0xFE	; 254
    2246:	7f 4f       	sbci	r23, 0xFF	; 255
    2248:	8f 4f       	sbci	r24, 0xFF	; 255
    224a:	9f 4f       	sbci	r25, 0xFF	; 255
    224c:	af 4f       	sbci	r26, 0xFF	; 255
    224e:	b1 e0       	ldi	r27, 0x01	; 1
    2250:	3e d0       	rcall	.+124    	; 0x22ce <__ultoa_invert+0x9c>
    2252:	b4 e0       	ldi	r27, 0x04	; 4
    2254:	3c d0       	rcall	.+120    	; 0x22ce <__ultoa_invert+0x9c>
    2256:	67 0f       	add	r22, r23
    2258:	78 1f       	adc	r23, r24
    225a:	89 1f       	adc	r24, r25
    225c:	9a 1f       	adc	r25, r26
    225e:	a1 1d       	adc	r26, r1
    2260:	68 0f       	add	r22, r24
    2262:	79 1f       	adc	r23, r25
    2264:	8a 1f       	adc	r24, r26
    2266:	91 1d       	adc	r25, r1
    2268:	a1 1d       	adc	r26, r1
    226a:	6a 0f       	add	r22, r26
    226c:	71 1d       	adc	r23, r1
    226e:	81 1d       	adc	r24, r1
    2270:	91 1d       	adc	r25, r1
    2272:	a1 1d       	adc	r26, r1
    2274:	20 d0       	rcall	.+64     	; 0x22b6 <__ultoa_invert+0x84>
    2276:	09 f4       	brne	.+2      	; 0x227a <__ultoa_invert+0x48>
    2278:	68 94       	set
    227a:	3f 91       	pop	r19
    227c:	2a e0       	ldi	r18, 0x0A	; 10
    227e:	26 9f       	mul	r18, r22
    2280:	11 24       	eor	r1, r1
    2282:	30 19       	sub	r19, r0
    2284:	30 5d       	subi	r19, 0xD0	; 208
    2286:	31 93       	st	Z+, r19
    2288:	de f6       	brtc	.-74     	; 0x2240 <__ultoa_invert+0xe>
    228a:	cf 01       	movw	r24, r30
    228c:	08 95       	ret
    228e:	46 2f       	mov	r20, r22
    2290:	47 70       	andi	r20, 0x07	; 7
    2292:	40 5d       	subi	r20, 0xD0	; 208
    2294:	41 93       	st	Z+, r20
    2296:	b3 e0       	ldi	r27, 0x03	; 3
    2298:	0f d0       	rcall	.+30     	; 0x22b8 <__ultoa_invert+0x86>
    229a:	c9 f7       	brne	.-14     	; 0x228e <__ultoa_invert+0x5c>
    229c:	f6 cf       	rjmp	.-20     	; 0x228a <__ultoa_invert+0x58>
    229e:	46 2f       	mov	r20, r22
    22a0:	4f 70       	andi	r20, 0x0F	; 15
    22a2:	40 5d       	subi	r20, 0xD0	; 208
    22a4:	4a 33       	cpi	r20, 0x3A	; 58
    22a6:	18 f0       	brcs	.+6      	; 0x22ae <__ultoa_invert+0x7c>
    22a8:	49 5d       	subi	r20, 0xD9	; 217
    22aa:	31 fd       	sbrc	r19, 1
    22ac:	40 52       	subi	r20, 0x20	; 32
    22ae:	41 93       	st	Z+, r20
    22b0:	02 d0       	rcall	.+4      	; 0x22b6 <__ultoa_invert+0x84>
    22b2:	a9 f7       	brne	.-22     	; 0x229e <__ultoa_invert+0x6c>
    22b4:	ea cf       	rjmp	.-44     	; 0x228a <__ultoa_invert+0x58>
    22b6:	b4 e0       	ldi	r27, 0x04	; 4
    22b8:	a6 95       	lsr	r26
    22ba:	97 95       	ror	r25
    22bc:	87 95       	ror	r24
    22be:	77 95       	ror	r23
    22c0:	67 95       	ror	r22
    22c2:	ba 95       	dec	r27
    22c4:	c9 f7       	brne	.-14     	; 0x22b8 <__ultoa_invert+0x86>
    22c6:	00 97       	sbiw	r24, 0x00	; 0
    22c8:	61 05       	cpc	r22, r1
    22ca:	71 05       	cpc	r23, r1
    22cc:	08 95       	ret
    22ce:	9b 01       	movw	r18, r22
    22d0:	ac 01       	movw	r20, r24
    22d2:	0a 2e       	mov	r0, r26
    22d4:	06 94       	lsr	r0
    22d6:	57 95       	ror	r21
    22d8:	47 95       	ror	r20
    22da:	37 95       	ror	r19
    22dc:	27 95       	ror	r18
    22de:	ba 95       	dec	r27
    22e0:	c9 f7       	brne	.-14     	; 0x22d4 <__ultoa_invert+0xa2>
    22e2:	62 0f       	add	r22, r18
    22e4:	73 1f       	adc	r23, r19
    22e6:	84 1f       	adc	r24, r20
    22e8:	95 1f       	adc	r25, r21
    22ea:	a0 1d       	adc	r26, r0
    22ec:	08 95       	ret

000022ee <__prologue_saves__>:
    22ee:	2f 92       	push	r2
    22f0:	3f 92       	push	r3
    22f2:	4f 92       	push	r4
    22f4:	5f 92       	push	r5
    22f6:	6f 92       	push	r6
    22f8:	7f 92       	push	r7
    22fa:	8f 92       	push	r8
    22fc:	9f 92       	push	r9
    22fe:	af 92       	push	r10
    2300:	bf 92       	push	r11
    2302:	cf 92       	push	r12
    2304:	df 92       	push	r13
    2306:	ef 92       	push	r14
    2308:	ff 92       	push	r15
    230a:	0f 93       	push	r16
    230c:	1f 93       	push	r17
    230e:	cf 93       	push	r28
    2310:	df 93       	push	r29
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
    2316:	ca 1b       	sub	r28, r26
    2318:	db 0b       	sbc	r29, r27
    231a:	cd bf       	out	0x3d, r28	; 61
    231c:	de bf       	out	0x3e, r29	; 62
    231e:	09 94       	ijmp

00002320 <__epilogue_restores__>:
    2320:	2a 88       	ldd	r2, Y+18	; 0x12
    2322:	39 88       	ldd	r3, Y+17	; 0x11
    2324:	48 88       	ldd	r4, Y+16	; 0x10
    2326:	5f 84       	ldd	r5, Y+15	; 0x0f
    2328:	6e 84       	ldd	r6, Y+14	; 0x0e
    232a:	7d 84       	ldd	r7, Y+13	; 0x0d
    232c:	8c 84       	ldd	r8, Y+12	; 0x0c
    232e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2330:	aa 84       	ldd	r10, Y+10	; 0x0a
    2332:	b9 84       	ldd	r11, Y+9	; 0x09
    2334:	c8 84       	ldd	r12, Y+8	; 0x08
    2336:	df 80       	ldd	r13, Y+7	; 0x07
    2338:	ee 80       	ldd	r14, Y+6	; 0x06
    233a:	fd 80       	ldd	r15, Y+5	; 0x05
    233c:	0c 81       	ldd	r16, Y+4	; 0x04
    233e:	1b 81       	ldd	r17, Y+3	; 0x03
    2340:	aa 81       	ldd	r26, Y+2	; 0x02
    2342:	b9 81       	ldd	r27, Y+1	; 0x01
    2344:	ce 0f       	add	r28, r30
    2346:	d1 1d       	adc	r29, r1
    2348:	cd bf       	out	0x3d, r28	; 61
    234a:	de bf       	out	0x3e, r29	; 62
    234c:	ed 01       	movw	r28, r26
    234e:	08 95       	ret

00002350 <_exit>:
    2350:	f8 94       	cli

00002352 <__stop_program>:
    2352:	ff cf       	rjmp	.-2      	; 0x2352 <__stop_program>
